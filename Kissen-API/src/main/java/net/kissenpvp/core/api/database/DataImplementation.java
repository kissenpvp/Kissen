/*
 * Copyright (C) 2023 KissenPvP
 *
 * This program is licensed under the Apache License, Version 2.0.
 *
 * This software may be redistributed and/or modified under the terms
 * of the Apache License as published by the Apache Software Foundation,
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
 * License, Version 2.0 for the specific language governing permissions
 * and limitations under the License.
 *
 * You should have received a copy of the Apache License, Version 2.0
 * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
 */

package net.kissenpvp.core.api.database;

import com.google.gson.JsonElement;
import net.kissenpvp.core.api.base.Implementation;
import org.jetbrains.annotations.NotNull;


/**
 * The {@code DatabaseImplementation} interface defines the contract for a database implementation that extends
 * the {@link Implementation} interface, which specifies that it is an implementation of a system component.
 *
 * <p>
 * This interface provides methods to convert records to JSON format, retrieve records from JSON, and generate unique
 * identifiers for records. It serves as a foundation for implementing specific database-related functionality.
 * </p>
 *
 * <p>
 * Implementations of the {@code DatabaseImplementation} interface are responsible for defining the behavior
 * and logic for interacting with a specific database system. By extending the {@link Implementation} interface,
 * it adheres to the overall system component structure, promoting code reusability and modularity.
 * </p>
 */
public interface DataImplementation extends Implementation {

    /**
     * Converts a {@link Record} object to its JSON representation.
     * <p>
     * This method serializes the provided {@link Record} object into its JSON representation as a string.
     * It uses a default configuration to convert the object, including all its fields, into a JSON format.
     * The resulting JSON string represents the state of the record, including its properties and values.
     *
     * @param record the record instance to be converted. Must not be null.
     * @return the JSON representation of the record as a string. The returned string will not be null.
     * @throws IllegalArgumentException if the provided record is null.
     */
    @NotNull String toJson(@NotNull Record record);

    /**
     * Converts a {@link Record} object to a {@link JsonElement} object provided by the Gson API.
     * <p>
     * This method converts the provided {@link Record} object into a {@link JsonElement} object
     * using the Gson API. The resulting {@link JsonElement} represents the serialized form of the record.
     * The Gson library provides powerful features to work with JSON data.
     *
     * @param record the record to be converted. Must not be null.
     * @return the converted record as a {@link JsonElement}. The returned {@link JsonElement} will not be null.
     * @throws IllegalArgumentException if the provided record is null.
     */
    @NotNull JsonElement toJsonElement(@NotNull Record record);

    /**
     * Converts a JSON string back to a {@link Record} object.
     * <p>
     * This method deserializes a JSON string, previously generated by the {@link #toJson(Record)} method,
     * and recreates a {@link Record} object based on the provided record class.
     * The provided JSON string should represent the state of the record, including its properties and values.
     * The resulting record object will be of the specified record class and will be populated with the
     * corresponding parameters extracted from the JSON string.
     *
     * @param <T>    the type of the record to be created. Must be a subtype of {@link Record}.
     * @param json   the JSON string previously generated by the {@link #toJson(Record)} method. Must not be null.
     * @param record the class of the record to be created. Must not be null.
     * @return the record created and populated with its parameters. The returned record will not be null.
     * @throws IllegalArgumentException           if the provided JSON string or record class is null.
     * @throws com.google.gson.JsonParseException if the JSON string is malformed or cannot be parsed correctly.
     */
    <T extends Record> @NotNull T fromJson(@NotNull String json, @NotNull Class<T> record);

    /**
     * Generates a unique identifier.
     * <p>
     * This method generates a unique identifier that follows a specific format. The generated identifier
     * consists of a four-character sequence comprising lowercase letters and numbers. It ensures the uniqueness
     * of the generated identifiers by using a combination of letters and numbers in a fixed length.
     * The generated identifier can be used to uniquely identify entities or objects within a system.
     * <p>
     * The ID has the following format: a four-character sequence consisting of lowercase letters and numbers.
     * For example: "a784", "1cdf", or "aa82". It matches the regular expression pattern: {@code ^[a-z0-9]{4}$}.
     * The pattern enforces that the identifier should be exactly four characters long and only contain
     * lowercase letters (a-z) and numbers (0-9).
     *
     * @return the generated unique identifier as a string. The returned string will not be null.
     */
    @NotNull String generateID();
}