package net.kissenpvp.core.ban.events.punishment;

import lombok.Setter;
import net.kissenpvp.core.api.ban.AbstractPunishment;
import net.kyori.adventure.text.Component;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Optional;

/**
 * The {@link PunishmentAlterCauseEvent} class extends the {@link PunishmentEvent} class, adding functionality for managing change events related to the cause of a punishment.
 * This class introduces new properties to represent the previous and the new cause of the punishment.
 * <p>
 * A {@link PunishmentAlterCauseEvent} is triggered when the cause of a punishment is changed.
 * This class encapsulates that action by keeping references to the punishment's previous cause and updated cause.
 * <p>
 * This class retains all the functionality of the {@link PunishmentEvent} class and extends it by providing access to the previous and updated causes of the punishment.
 * This class has a {@link Setter} annotation, indicating that setter methods are autogenerated by the Lombok library for the 'updatedCause' field.
 *
 * @param <P> The type of punishment managed by this event, this type extends {@link AbstractPunishment}
 *
 * @see PunishmentEvent
 * @see Component
 * @see Setter
 */
@Setter
public class PunishmentAlterCauseEvent<P extends AbstractPunishment<?>> extends PunishmentEvent<P> {

    private final Component previousCause;
    private Component updatedCause;

    /**
     * Constructs a new {@link PunishmentAlterCauseEvent} with the specified {@link AbstractPunishment}, previous cause and new cause.
     * This constructor initializes the PunishmentAlterCauseEvent by calling its superclass's constructor with the given punishment and
     * sets the 'previousCause' and 'updatedCause' properties to the given values.
     * <p>
     * This constructor should be used when the cause of a punishment is changed.
     *
     * @param punishment the punishment this event relates to, cannot be null.
     * @param previousCause the previous cause of the punishment, can be null.
     * @param updatedCause the new cause of the punishment, can be null.
     *
     * @see PunishmentAlterCauseEvent
     * @see AbstractPunishment
     * @see Component
     * @see NotNull
     * @see Nullable
     */
    public PunishmentAlterCauseEvent(@NotNull P punishment, @Nullable Component previousCause, @Nullable Component updatedCause) {
        super(punishment);
        this.previousCause = previousCause;
        this.updatedCause = updatedCause;
    }

    /**
     * Returns an {@link Optional} containing the previous cause of the punishment.
     * If the previousCause is null, the Optional will be empty.
     *
     * @return an Optional containing the previous cause of the punishment.
     *
     * @see Optional
     * @see Component
     * @see NotNull
     */
    public Optional<Component> getPreviousCause() {
        return Optional.ofNullable(previousCause);
    }

    /**
     * Returns an {@link Optional} containing the updated cause of the punishment.
     * If the updatedCause is null, the Optional will be empty.
     *
     * @return an Optional containing the updated cause of the punishment.
     *
     * @see Optional
     * @see Component
     * @see NotNull
     */
    public Optional<Component> getUpdatedCause() {
        return Optional.ofNullable(updatedCause);
    }
}
