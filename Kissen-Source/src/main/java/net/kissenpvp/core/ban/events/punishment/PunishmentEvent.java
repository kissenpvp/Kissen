package net.kissenpvp.core.ban.events.punishment;

import lombok.Getter;
import lombok.Setter;
import net.kissenpvp.core.api.ban.AbstractPunishment;
import net.kissenpvp.core.api.event.Cancellable;
import net.kissenpvp.core.api.event.EventClass;
import org.jetbrains.annotations.NotNull;

/**
 * The {@link PunishmentEvent} class defines the events that are triggered when a {@link AbstractPunishment} is enacted on a target.
 * It extends {@link EventClass} which specifies that this class defines an event occurrence in a system,
 * and implements {@link Cancellable} which specifies that this event can be cancelled.
 * <p>
 * The {@link PunishmentEvent} class is parameterized with a subclass of {@link AbstractPunishment}, which represents a specific type of punishment.
 * This class provides methods for getting and setting the punishment that the event is related to, as well as a method for cancelling the event.
 * <p>
 * This class encapsulates a punishment event and provides a way to interact with the event controller,
 * allowing other components of the system to cancel the event or manipulate the corresponding punishment object.
 * <p>
 * This class should be used in conjunction with the {@link AbstractPunishment} class, which represents a single punishment,
 * and the {@link EventClass} and {@link Cancellable} interfaces, which provide the necessary functionalities for defining and manipulating events.
 * <p>
 * This class has {@link Getter} and {@link Setter} annotations, indicating that getter and setter methods are autogenerated by the Lombok library.
 *
 * @param <P> The type of punishment managed by this event, this type extends {@link AbstractPunishment}
 *
 * @see EventClass
 * @see Cancellable
 * @see AbstractPunishment
 * @see Getter
 * @see Setter
 */
@Getter @Setter
public class PunishmentEvent<P extends AbstractPunishment<?>> implements EventClass, Cancellable {

    private boolean cancelled;
    private final P punishment;

    /**
     * Constructs a {@link PunishmentEvent} with the specified {@link AbstractPunishment} object.
     * This constructor initializes the punishment event with the given punishment and sets the event's cancelled status to false.
     * <p>
     * This constructor should be used to create a new punishment event. The created event can then be processed by the system or cancelled.
     *
     * @param punishment the {@link AbstractPunishment} this event relates to. This parameter must not be null, as indicated by the {@link NotNull} annotation.
     *
     * @see PunishmentEvent
     * @see AbstractPunishment
     * @see NotNull
     */
    public PunishmentEvent(@NotNull P punishment) {
        this.punishment = punishment;
        this.cancelled = false;
    }
}
