From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Mon, 11 Sep 2023 00:48:45 +0200
Subject: [PATCH] Integrated base and plugin system into paper


diff --git a/src/main/java/net/kissenpvp/paper/api/base/Context.java b/src/main/java/net/kissenpvp/paper/api/base/Context.java
new file mode 100644
index 0000000000000000000000000000000000000000..d679111da9e644b1767be837705e973a1c2666cf
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/base/Context.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.base;
+
+import java.io.Serializable;
+
+public enum Context implements Serializable
+{
+    LOCAL,
+    GLOBAL
+}
\ No newline at end of file
diff --git a/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java b/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java
new file mode 100644
index 0000000000000000000000000000000000000000..8f6f824aa92c7dd0c4bd28d2c8fef974eae2fc9a
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.base;
+
+import net.kissenpvp.core.api.base.Kissen;
+import net.kissenpvp.core.api.database.meta.ObjectMeta;
+import org.jetbrains.annotations.NotNull;
+
+public interface PaperKissen extends Kissen {
+
+    @NotNull ObjectMeta getPrivateMeta();
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index db46e3233edf18bd91a6da8612ccc9f0080d5c17..5804973691ad798dda67dac7f3ef3ceda66f2b11 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2878,4 +2878,17 @@ public final class Bukkit {
     public static Server.Spigot spigot() {
         return server.spigot();
     }
+
+    // KissenPaper start
+    private static net.kissenpvp.paper.api.base.PaperKissen kissen;
+    public static @org.jetbrains.annotations.NotNull net.kissenpvp.paper.api.base.PaperKissen getKissen() {
+        return kissen;
+    }
+    public static void setKissen(@NotNull net.kissenpvp.paper.api.base.PaperKissen kissen) {
+        if (Bukkit.kissen != null) {
+            throw new UnsupportedOperationException("Cannot redefine singleton Kissen");
+        }
+        Bukkit.kissen = kissen;
+    }
+    // KissenPaper end
 }
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index ef431219fd2bce48bad63b6b92c99d54348d480e..b753260bb333c8909ac2b251c17c4e92c45d7e00 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.Nullable;
  * <p>
  * The use of {@link PluginBase} is recommended for actual Implementation
  */
-public interface Plugin extends TabExecutor, io.papermc.paper.plugin.lifecycle.event.LifecycleEventOwner { // Paper
+public interface Plugin extends TabExecutor, io.papermc.paper.plugin.lifecycle.event.LifecycleEventOwner, net.kissenpvp.core.api.base.plugin.KissenPlugin { // Paper  // KissenPaper
     /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 03213fde8315384ec56c16031cfc606ade2e8091..88228a142f53199b048c5bd22ac23dd1b9e50426 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -317,4 +317,11 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
     @org.jetbrains.annotations.ApiStatus.Experimental
     void overridePermissionManager(@NotNull Plugin plugin, @Nullable io.papermc.paper.plugin.PermissionManager permissionManager);
     // Paper end
+
+    // KissenPaper start
+
+    void registerSetting(@NotNull net.kissenpvp.core.api.config.Option<?> setting, @NotNull Plugin plugin);
+
+    // KissenPaper end
+
 }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index fc2dae69165776d08274e34a69962cc70445f411..c8aa887326fde648b05158c19cbeb830d10a3420 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -978,4 +978,14 @@ public final class SimplePluginManager implements PluginManager {
         this.paperPluginManager.addPermissions(perm);
     }
     // Paper end
+
+    // KissenPaper start
+
+    @Override
+    public void registerSetting(@NotNull net.kissenpvp.core.api.config.Option<?> setting, @NotNull Plugin plugin)
+    {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.core.api.config.ConfigurationImplementation.class).registerSetting(plugin, setting);
+    }
+
+    // KissenPaper end
 }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 34037d3da2c536bac088e0ff629ee8f1daccc65b..350097c726eaf3e900ed4a073d43656cfaf0e95e 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -470,4 +470,11 @@ public abstract class JavaPlugin extends PluginBase {
         return this.lifecycleEventManager;
     }
     // Paper end - lifecycle events
+
+    // KissenPaper start
+    @Override
+    public @NotNull net.kissenpvp.core.api.base.Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+    // KissenPaper end
 }
diff --git a/src/test/java/org/bukkit/plugin/TestPlugin.java b/src/test/java/org/bukkit/plugin/TestPlugin.java
index affe88cf8e98a787e197936f5fc443464a2343c6..22c84be67677cafd38d4fc1d1ea7a4d97b162871 100644
--- a/src/test/java/org/bukkit/plugin/TestPlugin.java
+++ b/src/test/java/org/bukkit/plugin/TestPlugin.java
@@ -140,4 +140,11 @@ public class TestPlugin extends PluginBase {
         throw new UnsupportedOperationException("Not supported.");
     }
     // Paper end - lifecycle events
+
+    // KissenPaper start
+    @Override
+    public net.kissenpvp.core.api.base.@org.jetbrains.annotations.NotNull Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+    // KissenPaper end
 }
