From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Mon, 11 Sep 2023 00:48:45 +0200
Subject: [PATCH] Integrated base and plugin system into paper


diff --git a/src/main/java/net/kissenpvp/paper/api/base/Context.java b/src/main/java/net/kissenpvp/paper/api/base/Context.java
new file mode 100644
index 0000000000000000000000000000000000000000..d679111da9e644b1767be837705e973a1c2666cf
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/base/Context.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.base;
+
+import java.io.Serializable;
+
+public enum Context implements Serializable
+{
+    LOCAL,
+    GLOBAL
+}
\ No newline at end of file
diff --git a/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java b/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java
new file mode 100644
index 0000000000000000000000000000000000000000..8f6f824aa92c7dd0c4bd28d2c8fef974eae2fc9a
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.base;
+
+import net.kissenpvp.core.api.base.Kissen;
+import net.kissenpvp.core.api.database.meta.ObjectMeta;
+import org.jetbrains.annotations.NotNull;
+
+public interface PaperKissen extends Kissen {
+
+    @NotNull ObjectMeta getPrivateMeta();
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index f78b5fd3c3347d28da58777bff88903d2eb140f6..decde953f1ec5ff7d50fcb949309c5a657856884 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2756,4 +2756,17 @@ public final class Bukkit {
     public static Server.Spigot spigot() {
         return server.spigot();
     }
+
+    // KissenPaper start
+    private static net.kissenpvp.paper.api.base.PaperKissen kissen;
+    public static @org.jetbrains.annotations.NotNull net.kissenpvp.paper.api.base.PaperKissen getKissen() {
+        return kissen;
+    }
+    public static void setKissen(@NotNull net.kissenpvp.paper.api.base.PaperKissen kissen) {
+        if (Bukkit.kissen != null) {
+            throw new UnsupportedOperationException("Cannot redefine singleton Kissen");
+        }
+        Bukkit.kissen = kissen;
+    }
+    // KissenPaper end
 }
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index 4eb639fbb46a0848be207149ea433455550fae1c..5526f527d85e25070e6d3c335bc313fadceef753 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.Nullable;
  * <p>
  * The use of {@link PluginBase} is recommended for actual Implementation
  */
-public interface Plugin extends TabExecutor {
+public interface Plugin extends TabExecutor, net.kissenpvp.core.api.base.plugin.KissenPlugin { // KissenPaper
     /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 5cd236965de12392d8c7aa81307c0ff1cc8673b1..73a253f24ef83ec7b07f022c9f935c0c68fdacec 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -456,4 +456,16 @@ public abstract class JavaPlugin extends PluginBase {
         }
         return plugin;
     }
+
+    // KissenPaper start
+    @Override
+    public @NotNull net.kissenpvp.core.api.base.Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+
+    @Override
+    public void registerTranslation(@NotNull String key, @NotNull java.text.MessageFormat translationTemplate) {
+        getKissen().getImplementation(net.kissenpvp.core.api.message.localization.LocalizationImplementation.class).register(this, key, translationTemplate);
+    }
+    // KissenPaper end
 }
diff --git a/src/test/java/org/bukkit/plugin/TestPlugin.java b/src/test/java/org/bukkit/plugin/TestPlugin.java
index 43b58e920e739bb949ac0673e9ef73ba7b500dc9..6cda89b7c191c3cd3656a6ef58770d163dc4cb3b 100644
--- a/src/test/java/org/bukkit/plugin/TestPlugin.java
+++ b/src/test/java/org/bukkit/plugin/TestPlugin.java
@@ -133,4 +133,26 @@ public class TestPlugin extends PluginBase {
     public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
         throw new UnsupportedOperationException("Not supported.");
     }
+
+    // KissenPaper start
+    @Override
+    public @org.jetbrains.annotations.NotNull String getFullName() {
+        return getName();
+    }
+
+    @Override
+    public @org.jetbrains.annotations.NotNull String getPackage() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public net.kissenpvp.core.api.base.@org.jetbrains.annotations.NotNull Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+
+    @Override
+    public void registerTranslation(@org.jetbrains.annotations.NotNull String key, java.text.@org.jetbrains.annotations.NotNull MessageFormat defaultMessage) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+    // KissenPaper end
 }
