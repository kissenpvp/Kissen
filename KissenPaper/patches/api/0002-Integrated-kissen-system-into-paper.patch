From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Thu, 10 Aug 2023 02:14:35 +0200
Subject: [PATCH] Integrated kissen system into paper


diff --git a/src/main/java/net/kissenpvp/paper/api/ban/PaperBanImplementation.java b/src/main/java/net/kissenpvp/paper/api/ban/PaperBanImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..1b5fe5b8c553b5cec22d98ebe553060ff95e9d28
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/ban/PaperBanImplementation.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.ban;
+
+import net.kissenpvp.core.api.ban.Ban;
+import net.kissenpvp.core.api.ban.BanImplementation;
+import net.kissenpvp.core.api.ban.BanType;
+import net.kissenpvp.core.api.ban.PlayerBan;
+import net.kissenpvp.paper.api.base.Context;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Optional;
+import java.util.Set;
+import java.util.UUID;
+
+
+public interface PaperBanImplementation extends BanImplementation
+{
+    @NotNull @Unmodifiable Set<PlayerBan> getPlayerBanSet(@NotNull Context context);
+
+    @NotNull @Unmodifiable Set<PlayerBan> getPlayerBanSet(@NotNull UUID totalID, @NotNull Context context);
+
+    @NotNull Optional<@Nullable PlayerBan> getCurrentBan(@NotNull UUID totalID, Context context);
+
+    @NotNull Optional<@Nullable PlayerBan> getCurrentBan(@NotNull UUID totalID, @NotNull BanType banType, Context context);
+
+    @NotNull PlayerBan ban(@NotNull UUID totalID, @NotNull Ban ban, @NotNull String banner, @Nullable String reason, @NotNull Context context);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/base/Context.java b/src/main/java/net/kissenpvp/paper/api/base/Context.java
new file mode 100644
index 0000000000000000000000000000000000000000..fd25ec38c399a792511d3d8d06831eba9690b520
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/base/Context.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.base;
+
+import java.io.Serializable;
+
+public enum Context implements Serializable
+{
+    LOCAL,
+    GLOBAL
+}
\ No newline at end of file
diff --git a/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java b/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6f3c5ed05fc0011ce4618915948d5c0d6db0f02
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.base;
+
+import net.kissenpvp.core.api.base.Kissen;
+import net.kissenpvp.core.api.database.meta.ObjectMeta;
+
+public interface PaperKissen extends Kissen {
+
+    ObjectMeta getPrivateMeta();
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/command/KissenCommand.java b/src/main/java/net/kissenpvp/paper/api/command/KissenCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..d83ddd4770455443287a0c1abaf46c5e48b5be82
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/command/KissenCommand.java
@@ -0,0 +1,10 @@
+package net.kissenpvp.paper.api.command;
+
+import org.bukkit.command.Command;
+import org.jetbrains.annotations.NotNull;
+
+public abstract class KissenCommand extends Command {
+    protected KissenCommand(@NotNull String name) {
+        super(name);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/command/PaperCommandImplementation.java b/src/main/java/net/kissenpvp/paper/api/command/PaperCommandImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..42170ae0de1abc7769c0fbe0b25a882e91740326
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/command/PaperCommandImplementation.java
@@ -0,0 +1,22 @@
+package net.kissenpvp.paper.api.command;
+
+import net.kissenpvp.core.api.base.Implementation;
+import net.kissenpvp.core.api.command.executor.TabCompleterExecutor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+public interface PaperCommandImplementation extends Implementation {
+
+    @NotNull Optional<Command> getCommand(@NotNull String name);
+
+    void registerCommand(@NotNull Plugin plugin, @NotNull Object... objects);
+
+    void registerCompleter(@NotNull Plugin plugin, @NotNull String name, @NotNull TabCompleterExecutor<CommandSender> tabCompleterExecutor);
+
+    boolean unregisterCommand(@NotNull String name);
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/data/LocationNode.java b/src/main/java/net/kissenpvp/paper/api/data/LocationNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..3151ef92a8bfd02b55b49d78f6a0b77b4d441d7a
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/data/LocationNode.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.data;
+
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Objects;
+
+
+public record LocationNode(String world, double x, double y, double z, float pitch, float yaw)
+{
+
+    public LocationNode(@NotNull Location location)
+    {
+        this(Objects.requireNonNull(location.getWorld()).getName(), location.getX(), location.getY(), location.getZ(), location.getPitch(), location.getYaw());
+    }
+
+    @Contract(" -> new") public @NotNull Location toLocation()
+    {
+        return new Location(Bukkit.getWorld(world), x, y, z, yaw, pitch);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/inventory/ClickInventoryItemAction.java b/src/main/java/net/kissenpvp/paper/api/inventory/ClickInventoryItemAction.java
new file mode 100644
index 0000000000000000000000000000000000000000..a00e53427f1b8b58dbfde63abd7668257e51f3b1
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/inventory/ClickInventoryItemAction.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.inventory;
+
+import net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.jetbrains.annotations.NotNull;
+
+public interface ClickInventoryItemAction
+{
+    void clicked(@NotNull PaperPlayerClient who, @NotNull KissenInventory kissenInventory, @NotNull InventoryClickEvent inventoryClickEvent);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/inventory/KissenInventory.java b/src/main/java/net/kissenpvp/paper/api/inventory/KissenInventory.java
new file mode 100644
index 0000000000000000000000000000000000000000..5bdcbd590a7beb4982534a963c07e4ae4e9ae3da
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/inventory/KissenInventory.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.inventory;
+
+import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.UUID;
+
+public interface KissenInventory extends Inventory {
+    @NotNull UUID getInventoryID();
+
+    void setCancelAll(boolean cancelAll);
+
+    boolean isCancellingAll();
+
+    @Nullable KissenInventoryAction getInventoryAction();
+
+    void setInventoryAction(@Nullable KissenInventoryAction kissenInventoryAction);
+
+    @NotNull Inventory getParent();
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/inventory/KissenInventoryAction.java b/src/main/java/net/kissenpvp/paper/api/inventory/KissenInventoryAction.java
new file mode 100644
index 0000000000000000000000000000000000000000..2a9a064be74a493e090db2c2374efa80f003d036
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/inventory/KissenInventoryAction.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.inventory;
+
+import net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient;
+import org.bukkit.event.inventory.InventoryCloseEvent;
+import org.jetbrains.annotations.NotNull;
+
+public interface KissenInventoryAction {
+    void open(@NotNull PaperPlayerClient playerClient, @NotNull InventoryCloseEvent inventoryCloseEvent);
+
+    void close(@NotNull PaperPlayerClient playerClient, @NotNull InventoryCloseEvent inventoryCloseEvent);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/message/ChatEvent.java b/src/main/java/net/kissenpvp/paper/api/message/ChatEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..5df3832331144969d800fb48efc57c30a24a83cd
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/message/ChatEvent.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.message;
+
+import net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient;
+import net.kyori.adventure.text.Component;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+public class ChatEvent extends Event implements Cancellable
+{
+    private static final HandlerList HANDLERS = new HandlerList();
+    private final PaperPlayerClient sender;
+    private boolean cancelled;
+    private Component message;
+
+    public ChatEvent(@NotNull Component message, @NotNull PaperPlayerClient sender)
+    {
+        this.message   = message;
+        this.sender    = sender;
+        this.cancelled = false;
+    }
+
+    public static HandlerList getHandlerList()
+    {
+        return HANDLERS;
+    }
+
+    public PaperPlayerClient getSender()
+    {
+        return sender;
+    }
+
+    @Override public boolean isCancelled()
+    {
+        return cancelled;
+    }
+
+    @Override public void setCancelled(boolean cancel)
+    {
+        this.cancelled = cancel;
+    }
+
+    @Override public @NotNull HandlerList getHandlers()
+    {
+        return HANDLERS;
+    }
+
+    public @NotNull Component getMessage()
+    {
+        return message;
+    }
+
+    public void setMessage(@NotNull String message)
+    {
+        this.message = Component.text(message);
+    }
+
+    public void setMessage(@NotNull Component message)
+    {
+        this.message = message;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/networking/PaperNetworkImplementation.java b/src/main/java/net/kissenpvp/paper/api/networking/PaperNetworkImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..75b22f04d26e6207bf90a57c72f8df6f939f350e
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/networking/PaperNetworkImplementation.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.networking;
+
+import net.kissenpvp.core.api.networking.NetworkImplementation;
+import net.kissenpvp.core.api.networking.socket.DataPackage;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+
+public interface PaperNetworkImplementation extends NetworkImplementation
+{
+
+    boolean sendDataPackage(@NotNull DataPackage dataPackage);
+
+    @Nullable DataPackage sendAnsweredDataPackage(@NotNull DataPackage dataPackage);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperOnlinePlayerClient.java b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperOnlinePlayerClient.java
new file mode 100644
index 0000000000000000000000000000000000000000..029ad22e676c84e2ce3400a35e6326e0b57acdac
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperOnlinePlayerClient.java
@@ -0,0 +1,10 @@
+package net.kissenpvp.paper.api.networking.client.entity;
+
+import net.kissenpvp.core.api.ban.Ban;
+import net.kissenpvp.core.api.networking.client.entitiy.ServerEntity;
+import org.jetbrains.annotations.NotNull;
+
+public interface PaperOnlinePlayerClient {
+
+    int warn(@NotNull Ban ban, @NotNull ServerEntity warnOperator);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java
new file mode 100644
index 0000000000000000000000000000000000000000..f66ff9517130eb9b01b2ee104a498ebe49757989
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.networking.client.entity;
+
+import net.kissenpvp.core.api.ban.Ban;
+import net.kissenpvp.core.api.ban.PlayerBan;
+import net.kissenpvp.core.api.networking.client.entitiy.ServerEntity;
+import net.kissenpvp.core.api.user.User;
+import net.kissenpvp.core.api.user.suffix.Suffix;
+import net.kissenpvp.paper.api.base.Context;
+import net.kissenpvp.paper.api.permission.PaperPermissible;
+import net.kissenpvp.paper.api.permission.PermissibleOverriddenException;
+import net.kyori.adventure.text.Component;
+import org.bukkit.permissions.Permissible;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Optional;
+import java.util.Set;
+
+
+public interface PaperPlayerClient extends Permissible {
+
+    @NotNull @Unmodifiable Set<@NotNull PaperOnlinePlayerClient> getOnlineAltAccounts();
+
+    @NotNull Set<Suffix> getSuffixSet(@NotNull Context context);
+
+    @NotNull Optional<@Nullable Suffix> getSuffix(@NotNull String name, @NotNull Context context);
+
+    @NotNull
+    Optional<@Nullable Suffix> setSuffix(@NotNull String name, @NotNull Component content, Context context);
+
+    boolean deleteSuffix(@NotNull String name, @NotNull Context context);
+
+    void setSelectedSuffix(@NotNull String name, @NotNull Context context) throws NullPointerException;
+
+    long getOnlineTime(@NotNull Context context);
+
+    long getLastPlayed(@NotNull Context context);
+
+    @NotNull PlayerBan ban(@NotNull Ban ban, @NotNull ServerEntity banOperator, @NotNull Context context);
+
+    @NotNull PlayerBan ban(@NotNull Ban ban, @NotNull ServerEntity banOperator, @Nullable Component reason, @NotNull Context context);
+
+    @NotNull User getUser(@NotNull Context context);
+
+    @NotNull PaperPermissible getPermissible() throws PermissibleOverriddenException;
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/nms/NMS.java b/src/main/java/net/kissenpvp/paper/api/nms/NMS.java
new file mode 100644
index 0000000000000000000000000000000000000000..b772f97646bb24146f4aa0a67ae3da852d8bfd27
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/nms/NMS.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.nms;
+
+import net.kissenpvp.core.api.base.Implementation;
+import net.kissenpvp.core.api.reflection.ReflectionClass;
+
+
+public interface NMS extends Implementation
+{
+
+    String getVersion();
+
+    ReflectionClass getNMSClass(String clazz);
+
+    ReflectionClass getBukkitClass(String clazz);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperGroubablePermissionEntry.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperGroubablePermissionEntry.java
new file mode 100644
index 0000000000000000000000000000000000000000..6fe4afaf16ec3d4ea37ea2fc794ad92b048e615d
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperGroubablePermissionEntry.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.GroupablePermissionEntry;
+import net.kissenpvp.core.api.permission.PermissionGroup;
+import net.kissenpvp.paper.api.base.Context;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Set;
+
+public interface PaperGroubablePermissionEntry extends GroupablePermissionEntry<PaperPermission>, PaperPermissionEntry {
+    @NotNull @Unmodifiable Set<PaperPermission> getOwnPermissions(@NotNull Context context);
+
+    @NotNull @Unmodifiable Set<PermissionGroup<PaperPermission>> getPermissionGroups(@NotNull Context context);
+
+    boolean inGroup(@NotNull PermissionGroup<PaperPermission> permissionGroup, @NotNull Context context);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissible.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissible.java
new file mode 100644
index 0000000000000000000000000000000000000000..21037d40a25d1fe8416442dbbb7c2ca42846cece
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissible.java
@@ -0,0 +1,6 @@
+package net.kissenpvp.paper.api.permission;
+
+import org.bukkit.permissions.Permissible;
+
+public interface PaperPermissible extends Permissible, PaperPermissionEntry {
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPermission.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermission.java
new file mode 100644
index 0000000000000000000000000000000000000000..01d96e8de2758a3ea001115e58c2a0e1fef5d655
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermission.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.Permission;
+
+public interface PaperPermission extends Permission {
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionEntry.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionEntry.java
new file mode 100644
index 0000000000000000000000000000000000000000..3aad2f9711323caa9953cd1157de529ed05cb6aa
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionEntry.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.event.EventCancelledException;
+import net.kissenpvp.core.api.permission.PermissionEntry;
+import net.kissenpvp.paper.api.base.Context;
+import org.bukkit.permissions.Permissible;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Optional;
+import java.util.Set;
+
+public interface PaperPermissionEntry extends PermissionEntry<PaperPermission>, Permissible {
+    @NotNull PaperPermission setPermission(@NotNull String permission, @NotNull Context context) throws EventCancelledException;
+
+    @NotNull PaperPermission setPermission(@NotNull String permission, boolean value, @NotNull Context context) throws EventCancelledException;
+
+    @NotNull PaperPermission setPermission(@NotNull PaperPermission permission, @NotNull Context context) throws EventCancelledException;
+
+    boolean unsetPermission(@NotNull String permission, @NotNull Context context);
+
+    @NotNull @Unmodifiable Set<PaperPermission> getPermissionList(@NotNull Context context);
+
+    @NotNull Optional<@Nullable PaperPermission> getPermission(@NotNull String permission, @NotNull Context context);
+
+    boolean hasPermission(@NotNull String permission, @NotNull Context context);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionGroup.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..9a2e2f731c2bad33aa57f901292c4024a5e1e262
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionGroup.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.GroupablePermissionEntry;
+import net.kissenpvp.core.api.permission.PermissionGroup;
+import net.kissenpvp.paper.api.base.Context;
+import org.jetbrains.annotations.NotNull;
+
+public interface PaperPermissionGroup extends PermissionGroup<PaperPermission>, PaperGroubablePermissionEntry {
+    boolean addMember(@NotNull GroupablePermissionEntry<?> groupablePermissionEntry, @NotNull Context context);
+
+    boolean removeMember(@NotNull GroupablePermissionEntry<?> groupablePermissionEntry, @NotNull Context context);
+
+    @NotNull PermissionGroup<PaperPermission> getCoreGroup(@NotNull Context context);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionImplementation.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..0ec0c98d44dd6546b79d1164b96eda86d616b1ae
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionImplementation.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.base.Implementation;
+import net.kissenpvp.core.api.database.meta.BackendException;
+import net.kissenpvp.core.api.event.EventCancelledException;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Map;
+import java.util.Set;
+
+public interface PaperPermissionImplementation extends Implementation {
+
+    @NotNull @Unmodifiable Set<PaperPermissionGroup> getPermissionGroupSet();
+
+    @NotNull @Unmodifiable Set<PaperPrivatePermissionGroup> getPrivatePermissionGroupSet();
+
+    @Nullable PaperPermissionGroup getPermissionGroup(@NotNull String group);
+
+    @Nullable PaperPrivatePermissionGroup getPrivatePermissionGroup(@NotNull String group);
+
+    @NotNull PaperPrivatePermissionGroup getPrivatePermissionGroupNotNull(@NotNull String group) throws EventCancelledException, BackendException;
+
+    @NotNull PaperPermissionGroup getPermissionGroupNotNull(@NotNull String group) throws EventCancelledException;
+
+    @NotNull PaperPermissionGroup createPermissionGroup(@NotNull String group, @Nullable Map<String, String> data) throws EventCancelledException;
+
+    @NotNull PaperPrivatePermissionGroup createPrivatePermissionGroup(@NotNull String group, @Nullable Map<String, String> data) throws EventCancelledException, BackendException;
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPrivatePermissionGroup.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPrivatePermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..2225a50ff014d2da82596bb29711e323de84ae4b
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPrivatePermissionGroup.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.PermissionGroup;
+import org.jetbrains.annotations.Nullable;
+
+public interface PaperPrivatePermissionGroup extends PermissionGroup<PaperPermission>
+{
+    @Nullable PaperPermissionGroup getPublicGroup();
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPublicPermissionGroup.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPublicPermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..99988ad7489ddf55161b3e5f59f9ff5f4d90dec5
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPublicPermissionGroup.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.PermissionGroup;
+import org.jetbrains.annotations.NotNull;
+
+public interface PaperPublicPermissionGroup extends PermissionGroup<PaperPermission>
+{
+    @NotNull PaperPrivatePermissionGroup getPrivatePermissionGroup();
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PermissibleOverriddenException.java b/src/main/java/net/kissenpvp/paper/api/permission/PermissibleOverriddenException.java
new file mode 100644
index 0000000000000000000000000000000000000000..265ef85eb4790e2b07af4d288aae72e21001c2f2
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PermissibleOverriddenException.java
@@ -0,0 +1,4 @@
+package net.kissenpvp.paper.api.permission;
+
+public class PermissibleOverriddenException extends IllegalStateException {
+} // LuckPerms, I know where you live
diff --git a/src/main/java/net/kissenpvp/paper/api/user/rank/PaperPlayerRank.java b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperPlayerRank.java
new file mode 100644
index 0000000000000000000000000000000000000000..554fb4e973ed44e3948afb475532cf8beb0e27e5
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperPlayerRank.java
@@ -0,0 +1,21 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.PlayerRank;
+
+public interface PaperPlayerRank extends PlayerRank<PaperRank> { }
diff --git a/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRank.java b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRank.java
new file mode 100644
index 0000000000000000000000000000000000000000..318a84d9904bd2ca605446522cd3c77ee52db996
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRank.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.Rank;
+import net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Set;
+
+public interface PaperRank extends Rank
+{
+
+    @NotNull @Unmodifiable Set<PaperPlayerClient> getPlayers();
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRankImplementation.java b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRankImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..5c1ae2a373acb5ef3605c0de8af86e8f7291e9e0
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRankImplementation.java
@@ -0,0 +1,21 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.RankImplementation;
+
+public interface PaperRankImplementation extends RankImplementation<PaperRank> { }
diff --git a/src/main/java/net/kissenpvp/paper/api/visual/TabListImplementation.java b/src/main/java/net/kissenpvp/paper/api/visual/TabListImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..cc56cc652c5c42ceaddee2af5ebb0a547bc805df
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/visual/TabListImplementation.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright 2023 KissenPvP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.kissenpvp.paper.api.visual;
+
+import net.kissenpvp.core.api.base.Implementation;
+
+
+public interface TabListImplementation extends Implementation
+{
+    void update();
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index f380a518bc444bfdfbbedf38805c7684e53a5629..7674d3354b74823845668e02d4b50bcc87a512cd 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -14,6 +14,8 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
+
+import net.kissenpvp.paper.api.base.PaperKissen;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -64,11 +66,29 @@ import io.papermc.paper.util.JarManifests; // Paper
 public final class Bukkit {
     private static Server server;
 
+    // KissenPaper start
+    private static PaperKissen kissen;
+    // KissenPaper end
+
     /**
      * Static class cannot be initialized.
      */
     private Bukkit() {}
 
+    // KissenPaper start
+    public static PaperKissen getKissen() {
+        return kissen;
+    }
+
+    public static void setKissen(@NotNull PaperKissen kissen) {
+        if (Bukkit.kissen != null) {
+            throw new UnsupportedOperationException("Cannot redefine singleton Kissen");
+        }
+
+        Bukkit.kissen = kissen;
+    }
+    // KissenPaper end
+
     /**
      * Gets the current {@link Server} singleton
      *
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index 9b84cb5abdf3db55cbc7ba19c8cd6955bf4fc5ec..23e38ba9b6ca03e83a254f0ec767eb923aa81c9c 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -4,6 +4,10 @@ import java.time.Duration;
 import java.time.Instant;
 import java.util.Date;
 import java.util.UUID;
+
+import net.kissenpvp.core.api.networking.client.entitiy.PlayerClient;
+import net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient;
+import net.kissenpvp.paper.api.user.rank.PaperPlayerRank;
 import org.bukkit.ban.ProfileBanList;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.entity.AnimalTamer;
@@ -19,7 +23,7 @@ import org.jetbrains.annotations.Nullable;
  * player that is stored on the disk and can, thus, be retrieved without the
  * player needing to be online.
  */
-public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable {
+public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable, /* KissenPaper */ PaperPlayerClient, PlayerClient<PaperPlayerRank> {
 
     /**
      * Checks if this player is currently online
diff --git a/src/main/java/org/bukkit/command/ConsoleCommandSender.java b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
index f309c2ed39bcc700e5b491ff549bf0608a07aab8..b8a69f7e42d06ec08b1f647f8705c304949329ca 100644
--- a/src/main/java/org/bukkit/command/ConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
@@ -1,6 +1,7 @@
 package org.bukkit.command;
 
+import net.kissenpvp.core.api.networking.client.entitiy.ConsoleClient;
 import org.bukkit.conversations.Conversable;
 
-public interface ConsoleCommandSender extends CommandSender, Conversable {
+public interface ConsoleCommandSender extends CommandSender, Conversable, /* KissenPaper */ ConsoleClient {
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 14c92390aeaeee518f43778ccd5fc820fdc62689..3eef4a40afc672cafecaa052a107706cb73f8862 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -7,6 +7,12 @@ import java.time.Instant;
 import java.util.Collection;
 import java.util.Date;
 import java.util.Map;
+
+import net.kissenpvp.core.api.networking.client.entitiy.MessageReceiver;
+import net.kissenpvp.core.api.networking.client.entitiy.PlayerClient;
+import net.kissenpvp.paper.api.networking.client.entity.PaperOnlinePlayerClient;
+import net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient;
+import net.kissenpvp.paper.api.user.rank.PaperPlayerRank;
 import org.bukkit.BanEntry;
 import org.bukkit.DyeColor;
 import org.bukkit.Effect;
@@ -51,7 +57,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents a player, connected or not
  */
-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient { // Paper
+public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient, /* KissenPaper */ PaperOnlinePlayerClient, PaperPlayerClient, PlayerClient<PaperPlayerRank>, MessageReceiver { // Paper
 
     // Paper start
     @Override
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index 4eb639fbb46a0848be207149ea433455550fae1c..cc4abfdda357531eb5434466914311fe10c45c3c 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -3,6 +3,8 @@ package org.bukkit.plugin;
 import java.io.File;
 import java.io.InputStream;
 import java.util.logging.Logger;
+
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
 import org.bukkit.Server;
 import org.bukkit.command.TabExecutor;
 import org.bukkit.configuration.file.FileConfiguration;
@@ -16,7 +18,7 @@ import org.jetbrains.annotations.Nullable;
  * <p>
  * The use of {@link PluginBase} is recommended for actual Implementation
  */
-public interface Plugin extends TabExecutor {
+public interface Plugin extends TabExecutor, /* KissenPaper */ KissenPlugin {
     /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 5cd236965de12392d8c7aa81307c0ff1cc8673b1..ace3b03163de85920dcbd4219df75807ca6eff3b 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -11,9 +11,14 @@ import java.io.OutputStream;
 import java.io.Reader;
 import java.net.URL;
 import java.net.URLConnection;
+import java.text.MessageFormat;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
+import net.kissenpvp.core.api.base.Kissen;
+import net.kissenpvp.core.api.message.localization.LocalizationImplementation;
+import org.bukkit.Bukkit;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -79,6 +84,18 @@ public abstract class JavaPlugin extends PluginBase {
         return dataFolder;
     }
 
+    // KissenPaper start
+    @Override
+    public @NotNull Kissen getKissen() {
+        return Bukkit.getKissen();
+    }
+
+    @Override
+    public void registerTranslation(@NotNull String s, @NotNull MessageFormat s1) {
+        getKissen().getImplementation(LocalizationImplementation.class).register(this, s, s1);
+    }
+    // KissenPaper end
+
     /**
      * Gets the associated PluginLoader responsible for this plugin
      *
@@ -348,6 +365,18 @@ public abstract class JavaPlugin extends PluginBase {
         }
     }
 
+    // KissenPaper start
+    @Override
+    public @NotNull String getFullName() {
+        return description.getFullName();
+    }
+
+    @Override
+    public @NotNull String getPackage() {
+        return "";
+    }
+    // KissenPaper end
+
     @Override
     public void onLoad() {}
 
diff --git a/src/test/java/org/bukkit/plugin/TestPlugin.java b/src/test/java/org/bukkit/plugin/TestPlugin.java
index 43b58e920e739bb949ac0673e9ef73ba7b500dc9..27cc513e681b6233aba62c5c45f434f29f726e57 100644
--- a/src/test/java/org/bukkit/plugin/TestPlugin.java
+++ b/src/test/java/org/bukkit/plugin/TestPlugin.java
@@ -2,13 +2,18 @@ package org.bukkit.plugin;
 
 import java.io.File;
 import java.io.InputStream;
+import java.text.MessageFormat;
 import java.util.List;
+
+import net.kissenpvp.core.api.base.Kissen;
+import org.bukkit.Bukkit;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
+import org.jetbrains.annotations.NotNull;
 
 public class TestPlugin extends PluginBase {
     private boolean enabled = true;
@@ -28,10 +33,23 @@ public class TestPlugin extends PluginBase {
         throw new UnsupportedOperationException("Not supported.");
     }
 
+    // KissenPaper start
+    @Override
+    public @NotNull Kissen getKissen() {
+        return Bukkit.getKissen();
+    }
+
+    @Override
+    public void registerTranslation(@NotNull String s, @NotNull MessageFormat messageFormat) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+    // KissenPaper end
+
     @Override
     public PluginDescriptionFile getDescription() {
         return new PluginDescriptionFile(pluginName, "1.0", "test.test");
     }
+
     // Paper start
     @Override
     public io.papermc.paper.plugin.configuration.PluginMeta getPluginMeta() {
@@ -94,6 +112,18 @@ public class TestPlugin extends PluginBase {
         throw new UnsupportedOperationException("Not supported.");
     }
 
+    // KissenPaper start
+    @Override
+    public @NotNull String getFullName() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public @NotNull String getPackage() {
+        return "net.kissenpvp";
+    }
+    // KissenPaper end
+
     @Override
     public void onLoad() {
         throw new UnsupportedOperationException("Not supported.");
