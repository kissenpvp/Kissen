From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Mon, 11 Sep 2023 01:08:59 +0200
Subject: [PATCH] Integrated player system from kissen into paper


diff --git a/src/main/java/net/kissenpvp/paper/api/ban/PaperBan.java b/src/main/java/net/kissenpvp/paper/api/ban/PaperBan.java
new file mode 100644
index 0000000000000000000000000000000000000000..3665cb5da0501f7cda075a633bab7cadf2dda10d
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/ban/PaperBan.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.ban;
+
+import net.kissenpvp.core.api.ban.Ban;
+
+/**
+ * Interface for a Paper-specific ban.
+ * <p>
+ * This interface extends the {@link Ban} and doesn't introduce any new methods; it merely represents a
+ * specialized version of a ban within the context of the Paper API.
+ * <p>
+ * All methods inherited from {@link Ban} maintain their original functionality in the Paper API context.
+ *
+ * @see Ban
+ */
+public interface PaperBan extends Ban {}
diff --git a/src/main/java/net/kissenpvp/paper/api/ban/PaperBanImplementation.java b/src/main/java/net/kissenpvp/paper/api/ban/PaperBanImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..0e31335d4cf1324119f8e4b6175f445bcbfd7259
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/ban/PaperBanImplementation.java
@@ -0,0 +1,107 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.ban;
+
+import net.kissenpvp.core.api.ban.*;
+import net.kissenpvp.core.api.database.meta.BackendException;
+import net.kissenpvp.paper.api.base.Context;
+import net.kyori.adventure.text.Component;
+import org.bukkit.ban.ProfileBanList;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Optional;
+import java.util.Set;
+import java.util.UUID;
+
+/**
+ * Interface for Paper-specific ban implementation.
+ * <p>
+ * This interface extends the {@link BanImplementation} and specializes the type for {@link PaperBan} and {@link PaperPunishment}.
+ * This interface further defines methods to get punishment details within a Paper context.
+ *
+ * @see BanImplementation
+ * @see PaperBan
+ * @see PaperPunishment
+ */
+public interface PaperBanImplementation extends BanImplementation<PaperBan, PaperPunishment>, ProfileBanList
+{
+    /**
+     * Returns an unmodifiable set of all punishments applied in the specified context.
+     *
+     * @param context The context from which to retrieve punishments.
+     * @return An unmodifiable set containing all punishments in the context.
+     * @throws BackendException if an error occurs when retrieving the punishment data.
+     */
+    @NotNull @Unmodifiable Set<PaperPunishment> getPunishmentSet(@NotNull Context context) throws BackendException;
+
+    /**
+     * Returns an unmodifiable set of all punishments applied to the player with the given UUID within the specified context.
+     *
+     * @param totalID The UUID of the player for whom to retrieve the punishment data.
+     * @param context The context from which to retrieve punishments.
+     * @return An unmodifiable set containing all punishments for the player in the context.
+     * @throws BackendException if an error occurs when retrieving the punishment data.
+     */
+    @NotNull @Unmodifiable Set<PaperPunishment> getPunishmentSet(@NotNull UUID totalID, @NotNull Context context) throws BackendException;
+
+    /**
+     * Returns the most recent punishment applied to the player with the given UUID within the specified context, if such a punishment exists.
+     *
+     * @param totalID The UUID of the player for whom to retrieve the latest punishment.
+     * @param context The context from which to retrieve the punishment.
+     * @return An Optional containing the latest punishment if it exists, or Optional.empty() otherwise.
+     * @throws BackendException if an error occurs when retrieving the punishment data.
+     */
+    @NotNull Optional<PaperPunishment> getLatestPunishment(@NotNull UUID totalID, @NotNull Context context) throws BackendException;
+
+    /**
+     * Returns the most recent punishment of the specified type applied to the player with the given UUID within the specified context, if such a punishment exists.
+     *
+     * @param totalID The UUID of the player for whom to retrieve the latest punishment.
+     * @param banType The type of ban to search for.
+     * @param context The context from which to retrieve the punishment.
+     * @return An Optional containing the latest punishment of the required type if it exists, or Optional.empty() otherwise.
+     * @throws BackendException if an error occurs when retrieving the punishment data.
+     */
+    @NotNull Optional<PaperPunishment> getLatestPunishment(@NotNull UUID totalID, @NotNull BanType banType, @NotNull Context context) throws BackendException;
+
+    /**
+     * Applies a punishment to the player with the specified UUID.
+     * <p>
+     * This method creates and returns a new instance of {@link PaperPunishment} on the specified player,
+     * based on the given parameters. The new punishment is persistently stored in the backend.
+     *
+     * @param totalID The UUID of the player to be punished.
+     * @param ban The {@link PaperBan} instance representing the specifications of the punishment.
+     * @param banOperator The operator who is applying the punishment.
+     * @param reason The reason for the punishment. This can be null.
+     * @param context The context in which the punishment is being applied.
+     * @return The created {@link PaperPunishment} instance.
+     * @throws BackendException if an error occurs when trying to create or persist the punishment in the backend.
+     */
+    @NotNull PaperPunishment punish(@NotNull UUID totalID, @NotNull PaperBan ban, @NotNull BanOperator banOperator, @Nullable Component reason, @NotNull Context context) throws BackendException;
+
+    @NotNull PaperPunishment punish(@NotNull UUID totalID, @NotNull PaperBan ban, @NotNull BanOperator banOperator, @NotNull Context context) throws BackendException;
+
+    @NotNull PaperPunishment punish(@NotNull UUID totalID, @NotNull PaperBan ban, @NotNull BanOperator banOperator, boolean apply, @NotNull Context context) throws BackendException;
+
+    @NotNull PaperPunishment punish(@NotNull UUID totalID, @NotNull PaperBan ban, @NotNull BanOperator banOperator, boolean apply, @Nullable Component reason, @NotNull Context context) throws BackendException;
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/ban/PaperPunishment.java b/src/main/java/net/kissenpvp/paper/api/ban/PaperPunishment.java
new file mode 100644
index 0000000000000000000000000000000000000000..c59ee172bafb18359c227145de4e7f311f51aabb
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/ban/PaperPunishment.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.ban;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import net.kissenpvp.core.api.ban.Punishment;
+import org.bukkit.BanEntry;
+import org.bukkit.entity.Player;
+
+/**
+ * Represents a punishment applied to a Player within Paper-specific context.
+ * <p>
+ * This interface is an extension of the {@link Punishment} interface specific to Player instances.
+ * It defines the contract for any kind of punishment that can be applied to a Player in the game
+ * or application built on the Paper platform.
+ * <p>
+ * The specific methods of punishment and their behaviour on a Player are defined in the classes that
+ * implement this interface, in accordance with the specifications of the {@link Punishment} interface.
+ *
+ * @see Punishment
+ */
+public interface PaperPunishment extends Punishment<Player>, BanEntry<PlayerProfile> {}
diff --git a/src/main/java/net/kissenpvp/paper/api/networking/PaperNetworkImplementation.java b/src/main/java/net/kissenpvp/paper/api/networking/PaperNetworkImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..ce61bd83bfcfb2dc09764f89b9bd1d1f48728e02
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/networking/PaperNetworkImplementation.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.networking;
+
+import net.kissenpvp.core.api.networking.NetworkImplementation;
+import net.kissenpvp.core.api.networking.socket.DataPackage;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+
+public interface PaperNetworkImplementation extends NetworkImplementation
+{
+
+    boolean sendDataPackage(@NotNull DataPackage dataPackage);
+
+    @Nullable DataPackage sendAnsweredDataPackage(@NotNull DataPackage dataPackage);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperOnlinePlayerClient.java b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperOnlinePlayerClient.java
new file mode 100644
index 0000000000000000000000000000000000000000..50ef7670a47c36d23990644ecb7e9eb8ea1390eb
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperOnlinePlayerClient.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.networking.client.entity;
+
+import net.kissenpvp.core.api.ban.Ban;
+import net.kissenpvp.core.api.networking.client.entitiy.OnlinePlayerClient;
+import net.kissenpvp.core.api.networking.client.entitiy.ServerEntity;
+import net.kissenpvp.paper.api.ban.PaperPunishment;
+import net.kissenpvp.paper.api.permission.PaperPermission;
+import net.kissenpvp.paper.api.user.rank.PaperPlayerRank;
+import net.kyori.adventure.text.Component;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public interface PaperOnlinePlayerClient extends OnlinePlayerClient<PaperPermission, PaperPlayerRank, PaperPunishment> {
+
+    int warn(@NotNull Ban ban, @NotNull ServerEntity warnOperator);
+
+    int warn(@NotNull Ban ban, @NotNull ServerEntity warnOperator, @Nullable Component reason);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java
new file mode 100644
index 0000000000000000000000000000000000000000..da7846f5c260fd8727a1b5db10f1a0a6d277e460
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.networking.client.entity;
+
+import net.kissenpvp.core.api.networking.client.entitiy.PlayerClient;
+import net.kissenpvp.core.api.user.User;
+import net.kissenpvp.core.api.user.suffix.Suffix;
+import net.kissenpvp.paper.api.ban.PaperPunishment;
+import net.kissenpvp.paper.api.base.Context;
+import net.kissenpvp.paper.api.permission.PaperGroubablePermissionEntry;
+import net.kissenpvp.paper.api.permission.PaperPermissible;
+import net.kissenpvp.paper.api.permission.PaperPermission;
+import net.kissenpvp.paper.api.permission.PermissibleOverriddenException;
+import net.kissenpvp.paper.api.user.rank.PaperPlayerRank;
+import net.kyori.adventure.text.Component;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Optional;
+import java.util.Set;
+
+
+public interface PaperPlayerClient extends PlayerClient<PaperPermission, PaperPlayerRank, PaperPunishment>, PaperGroubablePermissionEntry {
+
+    @NotNull @Unmodifiable Set<@NotNull PaperOnlinePlayerClient> getOnlineAltAccounts();
+
+    @NotNull Set<Suffix> getSuffixSet(@NotNull Context context);
+
+    @NotNull Optional<Suffix> getSuffix(@NotNull String name, @NotNull Context context);
+
+    @NotNull
+    Optional<Suffix> setSuffix(@NotNull String name, @NotNull Component content, @NotNull Context context);
+
+    boolean deleteSuffix(@NotNull String name, @NotNull Context context);
+
+    void setSelectedSuffix(@NotNull String name, @NotNull Context context) throws NullPointerException;
+
+    long getOnlineTime(@NotNull Context context);
+
+    long getLastPlayed(@NotNull Context context);
+
+    @NotNull User getUser(@NotNull Context context);
+
+    @NotNull PaperPermissible getPermissible() throws PermissibleOverriddenException;
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperGroubablePermissionEntry.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperGroubablePermissionEntry.java
new file mode 100644
index 0000000000000000000000000000000000000000..f7ceb27777d42d0e20d6719d7feea1149697a2fc
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperGroubablePermissionEntry.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.GroupablePermissionEntry;
+import net.kissenpvp.core.api.permission.PermissionGroup;
+import net.kissenpvp.paper.api.base.Context;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Set;
+
+public interface PaperGroubablePermissionEntry extends GroupablePermissionEntry<PaperPermission>, PaperPermissionEntry {
+    @NotNull @Unmodifiable Set<PaperPermission> getOwnPermissions(@NotNull Context context);
+
+    @NotNull @Unmodifiable Set<PermissionGroup<PaperPermission>> getPermissionGroups(@NotNull Context context);
+
+    boolean inGroup(@NotNull PermissionGroup<PaperPermission> permissionGroup, @NotNull Context context);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissible.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissible.java
new file mode 100644
index 0000000000000000000000000000000000000000..d1db0375dac28fa48732ece20f30898d44296957
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissible.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import org.bukkit.permissions.Permissible;
+
+public interface PaperPermissible extends Permissible, PaperPermissionEntry {
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPermission.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermission.java
new file mode 100644
index 0000000000000000000000000000000000000000..0d6bdc0f1ad62680bb90f497772944a044ba4f63
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermission.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.Permission;
+
+public interface PaperPermission extends Permission {
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionEntry.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionEntry.java
new file mode 100644
index 0000000000000000000000000000000000000000..2ac394b60d4cccb4c59b2c5625e537090b50615b
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionEntry.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.event.EventCancelledException;
+import net.kissenpvp.core.api.permission.PermissionEntry;
+import net.kissenpvp.paper.api.base.Context;
+import org.bukkit.permissions.Permissible;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Optional;
+import java.util.Set;
+
+public interface PaperPermissionEntry extends PermissionEntry<PaperPermission>, Permissible {
+    @NotNull PaperPermission setPermission(@NotNull String permission, @NotNull Context context) throws EventCancelledException;
+
+    @NotNull PaperPermission setPermission(@NotNull String permission, boolean value, @NotNull Context context) throws EventCancelledException;
+
+    @NotNull PaperPermission setPermission(@NotNull PaperPermission permission, @NotNull Context context) throws EventCancelledException;
+
+    boolean unsetPermission(@NotNull String permission, @NotNull Context context);
+
+    @NotNull @Unmodifiable Set<PaperPermission> getPermissionList(@NotNull Context context);
+
+    @NotNull Optional<PaperPermission> getPermission(@NotNull String permission, @NotNull Context context);
+
+    boolean hasPermission(@NotNull String permission, @NotNull Context context);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionGroup.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..7d8b9283503b5d9b249c1dff17b74051ed2e0317
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionGroup.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.GroupablePermissionEntry;
+import net.kissenpvp.core.api.permission.PermissionGroup;
+import net.kissenpvp.paper.api.base.Context;
+import org.jetbrains.annotations.NotNull;
+
+public interface PaperPermissionGroup extends PermissionGroup<PaperPermission>, PaperGroubablePermissionEntry {
+    boolean addMember(@NotNull GroupablePermissionEntry<?> groupablePermissionEntry, @NotNull Context context);
+
+    boolean removeMember(@NotNull GroupablePermissionEntry<?> groupablePermissionEntry, @NotNull Context context);
+
+    @NotNull PermissionGroup<PaperPermission> getCoreGroup(@NotNull Context context);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionImplementation.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..f4f043f0c52102c29e24ded8243a82817879181d
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissionImplementation.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.base.Implementation;
+import net.kissenpvp.core.api.database.meta.BackendException;
+import net.kissenpvp.core.api.event.EventCancelledException;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Map;
+import java.util.Set;
+
+public interface PaperPermissionImplementation extends Implementation {
+
+    @NotNull @Unmodifiable Set<PaperPermissionGroup> getPermissionGroupSet();
+
+    @NotNull @Unmodifiable Set<PaperPrivatePermissionGroup> getPrivatePermissionGroupSet();
+
+    @Nullable PaperPermissionGroup getPermissionGroup(@NotNull String group);
+
+    @Nullable PaperPrivatePermissionGroup getPrivatePermissionGroup(@NotNull String group);
+
+    @NotNull PaperPrivatePermissionGroup getPrivatePermissionGroupNotNull(@NotNull String group) throws EventCancelledException, BackendException;
+
+    @NotNull PaperPermissionGroup getPermissionGroupNotNull(@NotNull String group) throws EventCancelledException;
+
+    @NotNull PaperPermissionGroup createPermissionGroup(@NotNull String group, @Nullable Map<String, String> data) throws EventCancelledException;
+
+    @NotNull PaperPrivatePermissionGroup createPrivatePermissionGroup(@NotNull String group, @Nullable Map<String, String> data) throws EventCancelledException, BackendException;
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPrivatePermissionGroup.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPrivatePermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..44b1f87bd2ad41f846eb4e5ef7a0e4f4142c0d2b
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPrivatePermissionGroup.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.PermissionGroup;
+import org.jetbrains.annotations.Nullable;
+
+public interface PaperPrivatePermissionGroup extends PermissionGroup<PaperPermission>
+{
+    @Nullable PaperPermissionGroup getPublicGroup();
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPublicPermissionGroup.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPublicPermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..352079c0eedf0513bfcbd8b0a61ec0a4c8eacc72
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPublicPermissionGroup.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.PermissionGroup;
+import org.jetbrains.annotations.NotNull;
+
+public interface PaperPublicPermissionGroup extends PermissionGroup<PaperPermission>
+{
+    @NotNull PaperPrivatePermissionGroup getPrivatePermissionGroup();
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PermissibleOverriddenException.java b/src/main/java/net/kissenpvp/paper/api/permission/PermissibleOverriddenException.java
new file mode 100644
index 0000000000000000000000000000000000000000..f4003d7ada0ed5573ad4d3d6e0b25aec243ae805
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PermissibleOverriddenException.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+public class PermissibleOverriddenException extends IllegalStateException {
+} // LuckPerms, I know where you live
diff --git a/src/main/java/net/kissenpvp/paper/api/user/rank/PaperPlayerRank.java b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperPlayerRank.java
new file mode 100644
index 0000000000000000000000000000000000000000..ba0970a4eba9afafe7919fbb0318777590f70e67
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperPlayerRank.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.PlayerRank;
+
+public interface PaperPlayerRank extends PlayerRank<PaperRank> { }
diff --git a/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRank.java b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRank.java
new file mode 100644
index 0000000000000000000000000000000000000000..b01bdcd42f31cde098b841b0c3319f926ed322a6
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRank.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.Rank;
+import net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Set;
+
+public interface PaperRank extends Rank
+{
+
+    @NotNull @Unmodifiable Set<PaperPlayerClient> getPlayers();
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRankImplementation.java b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRankImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..f89bc619e02de3fd4c4bb000df66a11cee650ecc
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/rank/PaperRankImplementation.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.RankImplementation;
+
+public interface PaperRankImplementation extends RankImplementation<PaperRank> { }
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index bce07d84cafca677bb6fad78c21b82097f06430c..a24d26f541679b4b3cd2c1fe8aaf2695f901dedf 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -4,6 +4,7 @@ import java.time.Duration;
 import java.time.Instant;
 import java.util.Date;
 import java.util.UUID;
+
 import org.bukkit.ban.ProfileBanList;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.entity.AnimalTamer;
@@ -19,7 +20,7 @@ import org.jetbrains.annotations.Nullable;
  * player that is stored on the disk and can, thus, be retrieved without the
  * player needing to be online.
  */
-public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable {
+public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable, net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient { // KissenPaper
 
     /**
      * Checks if this player is currently online
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index 04e7cd0e4e2d0eb38fb2862ce6688a4470f30d6b..0fd1f0fa7ef8881efc62bffec5fca92d632b1681 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -1,6 +1,7 @@
 package org.bukkit.command;
 
 import java.util.UUID;
+
 import net.kyori.adventure.audience.MessageType;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.Component;
@@ -9,7 +10,7 @@ import org.bukkit.permissions.Permissible;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper
+public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible, net.kissenpvp.core.api.networking.client.entitiy.ServerEntity { // Paper // KissenPaper
 
     /**
      * Sends this sender a message
@@ -200,4 +201,11 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
         this.sendMessage(new net.md_5.bungee.api.chat.TextComponent(components).toLegacyText());
     }
     // Paper end
+
+    // KissenPaper start
+    @Override
+    default @NotNull Component displayName() {
+        return name();
+    }
+    // KissenPaper end
 }
diff --git a/src/main/java/org/bukkit/command/ConsoleCommandSender.java b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
index f309c2ed39bcc700e5b491ff549bf0608a07aab8..5f9b1cd1fc2b9f81780e48c2966f839e5e1f3783 100644
--- a/src/main/java/org/bukkit/command/ConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
@@ -2,5 +2,5 @@ package org.bukkit.command;
 
 import org.bukkit.conversations.Conversable;
 
-public interface ConsoleCommandSender extends CommandSender, Conversable {
+public interface ConsoleCommandSender extends CommandSender, Conversable, net.kissenpvp.core.api.networking.client.entitiy.ConsoleClient { // KissenPaper
 }
diff --git a/src/main/java/org/bukkit/command/MessageCommandSender.java b/src/main/java/org/bukkit/command/MessageCommandSender.java
index 9d263ab3afb938c215c0b64d9171345fca6ceb2c..72227c4175f588f2f9181ca4d5647d75e568b917 100644
--- a/src/main/java/org/bukkit/command/MessageCommandSender.java
+++ b/src/main/java/org/bukkit/command/MessageCommandSender.java
@@ -132,4 +132,32 @@ public interface MessageCommandSender extends CommandSender {
         throw new UnsupportedOperationException();
     }
 
+    // KissenPaper start
+    @org.jetbrains.annotations.NotNull
+    @Override
+    default net.kissenpvp.core.api.message.Theme getTheme()
+    {
+        return Bukkit.getKissen().getImplementation(net.kissenpvp.core.api.message.MessageImplementation.class).getDefaultTheme();
+    }
+
+    @Override
+    default @NotNull java.util.Locale getCurrentLocale() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default @NotNull net.kyori.adventure.text.Component displayName() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default boolean isConnected() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default boolean isClient() {
+        throw new UnsupportedOperationException();
+    }
+    // KissenPaper end
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 20fa1024f9ad8f478a347be5c554b5e45b398a1c..2b43607a3c255348bf076cefb0a9e9b3a6c6a468 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -7,6 +7,7 @@ import java.time.Instant;
 import java.util.Collection;
 import java.util.Date;
 import java.util.Map;
+
 import org.bukkit.BanEntry;
 import org.bukkit.DyeColor;
 import org.bukkit.Effect;
@@ -51,7 +52,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents a player, connected or not
  */
-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient { // Paper
+public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient, net.kissenpvp.paper.api.networking.client.entity.PaperOnlinePlayerClient { // Paper // KissenPaper
 
     // Paper start
     @Override
diff --git a/src/main/java/org/bukkit/profile/PlayerProfile.java b/src/main/java/org/bukkit/profile/PlayerProfile.java
index d36b3e3c7e53840132011add365ca2a26d799064..50572f51a906c1fdc0788934d3d80c276bacad1b 100644
--- a/src/main/java/org/bukkit/profile/PlayerProfile.java
+++ b/src/main/java/org/bukkit/profile/PlayerProfile.java
@@ -100,4 +100,8 @@ public interface PlayerProfile extends Cloneable, ConfigurationSerializable {
 
     @NotNull
     PlayerProfile clone();
+
+    // KissenPaper start
+    @NotNull net.kissenpvp.core.api.user.User getUser();
+    // KissenPaper end
 }
