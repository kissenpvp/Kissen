From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Fri, 11 Aug 2023 02:03:12 +0200
Subject: [PATCH] Turned CommandSender into ServerEntity and added
 SystemMessageEvent

Signed-off-by: Groldi <chniucg@gmail.com>

diff --git a/src/main/java/net/kissenpvp/paper/api/message/ChatEvent.java b/src/main/java/net/kissenpvp/paper/api/message/ChatEvent.java
deleted file mode 100644
index 5df3832331144969d800fb48efc57c30a24a83cd..0000000000000000000000000000000000000000
--- a/src/main/java/net/kissenpvp/paper/api/message/ChatEvent.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright 2023 KissenPvP
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.kissenpvp.paper.api.message;
-
-import net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient;
-import net.kyori.adventure.text.Component;
-import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
-import org.bukkit.event.HandlerList;
-import org.jetbrains.annotations.NotNull;
-
-public class ChatEvent extends Event implements Cancellable
-{
-    private static final HandlerList HANDLERS = new HandlerList();
-    private final PaperPlayerClient sender;
-    private boolean cancelled;
-    private Component message;
-
-    public ChatEvent(@NotNull Component message, @NotNull PaperPlayerClient sender)
-    {
-        this.message   = message;
-        this.sender    = sender;
-        this.cancelled = false;
-    }
-
-    public static HandlerList getHandlerList()
-    {
-        return HANDLERS;
-    }
-
-    public PaperPlayerClient getSender()
-    {
-        return sender;
-    }
-
-    @Override public boolean isCancelled()
-    {
-        return cancelled;
-    }
-
-    @Override public void setCancelled(boolean cancel)
-    {
-        this.cancelled = cancel;
-    }
-
-    @Override public @NotNull HandlerList getHandlers()
-    {
-        return HANDLERS;
-    }
-
-    public @NotNull Component getMessage()
-    {
-        return message;
-    }
-
-    public void setMessage(@NotNull String message)
-    {
-        this.message = Component.text(message);
-    }
-
-    public void setMessage(@NotNull Component message)
-    {
-        this.message = message;
-    }
-}
diff --git a/src/main/java/net/kissenpvp/paper/api/message/SystemMessageEvent.java b/src/main/java/net/kissenpvp/paper/api/message/SystemMessageEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..0be13821ac561b8f9a2eccc8260c2464993be085
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/message/SystemMessageEvent.java
@@ -0,0 +1,55 @@
+package net.kissenpvp.paper.api.message;
+
+import net.kyori.adventure.text.Component;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+public class SystemMessageEvent extends Event implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+    private boolean cancelled;
+    private final Player receiver;
+    private Component component;
+
+    public SystemMessageEvent(@NotNull Player receiver, @NotNull Component component) {
+        this.receiver = receiver;
+        this.component = component;
+        this.cancelled = false;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    public Player getReceiver() {
+        return receiver;
+    }
+
+    public void setComponent(Component component) {
+        this.component = component;
+    }
+
+    public Component getComponent() {
+        return component;
+    }
+}
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index 04e7cd0e4e2d0eb38fb2862ce6688a4470f30d6b..5379dd4080f7b213e5b19a98e7655df64048971a 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -1,6 +1,6 @@
 package org.bukkit.command;
 
-import java.util.UUID;
+import net.kissenpvp.core.api.networking.client.entitiy.ServerEntity;
 import net.kyori.adventure.audience.MessageType;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.Component;
@@ -9,7 +9,9 @@ import org.bukkit.permissions.Permissible;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper
+import java.util.UUID;
+
+public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible, /* KissenPaper */ ServerEntity { // Paper
 
     /**
      * Sends this sender a message
@@ -37,7 +39,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
      * Sends this sender a message
      *
      * @param message Message to be displayed
-     * @param sender The sender of this message
+     * @param sender  The sender of this message
      * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)
      * @deprecated sender UUID is ignored
      */
@@ -48,7 +50,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
      * Sends this sender multiple messages
      *
      * @param messages An array of messages to be displayed
-     * @param sender The sender of this message
+     * @param sender   The sender of this message
      * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)
      * @deprecated sender UUID is ignored
      */
@@ -100,7 +102,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
          * Sends this sender a chat component.
          *
          * @param component the components to send
-         * @param sender the sender of the message
+         * @param sender    the sender of the message
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
@@ -112,7 +114,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
          * Sends an array of components as a single message to the sender.
          *
          * @param components the components to send
-         * @param sender the sender of the message
+         * @param sender     the sender of the message
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
@@ -126,6 +128,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
     // Spigot end
 
     // Paper start
+
     /**
      * Gets the name of this command sender
      *
@@ -135,7 +138,8 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
 
     @Override
     default void sendMessage(final net.kyori.adventure.identity.@NotNull Identity identity, final net.kyori.adventure.text.@NotNull Component message, final net.kyori.adventure.audience.@NotNull MessageType type) {
-        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));
+        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .serialize(message));
     }
 
     /**
@@ -156,11 +160,12 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
      * See <a href="https://docs.advntr.dev/minimessage/">MiniMessage docs</a> and <a href="https://docs.advntr.dev/minimessage/dynamic-replacements">MiniMessage Placeholders docs</a>
      * for more information on the format.
      *
-     * @param message MiniMessage content
+     * @param message   MiniMessage content
      * @param resolvers resolvers to use
      */
     default void sendRichMessage(final @NotNull String message, final net.kyori.adventure.text.minimessage.tag.resolver.@NotNull TagResolver... resolvers) {
-        this.sendMessage(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(message, resolvers));
+        this.sendMessage(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage()
+                .deserialize(message, resolvers));
     }
 
     /**
@@ -200,4 +205,12 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
         this.sendMessage(new net.md_5.bungee.api.chat.TextComponent(components).toLegacyText());
     }
     // Paper end
+
+    // KissenPaper start
+
+    @Override
+    default @NotNull Component displayName() {
+        return name();
+    }
+    // KissenPaper end
 }
diff --git a/src/main/java/org/bukkit/command/MessageCommandSender.java b/src/main/java/org/bukkit/command/MessageCommandSender.java
index 9d263ab3afb938c215c0b64d9171345fca6ceb2c..9a7a7f721246adc20a64221c28cc32967d27c519 100644
--- a/src/main/java/org/bukkit/command/MessageCommandSender.java
+++ b/src/main/java/org/bukkit/command/MessageCommandSender.java
@@ -1,18 +1,19 @@
 package org.bukkit.command;
 
+import net.kyori.adventure.text.Component;
 import org.bukkit.Bukkit;
 import org.bukkit.Server;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
+import java.util.Locale;
 import java.util.Set;
 import java.util.UUID;
 
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 /**
  * For when all you care about is just messaging
  */
@@ -50,6 +51,7 @@ public interface MessageCommandSender extends CommandSender {
     }
     // Paper end
 
+
     @NotNull
     @Override
     default String getName() {
@@ -132,4 +134,25 @@ public interface MessageCommandSender extends CommandSender {
         throw new UnsupportedOperationException();
     }
 
+    // KissenPaper start
+    @Override
+    default @NotNull Locale getCurrentLocale() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default @NotNull Component displayName() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default boolean isConnected() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default boolean isClient() {
+        throw new UnsupportedOperationException();
+    }
+    // KissenPaper end
 }
diff --git a/src/main/java/org/bukkit/entity/HumanEntity.java b/src/main/java/org/bukkit/entity/HumanEntity.java
index 8b0d04d5b39ee817555a36adddc39b18fc6f0d02..756194783fda2066b5b67b8e309914158b5ee5cb 100644
--- a/src/main/java/org/bukkit/entity/HumanEntity.java
+++ b/src/main/java/org/bukkit/entity/HumanEntity.java
@@ -1,22 +1,17 @@
 package org.bukkit.entity;
 
-import java.util.Collection;
-import java.util.Set;
 import org.bukkit.GameMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.inventory.InventoryView;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.MainHand;
-import org.bukkit.inventory.Merchant;
-import org.bukkit.inventory.PlayerInventory;
+import org.bukkit.inventory.*;
 import org.bukkit.inventory.meta.FireworkMeta;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+import java.util.Set;
+
 /**
  * Represents a human entity, such as an NPC or a player
  */
@@ -40,7 +35,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * Get the player's inventory.
      *
      * @return The inventory of the player, this also contains the armor
-     *     slots.
+     * slots.
      */
     @NotNull
     @Override
@@ -66,7 +61,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * If the player currently has an inventory window open, this method will
      * set a property of that window, such as the state of a progress bar.
      *
-     * @param prop The property.
+     * @param prop  The property.
      * @param value The value to set the property to.
      * @return True if the property was successfully set.
      */
@@ -74,7 +69,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
 
     /**
      * Gets the player's current enchantment seed.
-     *
+     * <p>
      * The Seed is used to generate enchantment options in the enchanting table
      * for the player.
      *
@@ -84,7 +79,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
 
     /**
      * Sets the player's enchantment seed.
-     *
+     * <p>
      * The Seed is used to generate enchantment options in the enchanting table
      * for the player.
      *
@@ -116,11 +111,11 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * on the bottom.
      *
      * @param location The location to attach it to. If null, the player's
-     *     location is used.
-     * @param force If false, and there is no workbench block at the location,
-     *     no inventory will be opened and null will be returned.
+     *                 location is used.
+     * @param force    If false, and there is no workbench block at the location,
+     *                 no inventory will be opened and null will be returned.
      * @return The newly opened inventory view, or null if it could not be
-     *     opened.
+     * opened.
      */
     @Nullable
     public InventoryView openWorkbench(@Nullable Location location, boolean force);
@@ -130,11 +125,11 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * on the bottom.
      *
      * @param location The location to attach it to. If null, the player's
-     *     location is used.
-     * @param force If false, and there is no enchanting table at the
-     *     location, no inventory will be opened and null will be returned.
+     *                 location is used.
+     * @param force    If false, and there is no enchanting table at the
+     *                 location, no inventory will be opened and null will be returned.
      * @return The newly opened inventory view, or null if it could not be
-     *     opened.
+     * opened.
      */
     @Nullable
     public InventoryView openEnchanting(@Nullable Location location, boolean force);
@@ -148,12 +143,12 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
 
     /**
      * Starts a trade between the player and the villager.
-     *
+     * <p>
      * Note that only one player may trade with a villager at once. You must use
      * the force parameter for this.
      *
      * @param trader The merchant to trade with. Cannot be null.
-     * @param force whether to force the trade even if another player is trading
+     * @param force  whether to force the trade even if another player is trading
      * @return The newly opened inventory view, or null if it could not be
      * opened.
      */
@@ -162,12 +157,12 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
 
     /**
      * Starts a trade between the player and the merchant.
-     *
+     * <p>
      * Note that only one player may trade with a merchant at once. You must use
      * the force parameter for this.
      *
      * @param merchant The merchant to trade with. Cannot be null.
-     * @param force whether to force the trade even if another player is trading
+     * @param force    whether to force the trade even if another player is trading
      * @return The newly opened inventory view, or null if it could not be
      * opened.
      */
@@ -175,16 +170,17 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
     public InventoryView openMerchant(@NotNull Merchant merchant, boolean force);
 
     // Paper start - Add additional containers
+
     /**
      * Opens an empty anvil inventory window with the player's inventory
      * on the bottom.
      *
      * @param location The location to attach it to. If null, the player's
-     *     location is used.
-     * @param force If false, and there is no anvil block at the location,
-     *     no inventory will be opened and null will be returned.
+     *                 location is used.
+     * @param force    If false, and there is no anvil block at the location,
+     *                 no inventory will be opened and null will be returned.
      * @return The newly opened inventory view, or null if it could not be
-     *     opened.
+     * opened.
      */
     @Nullable
     public InventoryView openAnvil(@Nullable Location location, boolean force);
@@ -194,11 +190,11 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * on the bottom.
      *
      * @param location The location to attach it to. If null, the player's
-     *     location is used.
-     * @param force If false, and there is no cartography table block at the location,
-     *     no inventory will be opened and null will be returned.
+     *                 location is used.
+     * @param force    If false, and there is no cartography table block at the location,
+     *                 no inventory will be opened and null will be returned.
      * @return The newly opened inventory view, or null if it could not be
-     *     opened.
+     * opened.
      */
     @Nullable
     public InventoryView openCartographyTable(@Nullable Location location, boolean force);
@@ -208,11 +204,11 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * on the bottom.
      *
      * @param location The location to attach it to. If null, the player's
-     *     location is used.
-     * @param force If false, and there is no grindstone block at the location,
-     *     no inventory will be opened and null will be returned.
+     *                 location is used.
+     * @param force    If false, and there is no grindstone block at the location,
+     *                 no inventory will be opened and null will be returned.
      * @return The newly opened inventory view, or null if it could not be
-     *     opened.
+     * opened.
      */
     @Nullable
     public InventoryView openGrindstone(@Nullable Location location, boolean force);
@@ -222,11 +218,11 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * on the bottom.
      *
      * @param location The location to attach it to. If null, the player's
-     *     location is used.
-     * @param force If false, and there is no loom block at the location,
-     *     no inventory will be opened and null will be returned.
+     *                 location is used.
+     * @param force    If false, and there is no loom block at the location,
+     *                 no inventory will be opened and null will be returned.
      * @return The newly opened inventory view, or null if it could not be
-     *     opened.
+     * opened.
      */
     @Nullable
     public InventoryView openLoom(@Nullable Location location, boolean force);
@@ -236,11 +232,11 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * on the bottom.
      *
      * @param location The location to attach it to. If null, the player's
-     *     location is used.
-     * @param force If false, and there is no smithing table block at the location,
-     *     no inventory will be opened and null will be returned.
+     *                 location is used.
+     * @param force    If false, and there is no smithing table block at the location,
+     *                 no inventory will be opened and null will be returned.
      * @return The newly opened inventory view, or null if it could not be
-     *     opened.
+     * opened.
      */
     @Nullable
     public InventoryView openSmithingTable(@Nullable Location location, boolean force);
@@ -250,11 +246,11 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * on the bottom.
      *
      * @param location The location to attach it to. If null, the player's
-     *     location is used.
-     * @param force If false, and there is no stonecutter block at the location,
-     *     no inventory will be opened and null will be returned.
+     *                 location is used.
+     * @param force    If false, and there is no stonecutter block at the location,
+     *                 no inventory will be opened and null will be returned.
      * @return The newly opened inventory view, or null if it could not be
-     *     opened.
+     * opened.
      */
     @Nullable
     public InventoryView openStonecutter(@Nullable Location location, boolean force);
@@ -266,6 +262,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
     public void closeInventory();
 
     // Paper start
+
     /**
      * Force-closes the currently open inventory view for this player, if any.
      *
@@ -343,12 +340,13 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * for attacking.
      *
      * @param material the material to set the cooldown for
-     * @param ticks the amount of ticks to set or 0 to remove
+     * @param ticks    the amount of ticks to set or 0 to remove
      * @throws IllegalArgumentException if the material is not an item
      */
     public void setCooldown(@NotNull Material material, int ticks);
 
     // Paper start
+
     /**
      * Sets player hurt direction
      *
@@ -359,6 +357,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
     // Paper end
 
     // Paper start
+
     /**
      * If the player has slept enough to count towards passing the night.
      *
@@ -376,6 +375,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
 
 
     // Paper start - Potential bed api
+
     /**
      * Gets the Location of the player's bed, null if they have not slept
      * in one. This method will not attempt to validate if the current bed
@@ -387,6 +387,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
     public Location getPotentialBedLocation();
     // Paper end
     // Paper start
+
     /**
      * @return the player's fishing hook if they are fishing
      */
@@ -402,8 +403,8 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * to bed, monsters, and dimension type if force is not set.
      *
      * @param location the location of the bed
-     * @param force whether to try and sleep at the location even if not
-     * normally possible
+     * @param force    whether to try and sleep at the location even if not
+     *                 normally possible
      * @return whether the sleep was successful
      */
     public boolean sleep(@NotNull Location location, boolean force);
@@ -412,7 +413,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * Causes the player to wakeup if they are currently sleeping.
      *
      * @param setSpawnLocation whether to set their spawn location to the bed
-     * they are currently sleeping in
+     *                         they are currently sleeping in
      * @throws IllegalStateException if not sleeping
      */
     public void wakeup(boolean setSpawnLocation);
@@ -476,6 +477,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
     public int getExpToLevel();
 
     // Paper start
+
     /**
      * If there is an Entity on this entities left shoulder, it will be released to the world and returned.
      * If no Entity is released, null will be returned.
@@ -497,7 +499,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
 
     /**
      * Gets the current cooldown for a player's attack.
-     *
+     * <p>
      * This is used to calculate damage, with 1.0 representing a fully charged
      * attack and 0.0 representing a non-charged attack
      *
@@ -511,7 +513,6 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * player's recipe book.
      *
      * @param recipe the key of the recipe to discover
-     *
      * @return whether or not the recipe was newly discovered
      */
     public boolean discoverRecipe(@NotNull NamespacedKey recipe);
@@ -523,7 +524,6 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * collection has already been discovered, it will be silently ignored.
      *
      * @param recipes the keys of the recipes to discover
-     *
      * @return the amount of newly discovered recipes where 0 indicates that
      * none were newly discovered and a number equal to {@code recipes.size()}
      * indicates that all were new
@@ -536,7 +536,6 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * player's recipe book.
      *
      * @param recipe the key of the recipe to undiscover
-     *
      * @return whether or not the recipe was successfully undiscovered (i.e. it
      * was previously discovered)
      */
@@ -549,7 +548,6 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * collection has not yet been discovered, it will be silently ignored.
      *
      * @param recipes the keys of the recipes to undiscover
-     *
      * @return the amount of undiscovered recipes where 0 indicates that none
      * were undiscovered and a number equal to {@code recipes.size()} indicates
      * that all were undiscovered
@@ -560,7 +558,6 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * Check whether or not this entity has discovered the specified recipe.
      *
      * @param recipe the key of the recipe to check
-     *
      * @return true if discovered, false otherwise
      */
     public boolean hasDiscoveredRecipe(@NotNull NamespacedKey recipe);
@@ -637,6 +634,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
     @Deprecated
     public void setShoulderEntityRight(@Nullable Entity entity);
     // Paper start - Add method to open already placed sign
+
     /**
      * Opens an editor window for the specified sign
      *
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 3eef4a40afc672cafecaa052a107706cb73f8862..e0cc1f8bf1a88e13721a71d0e693a10c6459e45e 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1,33 +1,8 @@
 package org.bukkit.entity;
 
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.time.Duration;
-import java.time.Instant;
-import java.util.Collection;
-import java.util.Date;
-import java.util.Map;
-
 import net.kissenpvp.core.api.networking.client.entitiy.MessageReceiver;
-import net.kissenpvp.core.api.networking.client.entitiy.PlayerClient;
 import net.kissenpvp.paper.api.networking.client.entity.PaperOnlinePlayerClient;
-import net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient;
-import net.kissenpvp.paper.api.user.rank.PaperPlayerRank;
-import org.bukkit.BanEntry;
-import org.bukkit.DyeColor;
-import org.bukkit.Effect;
-import org.bukkit.GameMode;
-import org.bukkit.Instrument;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.Note;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.Particle;
-import org.bukkit.Server;
-import org.bukkit.Sound;
-import org.bukkit.SoundCategory;
-import org.bukkit.WeatherType;
-import org.bukkit.WorldBorder;
+import org.bukkit.*;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.advancement.AdvancementProgress;
 import org.bukkit.ban.IpBanList;
@@ -48,16 +23,23 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.map.MapView;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.PluginMessageRecipient;
-import org.bukkit.profile.PlayerProfile;
 import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.time.Duration;
+import java.time.Instant;
+import java.util.Collection;
+import java.util.Date;
+import java.util.Map;
+
 /**
  * Represents a player, connected or not
  */
-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient, /* KissenPaper */ PaperOnlinePlayerClient, PaperPlayerClient, PlayerClient<PaperPlayerRank>, MessageReceiver { // Paper
+public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient, /* KissenPaper */ PaperOnlinePlayerClient, MessageReceiver { // Paper
 
     // Paper start
     @Override
@@ -128,6 +110,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     public void setDisplayName(@Nullable String name);
 
     // Paper start
+
     /**
      * Sets the name that is shown on the in-game player list.
      * <p>
@@ -158,6 +141,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     net.kyori.adventure.text.@Nullable Component playerListFooter();
     // Paper end
+
     /**
      * Gets the name that is shown on the player list.
      *
@@ -269,11 +253,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     public void kickPlayer(@Nullable String message);
 
     // Paper start
+
     /**
      * Kicks the player with the default kick message.
+     *
      * @see #kick(net.kyori.adventure.text.Component)
      */
     void kick();
+
     /**
      * Kicks player with custom kick message.
      *
@@ -285,7 +272,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Kicks player with custom kick message and cause.
      *
      * @param message kick message
-     * @param cause kick cause
+     * @param cause   kick cause
      */
     void kick(final net.kyori.adventure.text.@Nullable Component message, org.bukkit.event.player.PlayerKickEvent.@NotNull Cause cause);
     // Paper end
@@ -294,14 +281,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will
      * update the entry.
      *
-     * @param reason reason for the ban, null indicates implementation default
-     * @param expires date for the ban's expiration (unban), or null to imply
-     *     forever
-     * @param source source of the ban, null indicates implementation default
+     * @param reason     reason for the ban, null indicates implementation default
+     * @param expires    date for the ban's expiration (unban), or null to imply
+     *                   forever
+     * @param source     source of the ban, null indicates implementation default
      * @param kickPlayer if the player need to be kick
-     *
      * @return the entry for the newly created ban, or the entry for the
-     *     (updated) previous ban
+     * (updated) previous ban
      */
     @Nullable
     public <E extends BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E ban(@Nullable String reason, @Nullable Date expires, @Nullable String source, boolean kickPlayer); // Paper - fix ban list API
@@ -310,14 +296,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will
      * update the entry.
      *
-     * @param reason reason for the ban, null indicates implementation default
-     * @param expires date for the ban's expiration (unban), or null to imply
-     *     forever
-     * @param source source of the ban, null indicates implementation default
+     * @param reason     reason for the ban, null indicates implementation default
+     * @param expires    date for the ban's expiration (unban), or null to imply
+     *                   forever
+     * @param source     source of the ban, null indicates implementation default
      * @param kickPlayer if the player need to be kick
-     *
      * @return the entry for the newly created ban, or the entry for the
-     *     (updated) previous ban
+     * (updated) previous ban
      */
     @Nullable
     public <E extends BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E ban(@Nullable String reason, @Nullable Instant expires, @Nullable String source, boolean kickPlayer); // Paper - fix ban list API
@@ -326,14 +311,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will
      * update the entry.
      *
-     * @param reason reason for the ban, null indicates implementation default
-     * @param duration the duration how long the ban lasts, or null to imply
-     *     forever
-     * @param source source of the ban, null indicates implementation default
+     * @param reason     reason for the ban, null indicates implementation default
+     * @param duration   the duration how long the ban lasts, or null to imply
+     *                   forever
+     * @param source     source of the ban, null indicates implementation default
      * @param kickPlayer if the player need to be kick
-     *
      * @return the entry for the newly created ban, or the entry for the
-     *     (updated) previous ban
+     * (updated) previous ban
      */
     @Nullable
     public <E extends BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E ban(@Nullable String reason, @Nullable Duration duration, @Nullable String source, boolean kickPlayer); // Paper - fix ban list API
@@ -342,14 +326,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Adds this user's current IP address to the {@link IpBanList}. If a previous ban exists, this will
      * update the entry. If {@link #getAddress()} is null this method will throw an exception.
      *
-     * @param reason reason for the ban, null indicates implementation default
-     * @param expires date for the ban's expiration (unban), or null to imply
-     *     forever
-     * @param source source of the ban, null indicates implementation default
+     * @param reason     reason for the ban, null indicates implementation default
+     * @param expires    date for the ban's expiration (unban), or null to imply
+     *                   forever
+     * @param source     source of the ban, null indicates implementation default
      * @param kickPlayer if the player need to be kick
-     *
      * @return the entry for the newly created ban, or the entry for the
-     *     (updated) previous ban
+     * (updated) previous ban
      */
     @Nullable
     public BanEntry<InetAddress> banIp(@Nullable String reason, @Nullable Date expires, @Nullable String source, boolean kickPlayer);
@@ -358,14 +341,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Adds this user's current IP address to the {@link IpBanList}. If a previous ban exists, this will
      * update the entry. If {@link #getAddress()} is null this method will throw an exception.
      *
-     * @param reason reason for the ban, null indicates implementation default
-     * @param expires date for the ban's expiration (unban), or null to imply
-     *     forever
-     * @param source source of the ban, null indicates implementation default
+     * @param reason     reason for the ban, null indicates implementation default
+     * @param expires    date for the ban's expiration (unban), or null to imply
+     *                   forever
+     * @param source     source of the ban, null indicates implementation default
      * @param kickPlayer if the player need to be kick
-     *
      * @return the entry for the newly created ban, or the entry for the
-     *     (updated) previous ban
+     * (updated) previous ban
      */
     @Nullable
     public BanEntry<InetAddress> banIp(@Nullable String reason, @Nullable Instant expires, @Nullable String source, boolean kickPlayer);
@@ -374,14 +356,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Adds this user's current IP address to the {@link IpBanList}. If a previous ban exists, this will
      * update the entry. If {@link #getAddress()} is null this method will throw an exception.
      *
-     * @param reason reason for the ban, null indicates implementation default
-     * @param duration the duration how long the ban lasts, or null to imply
-     *     forever
-     * @param source source of the ban, null indicates implementation default
+     * @param reason     reason for the ban, null indicates implementation default
+     * @param duration   the duration how long the ban lasts, or null to imply
+     *                   forever
+     * @param source     source of the ban, null indicates implementation default
      * @param kickPlayer if the player need to be kick
-     *
      * @return the entry for the newly created ban, or the entry for the
-     *     (updated) previous ban
+     * (updated) previous ban
      */
     @Nullable
     public BanEntry<InetAddress> banIp(@Nullable String reason, @Nullable Duration duration, @Nullable String source, boolean kickPlayer);
@@ -403,7 +384,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
     /**
      * Returns true if the entity is supported by a block.
-     *
+     * <p>
      * This value is a state updated by the client after each movement.
      *
      * @return True if entity is on ground.
@@ -500,8 +481,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Sets the Location where the player will spawn at their bed.
      *
      * @param location where to set the respawn location
-     * @param force whether to forcefully set the respawn location even if a
-     *     valid bed is not present
+     * @param force    whether to forcefully set the respawn location even if a
+     *                 valid bed is not present
      */
     public void setBedSpawnLocation(@Nullable Location location, boolean force);
 
@@ -510,9 +491,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * at the particular location (as far as the client is concerned). This
      * will not work without a note block. This will not work with cake.
      *
-     * @param loc The location of a note block.
+     * @param loc        The location of a note block.
      * @param instrument The instrument ID.
-     * @param note The note ID.
+     * @param note       The note ID.
      * @deprecated Magic value
      */
     @Deprecated
@@ -521,9 +502,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Play a note for a player at a location.
      *
-     * @param loc The location of a note block
+     * @param loc        The location of a note block
      * @param instrument The instrument
-     * @param note The note
+     * @param note       The note
      */
     public void playNote(@NotNull Location loc, @NotNull Instrument instrument, @NotNull Note note);
 
@@ -534,9 +515,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * This function will fail silently if Location or Sound are null.
      *
      * @param location The location to play the sound
-     * @param sound The sound to play
-     * @param volume The volume of the sound
-     * @param pitch The pitch of the sound
+     * @param sound    The sound to play
+     * @param volume   The volume of the sound
+     * @param pitch    The pitch of the sound
      */
     public void playSound(@NotNull Location location, @NotNull Sound sound, float volume, float pitch);
 
@@ -548,9 +529,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * respective sound for the value passed.
      *
      * @param location The location to play the sound
-     * @param sound The internal sound name to play
-     * @param volume The volume of the sound
-     * @param pitch The pitch of the sound
+     * @param sound    The internal sound name to play
+     * @param volume   The volume of the sound
+     * @param pitch    The pitch of the sound
      */
     public void playSound(@NotNull Location location, @NotNull String sound, float volume, float pitch);
 
@@ -560,10 +541,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * This function will fail silently if Location or Sound are null.
      *
      * @param location The location to play the sound
-     * @param sound The sound to play
+     * @param sound    The sound to play
      * @param category The category of the sound
-     * @param volume The volume of the sound
-     * @param pitch The pitch of the sound
+     * @param volume   The volume of the sound
+     * @param pitch    The pitch of the sound
      */
     public void playSound(@NotNull Location location, @NotNull Sound sound, @NotNull SoundCategory category, float volume, float pitch);
 
@@ -575,10 +556,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * sound for the value passed.
      *
      * @param location The location to play the sound
-     * @param sound The internal sound name to play
+     * @param sound    The internal sound name to play
      * @param category The category of the sound
-     * @param volume The volume of the sound
-     * @param pitch The pitch of the sound
+     * @param volume   The volume of the sound
+     * @param pitch    The pitch of the sound
      */
     public void playSound(@NotNull Location location, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch);
 
@@ -588,9 +569,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * This function will fail silently if Entity or Sound are null.
      *
      * @param entity The entity to play the sound
-     * @param sound The sound to play
+     * @param sound  The sound to play
      * @param volume The volume of the sound
-     * @param pitch The pitch of the sound
+     * @param pitch  The pitch of the sound
      */
     public void playSound(@NotNull Entity entity, @NotNull Sound sound, float volume, float pitch);
 
@@ -600,9 +581,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * This function will fail silently if Entity or Sound are null.
      *
      * @param entity The entity to play the sound
-     * @param sound The sound to play
+     * @param sound  The sound to play
      * @param volume The volume of the sound
-     * @param pitch The pitch of the sound
+     * @param pitch  The pitch of the sound
      */
     public void playSound(@NotNull Entity entity, @NotNull String sound, float volume, float pitch);
 
@@ -611,11 +592,11 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * <p>
      * This function will fail silently if Entity or Sound are null.
      *
-     * @param entity The entity to play the sound
-     * @param sound The sound to play
+     * @param entity   The entity to play the sound
+     * @param sound    The sound to play
      * @param category The category of the sound
-     * @param volume The volume of the sound
-     * @param pitch The pitch of the sound
+     * @param volume   The volume of the sound
+     * @param pitch    The pitch of the sound
      */
     public void playSound(@NotNull Entity entity, @NotNull Sound sound, @NotNull SoundCategory category, float volume, float pitch);
 
@@ -624,11 +605,11 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * <p>
      * This function will fail silently if Entity or Sound are null.
      *
-     * @param entity The entity to play the sound
-     * @param sound The sound to play
+     * @param entity   The entity to play the sound
+     * @param sound    The sound to play
      * @param category The category of the sound
-     * @param volume The volume of the sound
-     * @param pitch The pitch of the sound
+     * @param volume   The volume of the sound
+     * @param pitch    The pitch of the sound
      */
     public void playSound(@NotNull Entity entity, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch);
 
@@ -649,7 +630,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Stop the specified sound from playing.
      *
-     * @param sound the sound to stop
+     * @param sound    the sound to stop
      * @param category the category of the sound
      */
     public void stopSound(@NotNull Sound sound, @Nullable SoundCategory category);
@@ -657,7 +638,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Stop the specified sound from playing.
      *
-     * @param sound the sound to stop
+     * @param sound    the sound to stop
      * @param category the category of the sound
      */
     public void stopSound(@NotNull String sound, @Nullable SoundCategory category);
@@ -677,9 +658,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Plays an effect to just this player.
      *
-     * @param loc the location to play the effect at
+     * @param loc    the location to play the effect at
      * @param effect the {@link Effect}
-     * @param data a data bit needed for some effects
+     * @param data   a data bit needed for some effects
      * @deprecated Magic value
      */
     @Deprecated
@@ -688,16 +669,16 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Plays an effect to just this player.
      *
-     * @param <T> the data based on the type of the effect
-     * @param loc the location to play the effect at
+     * @param <T>    the data based on the type of the effect
+     * @param loc    the location to play the effect at
      * @param effect the {@link Effect}
-     * @param data a data bit needed for some effects
+     * @param data   a data bit needed for some effects
      */
     public <T> void playEffect(@NotNull Location loc, @NotNull Effect effect, @Nullable T data);
 
     /**
      * Force this player to break a Block using the item in their main hand.
-     *
+     * <p>
      * This method will respect enchantments, handle item durability (if
      * applicable) and drop experience and the correct items according to the
      * tool/item in the player's hand.
@@ -714,7 +695,6 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * The block must be in the same world as the player.
      *
      * @param block the block to break
-     *
      * @return true if the block was broken, false if the break failed
      */
     public boolean breakBlock(@NotNull Block block);
@@ -723,9 +703,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Send a block change. This fakes a block change packet for a user at a
      * certain location. This will not actually change the world in any way.
      *
-     * @param loc The location of the changed block
+     * @param loc      The location of the changed block
      * @param material The new block
-     * @param data The block data
+     * @param data     The block data
      * @deprecated Magic value
      */
     @Deprecated
@@ -735,7 +715,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Send a block change. This fakes a block change packet for a user at a
      * certain location. This will not actually change the world in any way.
      *
-     * @param loc The location of the changed block
+     * @param loc   The location of the changed block
      * @param block The new block
      */
     public void sendBlockChange(@NotNull Location loc, @NotNull BlockData block);
@@ -776,9 +756,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * responsibility of the caller to ensure that the client is within range
      * of the changed blocks or to handle any side effects caused as a result.
      *
-     * @param blocks the block states to send to the player
+     * @param blocks               the block states to send to the player
      * @param suppressLightUpdates whether or not light updates should be
-     * suppressed when updating the blocks on the client
+     *                             suppressed when updating the blocks on the client
      * @deprecated suppressLightUpdates is not functional in versions greater
      * than 1.19.4
      */
@@ -790,13 +770,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * sourced by this player. This will not actually change the block's break
      * progress in any way.
      *
-     * @param loc the location of the damaged block
+     * @param loc      the location of the damaged block
      * @param progress the progress from 0.0 - 1.0 where 0 is no damage and
-     * 1.0 is the most damaged
+     *                 1.0 is the most damaged
      */
     public void sendBlockDamage(@NotNull Location loc, float progress);
 
     // Paper start
+
     /**
      * Send multiple block changes. This fakes a multi block change packet for each
      * chunk section that a block change occurs. This will not actually change the world in any way.
@@ -809,7 +790,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Send multiple block changes. This fakes a multi block change packet for each
      * chunk section that a block change occurs. This will not actually change the world in any way.
      *
-     * @param blockChanges A map of the positions you want to change to their new block data
+     * @param blockChanges         A map of the positions you want to change to their new block data
      * @param suppressLightUpdates Whether to suppress light updates or not
      * @deprecated suppressLightUpdates is no longer available in 1.20+, use {@link #sendMultiBlockChange(Map)}
      */
@@ -828,10 +809,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * separate damage overlay will be displayed with the given progress. This allows
      * for block damage at different progress from multiple entities at once.
      *
-     * @param loc the location of the damaged block
+     * @param loc      the location of the damaged block
      * @param progress the progress from 0.0 - 1.0 where 0 is no damage and
-     * 1.0 is the most damaged
-     * @param source the entity to which the damage belongs
+     *                 1.0 is the most damaged
+     * @param source   the entity to which the damage belongs
      */
     public void sendBlockDamage(@NotNull Location loc, float progress, @NotNull Entity source);
 
@@ -844,11 +825,11 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * separate damage overlay will be displayed with the given progress. This allows
      * for block damage at different progress from multiple entities at once.
      *
-     * @param loc the location of the damaged block
+     * @param loc      the location of the damaged block
      * @param progress the progress from 0.0 - 1.0 where 0 is no damage and
-     * 1.0 is the most damaged
+     *                 1.0 is the most damaged
      * @param sourceId the entity id of the entity to which the damage belongs.
-     * Can be an id that does not associate directly with an existing or loaded entity.
+     *                 Can be an id that does not associate directly with an existing or loaded entity.
      */
     public void sendBlockDamage(@NotNull Location loc, float progress, int sourceId);
 
@@ -857,9 +838,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * actually change the entity's equipment in any way.
      *
      * @param entity the entity whose equipment to change
-     * @param slot the slot to change
-     * @param item the item to which the slot should be changed, or null to set
-     * it to air
+     * @param slot   the slot to change
+     * @param item   the item to which the slot should be changed, or null to set
+     *               it to air
      */
     public void sendEquipmentChange(@NotNull LivingEntity entity, @NotNull EquipmentSlot slot, @Nullable ItemStack item);
 
@@ -868,12 +849,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * actually change the entity's equipment in any way.
      *
      * @param entity the entity whose equipment to change
-     * @param items the slots to change, where the values are the items to which
-     * the slot should be changed. null values will set the slot to air
+     * @param items  the slots to change, where the values are the items to which
+     *               the slot should be changed. null values will set the slot to air
      */
     public void sendEquipmentChange(@NotNull LivingEntity entity, @NotNull Map<EquipmentSlot, ItemStack> items);
 
     // Paper start
+
     /**
      * Send a sign change. This fakes a sign change packet for a user at
      * a certain location. This will not actually change the world in any way.
@@ -884,7 +866,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * If the client does not have a sign at the given location it will
      * display an error message to the user.
      *
-     * @param loc the location of the sign
+     * @param loc   the location of the sign
      * @param lines the new text on the sign or null to clear it
      * @throws IllegalArgumentException if location is null
      * @throws IllegalArgumentException if lines is non-null and has a length less than 4
@@ -907,8 +889,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * If the client does not have a sign at the given location it will
      * display an error message to the user.
      *
-     * @param loc the location of the sign
-     * @param lines the new text on the sign or null to clear it
+     * @param loc      the location of the sign
+     * @param lines    the new text on the sign or null to clear it
      * @param dyeColor the color of the sign
      * @throws IllegalArgumentException if location is null
      * @throws IllegalArgumentException if dyeColor is null
@@ -932,8 +914,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * If the client does not have a sign at the given location it will
      * display an error message to the user.
      *
-     * @param loc the location of the sign
-     * @param lines the new text on the sign or null to clear it
+     * @param loc            the location of the sign
+     * @param lines          the new text on the sign or null to clear it
      * @param hasGlowingText whether the text of the sign should glow as if dyed with a glowing ink sac
      * @throws IllegalArgumentException if location is null
      * @throws IllegalArgumentException if dyeColor is null
@@ -957,9 +939,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * If the client does not have a sign at the given location it will
      * display an error message to the user.
      *
-     * @param loc the location of the sign
-     * @param lines the new text on the sign or null to clear it
-     * @param dyeColor the color of the sign
+     * @param loc            the location of the sign
+     * @param lines          the new text on the sign or null to clear it
+     * @param dyeColor       the color of the sign
      * @param hasGlowingText whether the text of the sign should glow as if dyed with a glowing ink sac
      * @throws IllegalArgumentException if location is null
      * @throws IllegalArgumentException if dyeColor is null
@@ -970,7 +952,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @Deprecated
     void sendSignChange(@NotNull Location loc, @Nullable java.util.List<? extends net.kyori.adventure.text.Component> lines, @NotNull DyeColor dyeColor, boolean hasGlowingText)
-        throws IllegalArgumentException;
+            throws IllegalArgumentException;
     // Paper end
 
     /**
@@ -986,7 +968,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * To change all attributes of a sign, including the back Side, use
      * {@link #sendBlockUpdate(org.bukkit.Location, org.bukkit.block.TileState)}.
      *
-     * @param loc the location of the sign
+     * @param loc   the location of the sign
      * @param lines the new text on the sign or null to clear it
      * @throws IllegalArgumentException if location is null
      * @throws IllegalArgumentException if lines is non-null and has a length less than 4
@@ -1010,8 +992,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * To change all attributes of a sign, including the back Side, use
      * {@link #sendBlockUpdate(org.bukkit.Location, org.bukkit.block.TileState)}.
      *
-     * @param loc the location of the sign
-     * @param lines the new text on the sign or null to clear it
+     * @param loc      the location of the sign
+     * @param lines    the new text on the sign or null to clear it
      * @param dyeColor the color of the sign
      * @throws IllegalArgumentException if location is null
      * @throws IllegalArgumentException if dyeColor is null
@@ -1036,9 +1018,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * To change all attributes of a sign, including the back Side, use
      * {@link #sendBlockUpdate(org.bukkit.Location, org.bukkit.block.TileState)}.
      *
-     * @param loc the location of the sign
-     * @param lines the new text on the sign or null to clear it
-     * @param dyeColor the color of the sign
+     * @param loc            the location of the sign
+     * @param lines          the new text on the sign or null to clear it
+     * @param dyeColor       the color of the sign
      * @param hasGlowingText if the sign's text should be glowing
      * @throws IllegalArgumentException if location is null
      * @throws IllegalArgumentException if dyeColor is null
@@ -1062,7 +1044,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * <p>
      * {@link BlockData#createBlockState()} can be used to create a {@link BlockState}.
      *
-     * @param loc the location of the sign
+     * @param loc       the location of the sign
      * @param tileState the tile state
      * @throws IllegalArgumentException if location is null
      * @throws IllegalArgumentException if tileState is null
@@ -1079,6 +1061,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     public void sendMap(@NotNull MapView map);
 
     // Paper start
+
     /**
      * Shows the player the win screen that normally is only displayed after one kills the ender dragon
      * and exits the end for the first time.
@@ -1090,8 +1073,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * they have seen it before because this method was called.
      * Note this method does not make the player invulnerable, which is normally expected when viewing credits.
      *
-     * @see #hasSeenWinScreen() 
-     * @see #setHasSeenWinScreen(boolean) 
+     * @see #hasSeenWinScreen()
+     * @see #setHasSeenWinScreen(boolean)
      * @see <a href="https://minecraft.fandom.com/wiki/End_Poem#Technical_details">https://minecraft.fandom.com/wiki/End_Poem#Technical_details</a>
      */
     public void showWinScreen();
@@ -1120,6 +1103,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     // Paper end
 
     // Paper start
+
     /**
      * Permanently Bans the Profile and IP address currently used by the player.
      *
@@ -1147,7 +1131,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Bans the Profile and IP address currently used by the player.
      *
-     * @param reason Reason for Ban
+     * @param reason  Reason for Ban
      * @param expires When to expire the ban
      * @return Ban Entry
      */
@@ -1159,9 +1143,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Bans the Profile and IP address currently used by the player.
      *
-     * @param reason Reason for Ban
+     * @param reason  Reason for Ban
      * @param expires When to expire the ban
-     * @param source Source of the ban, or null for default
+     * @param source  Source of the ban, or null for default
      * @return Ban Entry
      */
     @Nullable
@@ -1174,7 +1158,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Permanently Bans the IP address currently used by the player.
      * Does not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}
      *
-     * @param reason Reason for ban
+     * @param reason     Reason for ban
      * @param kickPlayer Whether or not to kick the player afterwards
      * @return Ban Entry
      */
@@ -1186,8 +1170,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Permanently Bans the IP address currently used by the player.
      * Does not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}
-     * @param reason Reason for ban
-     * @param source Source of ban, or null for default
+     *
+     * @param reason     Reason for ban
+     * @param source     Source of ban, or null for default
      * @param kickPlayer Whether or not to kick the player afterwards
      * @return Ban Entry
      */
@@ -1199,8 +1184,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Bans the IP address currently used by the player.
      * Does not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}
-     * @param reason Reason for Ban
-     * @param expires When to expire the ban
+     *
+     * @param reason     Reason for Ban
+     * @param expires    When to expire the ban
      * @param kickPlayer Whether or not to kick the player afterwards
      * @return Ban Entry
      */
@@ -1224,6 +1210,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Permanently Bans the IP address currently used by the player.
      * Does not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}
+     *
      * @param reason Reason for ban
      * @param source Source of ban, or null for default
      * @return Ban Entry
@@ -1236,7 +1223,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Bans the IP address currently used by the player.
      * Does not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}
-     * @param reason Reason for Ban
+     *
+     * @param reason  Reason for Ban
      * @param expires When to expire the ban
      * @return Ban Entry
      */
@@ -1248,9 +1236,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Bans the IP address currently used by the player.
      * Does not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}
-     * @param reason Reason for Ban
+     *
+     * @param reason  Reason for Ban
      * @param expires When to expire the ban
-     * @param source Source of the ban or null for default
+     * @param source  Source of the ban or null for default
      * @return Ban Entry
      */
     @Nullable
@@ -1261,15 +1250,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Bans the IP address currently used by the player.
      * Does not ban the Profile, use {@link #banPlayerFull(String, java.util.Date, String)}
-     * @param reason Reason for Ban
-     * @param expires When to expire the ban
-     * @param source Source of the ban or null for default
+     *
+     * @param reason     Reason for Ban
+     * @param expires    When to expire the ban
+     * @param source     Source of the ban or null for default
      * @param kickPlayer if the targeted player should be kicked
      * @return Ban Entry
      */
     @Nullable
     public default org.bukkit.BanEntry banPlayerIP(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source, boolean kickPlayer) {
-        org.bukkit.BanEntry banEntry = org.bukkit.Bukkit.getServer().getBanList(org.bukkit.BanList.Type.IP).addBan(getAddress().getAddress().getHostAddress(), reason, expires, source);
+        org.bukkit.BanEntry banEntry = org.bukkit.Bukkit.getServer()
+                .getBanList(org.bukkit.BanList.Type.IP)
+                .addBan(getAddress().getAddress().getHostAddress(), reason, expires, source);
         if (kickPlayer && isOnline()) {
             getPlayer().kickPlayer(reason);
         }
@@ -1279,7 +1271,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
     /**
      * Sends an Action Bar message to the client.
-     *
+     * <p>
      * Use Section symbols for legacy color codes to send formatting.
      *
      * @param message The message to send
@@ -1290,11 +1282,11 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
     /**
      * Sends an Action Bar message to the client.
-     *
+     * <p>
      * Use supplied alternative character to the section symbol to represent legacy color codes.
      *
      * @param alternateChar Alternate symbol such as '&amp;'
-     * @param message The message to send
+     * @param message       The message to send
      * @deprecated use {@link #sendActionBar(net.kyori.adventure.text.Component)}
      */
     @Deprecated
@@ -1336,9 +1328,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Sends an array of components as a single message to the specified screen position of this player
      *
-     * @deprecated This is unlikely the API you want to use. See {@link #sendActionBar(String)} for a more proper Action Bar API. This deprecated API may send unsafe items to the client.
-     * @param position the screen position
+     * @param position   the screen position
      * @param components the components to send
+     * @deprecated This is unlikely the API you want to use. See {@link #sendActionBar(String)} for a more proper Action Bar API. This deprecated API may send unsafe items to the client.
      */
     @Deprecated
     public default void sendMessage(net.md_5.bungee.api.ChatMessageType position, net.md_5.bungee.api.chat.BaseComponent... components) {
@@ -1476,8 +1468,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * the given yaw relative to the player's direction.
      *
      * @param yaw the yaw in degrees relative to the player's direction where 0
-     * is in front of the player, 90 is to the right, 180 is behind, and 270 is
-     * to the left
+     *            is in front of the player, 90 is to the right, 180 is behind, and 270 is
+     *            to the left
      */
     public void sendHurtAnimation(float yaw);
 
@@ -1492,7 +1484,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Remove custom chat completion suggestions shown to the player while
      * typing a message.
-     *
+     * <p>
      * Online player names cannot be removed with this method. This will affect
      * only custom completions added by {@link #addCustomChatCompletions(Collection)}
      * or {@link #setCustomChatCompletions(Collection)}.
@@ -1539,10 +1531,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * the player's time. To restore player time to normal use
      * resetPlayerTime().
      *
-     * @param time The current player's perceived time or the player's time
-     *     offset from the server time.
+     * @param time     The current player's perceived time or the player's time
+     *                 offset from the server time.
      * @param relative When true the player time is kept relative to its world
-     *     time.
+     *                 time.
      */
     public void setPlayerTime(long time, boolean relative);
 
@@ -1591,7 +1583,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Returns the type of weather the player is currently experiencing.
      *
      * @return The WeatherType that the player is currently experiencing or
-     *     null if player is seeing server weather.
+     * null if player is seeing server weather.
      */
     @Nullable
     public WeatherType getPlayerWeather();
@@ -1603,6 +1595,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     public void resetPlayerWeather();
 
     // Paper start
+
     /**
      * Gives the player the amount of experience specified.
      *
@@ -1611,6 +1604,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     public default void giveExp(int amount) {
         giveExp(amount, false);
     }
+
     /**
      * Gets the player's cooldown between picking up experience orbs.
      *
@@ -1624,7 +1618,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * <strong>Note:</strong> Setting this to 0 allows the player to pick up
      * instantly, but setting this to a negative value will cause the player to
      * be unable to pick up xp-orbs.
-     *
+     * <p>
      * Calling this Method will result in {@link PlayerExpCooldownChangeEvent}
      * being called.
      *
@@ -1635,14 +1629,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Gives the player the amount of experience specified.
      *
-     * @param amount Exp amount to give
+     * @param amount       Exp amount to give
      * @param applyMending Mend players items with mending, with same behavior as picking up orbs. calls {@link #applyMending(int)}
      */
     public void giveExp(int amount, boolean applyMending);
 
     /**
      * Applies the mending effect to any items just as picking up an orb would.
-     *
+     * <p>
      * Can also be called with {@link #giveExp(int, boolean)} by passing true to applyMending
      *
      * @param amount Exp to apply
@@ -1713,7 +1707,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
     /**
      * Send an experience change.
-     *
+     * <p>
      * This fakes an experience change packet for a user. This will not actually
      * change the experience points in any way.
      *
@@ -1724,13 +1718,12 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
     /**
      * Send an experience change.
-     *
+     * <p>
      * This fakes an experience change packet for a user. This will not actually
      * change the experience points in any way.
      *
      * @param progress New experience progress percentage (between 0.0 and 1.0)
-     * @param level New experience level
-     *
+     * @param level    New experience level
      * @see #setExp(float)
      * @see #setLevel(int)
      */
@@ -1753,6 +1746,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     public void setAllowFlight(boolean flight);
 
     // Paper start - flying fall damage
+
     /**
      * Allows you to enable fall damage while {@link #getAllowFlight()} is {@code true}
      *
@@ -1810,7 +1804,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param player Player to check
      * @return True if the provided player is not being hidden from this
-     *     player
+     * player
      */
     public boolean canSee(@NotNull Player player);
 
@@ -1841,7 +1835,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param entity Entity to check
      * @return True if the provided entity is not being hidden from this
-     *     player
+     * player
      * @apiNote draft API
      */
     @ApiStatus.Experimental
@@ -1867,7 +1861,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param value The new speed, from -1 to 1.
      * @throws IllegalArgumentException If new speed is less than -1 or
-     *     greater than 1
+     *                                  greater than 1
      */
     public void setFlySpeed(float value) throws IllegalArgumentException;
 
@@ -1877,7 +1871,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param value The new speed, from -1 to 1.
      * @throws IllegalArgumentException If new speed is less than -1 or
-     *     greater than 1
+     *                                  greater than 1
      */
     public void setWalkSpeed(float value) throws IllegalArgumentException;
 
@@ -1921,12 +1915,12 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * </ul>
      *
      * @param url The URL from which the client will download the texture
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
+     *            pack. The string must contain only US-ASCII characters and should
+     *            be encoded as per RFC 1738.
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long.
      * @deprecated Minecraft no longer uses textures packs. Instead you
-     *     should use {@link #setResourcePack(String)}.
+     * should use {@link #setResourcePack(String)}.
      */
     @Deprecated
     public void setTexturePack(@NotNull String url);
@@ -1957,11 +1951,11 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * </ul>
      *
      * @param url The URL from which the client will download the resource
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
+     *            pack. The string must contain only US-ASCII characters and should
+     *            be encoded as per RFC 1738.
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
-     *     length restriction is an implementation specific arbitrary value.
+     *                                  length restriction is an implementation specific arbitrary value.
      * @deprecated use {@link #setResourcePack(String, String)}
      */
     @Deprecated // Paper
@@ -1996,18 +1990,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     pack correctly.
      * </ul>
      *
-     * @deprecated in favour of {@link #setResourcePack(String, byte[], Component)}
-     * @param url The URL from which the client will download the resource
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
+     * @param url  The URL from which the client will download the resource
+     *             pack. The string must contain only US-ASCII characters and should
+     *             be encoded as per RFC 1738.
      * @param hash The sha1 hash sum of the resource pack file which is used
-     *     to apply a cached version of the pack directly without downloading
-     *     if it is available. Hast to be 20 bytes long!
+     *             to apply a cached version of the pack directly without downloading
+     *             if it is available. Hast to be 20 bytes long!
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
-     *     length restriction is an implementation specific arbitrary value.
+     *                                  length restriction is an implementation specific arbitrary value.
      * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
-     *     long.
+     *                                  long.
+     * @deprecated in favour of {@link #setResourcePack(String, byte[], Component)}
      */
     public void setResourcePack(@NotNull String url, @Nullable byte[] hash);
 
@@ -2040,24 +2034,25 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     pack correctly.
      * </ul>
      *
-     * @deprecated in favour of {@link #setResourcePack(String, byte[], Component, boolean)}
-     * @param url The URL from which the client will download the resource
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
-     * @param hash The sha1 hash sum of the resource pack file which is used
-     *     to apply a cached version of the pack directly without downloading
-     *     if it is available. Hast to be 20 bytes long!
+     * @param url    The URL from which the client will download the resource
+     *               pack. The string must contain only US-ASCII characters and should
+     *               be encoded as per RFC 1738.
+     * @param hash   The sha1 hash sum of the resource pack file which is used
+     *               to apply a cached version of the pack directly without downloading
+     *               if it is available. Hast to be 20 bytes long!
      * @param prompt The optional custom prompt message to be shown to client.
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
-     *     length restriction is an implementation specific arbitrary value.
+     *                                  length restriction is an implementation specific arbitrary value.
      * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
-     *     long.
+     *                                  long.
+     * @deprecated in favour of {@link #setResourcePack(String, byte[], Component, boolean)}
      */
     @Deprecated // Paper
     public void setResourcePack(@NotNull String url, @Nullable byte[] hash, @Nullable String prompt);
 
     // Paper start
+
     /**
      * Request that the player's client download and switch resource packs.
      * <p>
@@ -2087,18 +2082,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     pack correctly.
      * </ul>
      *
-     * @param url The URL from which the client will download the resource
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
-     * @param hash The sha1 hash sum of the resource pack file which is used
-     *     to apply a cached version of the pack directly without downloading
-     *     if it is available. Hast to be 20 bytes long!
+     * @param url    The URL from which the client will download the resource
+     *               pack. The string must contain only US-ASCII characters and should
+     *               be encoded as per RFC 1738.
+     * @param hash   The sha1 hash sum of the resource pack file which is used
+     *               to apply a cached version of the pack directly without downloading
+     *               if it is available. Hast to be 20 bytes long!
      * @param prompt The optional custom prompt message to be shown to client.
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
-     *     length restriction is an implementation specific arbitrary value.
+     *                                  length restriction is an implementation specific arbitrary value.
      * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
-     *     long.
+     *                                  long.
      */
     default void setResourcePack(@NotNull String url, byte @Nullable [] hash, net.kyori.adventure.text.@Nullable Component prompt) {
         this.setResourcePack(url, hash, prompt, false);
@@ -2134,19 +2129,19 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     pack correctly.
      * </ul>
      *
-     * @param url The URL from which the client will download the resource
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
-     * @param hash The sha1 hash sum of the resource pack file which is used
-     *     to apply a cached version of the pack directly without downloading
-     *     if it is available. Hast to be 20 bytes long!
+     * @param url   The URL from which the client will download the resource
+     *              pack. The string must contain only US-ASCII characters and should
+     *              be encoded as per RFC 1738.
+     * @param hash  The sha1 hash sum of the resource pack file which is used
+     *              to apply a cached version of the pack directly without downloading
+     *              if it is available. Hast to be 20 bytes long!
      * @param force If true, the client will be disconnected from the server
-     *     when it declines to use the resource pack.
+     *              when it declines to use the resource pack.
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
-     *     length restriction is an implementation specific arbitrary value.
+     *                                  length restriction is an implementation specific arbitrary value.
      * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
-     *     long.
+     *                                  long.
      */
     public void setResourcePack(@NotNull String url, @Nullable byte[] hash, boolean force);
 
@@ -2179,25 +2174,26 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     pack correctly.
      * </ul>
      *
-     * @param url The URL from which the client will download the resource
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
-     * @param hash The sha1 hash sum of the resource pack file which is used
-     *     to apply a cached version of the pack directly without downloading
-     *     if it is available. Hast to be 20 bytes long!
+     * @param url    The URL from which the client will download the resource
+     *               pack. The string must contain only US-ASCII characters and should
+     *               be encoded as per RFC 1738.
+     * @param hash   The sha1 hash sum of the resource pack file which is used
+     *               to apply a cached version of the pack directly without downloading
+     *               if it is available. Hast to be 20 bytes long!
      * @param prompt The optional custom prompt message to be shown to client.
-     * @param force If true, the client will be disconnected from the server
-     *     when it declines to use the resource pack.
+     * @param force  If true, the client will be disconnected from the server
+     *               when it declines to use the resource pack.
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
-     *     length restriction is an implementation specific arbitrary value.
+     *                                  length restriction is an implementation specific arbitrary value.
      * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
-     *     long.
+     *                                  long.
      */
     @Deprecated // Paper
     public void setResourcePack(@NotNull String url, @Nullable byte[] hash, @Nullable String prompt, boolean force);
 
     // Paper start
+
     /**
      * Request that the player's client download and switch resource packs.
      * <p>
@@ -2227,20 +2223,20 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     pack correctly.
      * </ul>
      *
-     * @param url The URL from which the client will download the resource
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
-     * @param hash The sha1 hash sum of the resource pack file which is used
-     *     to apply a cached version of the pack directly without downloading
-     *     if it is available. Hast to be 20 bytes long!
+     * @param url    The URL from which the client will download the resource
+     *               pack. The string must contain only US-ASCII characters and should
+     *               be encoded as per RFC 1738.
+     * @param hash   The sha1 hash sum of the resource pack file which is used
+     *               to apply a cached version of the pack directly without downloading
+     *               if it is available. Hast to be 20 bytes long!
      * @param prompt The optional custom prompt message to be shown to client.
-     * @param force If true, the client will be disconnected from the server
-     *     when it declines to use the resource pack.
+     * @param force  If true, the client will be disconnected from the server
+     *               when it declines to use the resource pack.
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
-     *     length restriction is an implementation specific arbitrary value.
+     *                                  length restriction is an implementation specific arbitrary value.
      * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
-     *     long.
+     *                                  long.
      */
     public void setResourcePack(@NotNull String url, byte @Nullable [] hash, net.kyori.adventure.text.@Nullable Component prompt, boolean force);
     // Paper end
@@ -2259,9 +2255,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param scoreboard New Scoreboard for the player
      * @throws IllegalArgumentException if scoreboard is null
      * @throws IllegalArgumentException if scoreboard was not created by the
-     *     {@link org.bukkit.scoreboard.ScoreboardManager scoreboard manager}
-     * @throws IllegalStateException if this is a player that is not logged
-     *     yet or has logged out
+     *                                  {@link org.bukkit.scoreboard.ScoreboardManager scoreboard manager}
+     * @throws IllegalStateException    if this is a player that is not logged
+     *                                  yet or has logged out
      */
     public void setScoreboard(@NotNull Scoreboard scoreboard) throws IllegalArgumentException, IllegalStateException;
 
@@ -2278,11 +2274,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Sets the {@link WorldBorder} visible to this Player.
      *
      * @param border the border to set, or null to set to the world border of
-     * the player's current world
-     *
+     *               the player's current world
      * @throws UnsupportedOperationException if setting the border to that of
-     * a world in which the player is not currently present.
-     *
+     *                                       a world in which the player is not currently present.
      * @see Server#createWorldBorder()
      */
     public void setWorldBorder(@Nullable WorldBorder border);
@@ -2293,8 +2287,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * the server. As soon as any of these values change on the server, changes sent
      * by this method will no longer be visible.
      *
-     * @param health the health. If 0.0, the client will believe it is dead
-     * @param foodLevel the food level
+     * @param health     the health. If 0.0, the client will believe it is dead
+     * @param foodLevel  the food level
      * @param saturation the saturation
      */
     public void sendHealthUpdate(double health, int foodLevel, float saturation);
@@ -2344,7 +2338,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Gets the number that health is scaled to for the client.
      *
      * @return the number that health would be scaled to for the client if
-     *     HealthScaling is set to true
+     * HealthScaling is set to true
      * @see Player#setHealthScale(double)
      * @see Player#setHealthScaled(boolean)
      */
@@ -2366,7 +2360,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param entity the entity to follow or null to reset
      * @throws IllegalStateException if the player is not in
-     * {@link GameMode#SPECTATOR}
+     *                               {@link GameMode#SPECTATOR}
      */
     public void setSpectatorTarget(@Nullable Entity entity);
 
@@ -2377,7 +2371,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * such. If the strings contain a new line, only the first line will be
      * sent. The titles will be displayed with the client's default timings.
      *
-     * @param title Title text
+     * @param title    Title text
      * @param subtitle Subtitle text
      * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
@@ -2393,11 +2387,11 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * will use the last value sent (or the defaults if no title has been
      * displayed).
      *
-     * @param title Title text
+     * @param title    Title text
      * @param subtitle Subtitle text
-     * @param fadeIn time in ticks for titles to fade in. Defaults to 10.
-     * @param stay time in ticks for titles to stay. Defaults to 70.
-     * @param fadeOut time in ticks for titles to fade out. Defaults to 20.
+     * @param fadeIn   time in ticks for titles to fade in. Defaults to 10.
+     * @param stay     time in ticks for titles to stay. Defaults to 70.
+     * @param fadeOut  time in ticks for titles to fade out. Defaults to 20.
      * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} or {@link #sendTitlePart(net.kyori.adventure.title.TitlePart, Object)}
      */
     @Deprecated // Paper - Adventure
@@ -2415,7 +2409,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param particle the particle to spawn
      * @param location the location to spawn at
-     * @param count the number of particles
+     * @param count    the number of particles
      */
     public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count);
 
@@ -2424,10 +2418,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * at the target location.
      *
      * @param particle the particle to spawn
-     * @param x the position on the x axis to spawn at
-     * @param y the position on the y axis to spawn at
-     * @param z the position on the z axis to spawn at
-     * @param count the number of particles
+     * @param x        the position on the x axis to spawn at
+     * @param y        the position on the y axis to spawn at
+     * @param z        the position on the z axis to spawn at
+     * @param count    the number of particles
      */
     public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count);
 
@@ -2435,12 +2429,12 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Spawns the particle (the number of times specified by count)
      * at the target location.
      *
-     * @param <T> type of particle data (see {@link Particle#getDataType()}
+     * @param <T>      type of particle data (see {@link Particle#getDataType()}
      * @param particle the particle to spawn
      * @param location the location to spawn at
-     * @param count the number of particles
-     * @param data the data to use for the particle or null,
-     *             the type of this depends on {@link Particle#getDataType()}
+     * @param count    the number of particles
+     * @param data     the data to use for the particle or null,
+     *                 the type of this depends on {@link Particle#getDataType()}
      */
     public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, @Nullable T data);
 
@@ -2449,14 +2443,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Spawns the particle (the number of times specified by count)
      * at the target location.
      *
-     * @param <T> type of particle data (see {@link Particle#getDataType()}
+     * @param <T>      type of particle data (see {@link Particle#getDataType()}
      * @param particle the particle to spawn
-     * @param x the position on the x axis to spawn at
-     * @param y the position on the y axis to spawn at
-     * @param z the position on the z axis to spawn at
-     * @param count the number of particles
-     * @param data the data to use for the particle or null,
-     *             the type of this depends on {@link Particle#getDataType()}
+     * @param x        the position on the x axis to spawn at
+     * @param y        the position on the y axis to spawn at
+     * @param z        the position on the z axis to spawn at
+     * @param count    the number of particles
+     * @param data     the data to use for the particle or null,
+     *                 the type of this depends on {@link Particle#getDataType()}
      */
     public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, @Nullable T data);
 
@@ -2468,10 +2462,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param particle the particle to spawn
      * @param location the location to spawn at
-     * @param count the number of particles
-     * @param offsetX the maximum random offset on the X axis
-     * @param offsetY the maximum random offset on the Y axis
-     * @param offsetZ the maximum random offset on the Z axis
+     * @param count    the number of particles
+     * @param offsetX  the maximum random offset on the X axis
+     * @param offsetY  the maximum random offset on the Y axis
+     * @param offsetZ  the maximum random offset on the Z axis
      */
     public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ);
 
@@ -2482,13 +2476,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * on each axis.
      *
      * @param particle the particle to spawn
-     * @param x the position on the x axis to spawn at
-     * @param y the position on the y axis to spawn at
-     * @param z the position on the z axis to spawn at
-     * @param count the number of particles
-     * @param offsetX the maximum random offset on the X axis
-     * @param offsetY the maximum random offset on the Y axis
-     * @param offsetZ the maximum random offset on the Z axis
+     * @param x        the position on the x axis to spawn at
+     * @param y        the position on the y axis to spawn at
+     * @param z        the position on the z axis to spawn at
+     * @param count    the number of particles
+     * @param offsetX  the maximum random offset on the X axis
+     * @param offsetY  the maximum random offset on the Y axis
+     * @param offsetZ  the maximum random offset on the Z axis
      */
     public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ);
 
@@ -2498,15 +2492,15 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * randomized positively and negatively by the offset parameters
      * on each axis.
      *
-     * @param <T> type of particle data (see {@link Particle#getDataType()}
+     * @param <T>      type of particle data (see {@link Particle#getDataType()}
      * @param particle the particle to spawn
      * @param location the location to spawn at
-     * @param count the number of particles
-     * @param offsetX the maximum random offset on the X axis
-     * @param offsetY the maximum random offset on the Y axis
-     * @param offsetZ the maximum random offset on the Z axis
-     * @param data the data to use for the particle or null,
-     *             the type of this depends on {@link Particle#getDataType()}
+     * @param count    the number of particles
+     * @param offsetX  the maximum random offset on the X axis
+     * @param offsetY  the maximum random offset on the Y axis
+     * @param offsetZ  the maximum random offset on the Z axis
+     * @param data     the data to use for the particle or null,
+     *                 the type of this depends on {@link Particle#getDataType()}
      */
     public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, @Nullable T data);
 
@@ -2516,17 +2510,17 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * randomized positively and negatively by the offset parameters
      * on each axis.
      *
-     * @param <T> type of particle data (see {@link Particle#getDataType()}
+     * @param <T>      type of particle data (see {@link Particle#getDataType()}
      * @param particle the particle to spawn
-     * @param x the position on the x axis to spawn at
-     * @param y the position on the y axis to spawn at
-     * @param z the position on the z axis to spawn at
-     * @param count the number of particles
-     * @param offsetX the maximum random offset on the X axis
-     * @param offsetY the maximum random offset on the Y axis
-     * @param offsetZ the maximum random offset on the Z axis
-     * @param data the data to use for the particle or null,
-     *             the type of this depends on {@link Particle#getDataType()}
+     * @param x        the position on the x axis to spawn at
+     * @param y        the position on the y axis to spawn at
+     * @param z        the position on the z axis to spawn at
+     * @param count    the number of particles
+     * @param offsetX  the maximum random offset on the X axis
+     * @param offsetY  the maximum random offset on the Y axis
+     * @param offsetZ  the maximum random offset on the Z axis
+     * @param data     the data to use for the particle or null,
+     *                 the type of this depends on {@link Particle#getDataType()}
      */
     public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, @Nullable T data);
 
@@ -2538,12 +2532,12 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param particle the particle to spawn
      * @param location the location to spawn at
-     * @param count the number of particles
-     * @param offsetX the maximum random offset on the X axis
-     * @param offsetY the maximum random offset on the Y axis
-     * @param offsetZ the maximum random offset on the Z axis
-     * @param extra the extra data for this particle, depends on the
-     *              particle used (normally speed)
+     * @param count    the number of particles
+     * @param offsetX  the maximum random offset on the X axis
+     * @param offsetY  the maximum random offset on the Y axis
+     * @param offsetZ  the maximum random offset on the Z axis
+     * @param extra    the extra data for this particle, depends on the
+     *                 particle used (normally speed)
      */
     public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra);
 
@@ -2554,15 +2548,15 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * on each axis.
      *
      * @param particle the particle to spawn
-     * @param x the position on the x axis to spawn at
-     * @param y the position on the y axis to spawn at
-     * @param z the position on the z axis to spawn at
-     * @param count the number of particles
-     * @param offsetX the maximum random offset on the X axis
-     * @param offsetY the maximum random offset on the Y axis
-     * @param offsetZ the maximum random offset on the Z axis
-     * @param extra the extra data for this particle, depends on the
-     *              particle used (normally speed)
+     * @param x        the position on the x axis to spawn at
+     * @param y        the position on the y axis to spawn at
+     * @param z        the position on the z axis to spawn at
+     * @param count    the number of particles
+     * @param offsetX  the maximum random offset on the X axis
+     * @param offsetY  the maximum random offset on the Y axis
+     * @param offsetZ  the maximum random offset on the Z axis
+     * @param extra    the extra data for this particle, depends on the
+     *                 particle used (normally speed)
      */
     public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra);
 
@@ -2572,17 +2566,17 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * randomized positively and negatively by the offset parameters
      * on each axis.
      *
-     * @param <T> type of particle data (see {@link Particle#getDataType()}
+     * @param <T>      type of particle data (see {@link Particle#getDataType()}
      * @param particle the particle to spawn
      * @param location the location to spawn at
-     * @param count the number of particles
-     * @param offsetX the maximum random offset on the X axis
-     * @param offsetY the maximum random offset on the Y axis
-     * @param offsetZ the maximum random offset on the Z axis
-     * @param extra the extra data for this particle, depends on the
-     *              particle used (normally speed)
-     * @param data the data to use for the particle or null,
-     *             the type of this depends on {@link Particle#getDataType()}
+     * @param count    the number of particles
+     * @param offsetX  the maximum random offset on the X axis
+     * @param offsetY  the maximum random offset on the Y axis
+     * @param offsetZ  the maximum random offset on the Z axis
+     * @param extra    the extra data for this particle, depends on the
+     *                 particle used (normally speed)
+     * @param data     the data to use for the particle or null,
+     *                 the type of this depends on {@link Particle#getDataType()}
      */
     public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data);
 
@@ -2592,19 +2586,19 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * randomized positively and negatively by the offset parameters
      * on each axis.
      *
-     * @param <T> type of particle data (see {@link Particle#getDataType()}
+     * @param <T>      type of particle data (see {@link Particle#getDataType()}
      * @param particle the particle to spawn
-     * @param x the position on the x axis to spawn at
-     * @param y the position on the y axis to spawn at
-     * @param z the position on the z axis to spawn at
-     * @param count the number of particles
-     * @param offsetX the maximum random offset on the X axis
-     * @param offsetY the maximum random offset on the Y axis
-     * @param offsetZ the maximum random offset on the Z axis
-     * @param extra the extra data for this particle, depends on the
-     *              particle used (normally speed)
-     * @param data the data to use for the particle or null,
-     *             the type of this depends on {@link Particle#getDataType()}
+     * @param x        the position on the x axis to spawn at
+     * @param y        the position on the y axis to spawn at
+     * @param z        the position on the z axis to spawn at
+     * @param count    the number of particles
+     * @param offsetX  the maximum random offset on the X axis
+     * @param offsetY  the maximum random offset on the Y axis
+     * @param offsetZ  the maximum random offset on the Z axis
+     * @param extra    the extra data for this particle, depends on the
+     *                 particle used (normally speed)
+     * @param data     the data to use for the particle or null,
+     *                 the type of this depends on {@link Particle#getDataType()}
      */
     public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data);
 
@@ -2628,6 +2622,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     public int getClientViewDistance();
 
     // Paper start
+
     /**
      * Gets the player's current locale.
      *
@@ -2635,9 +2630,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @NotNull java.util.Locale locale();
     // Paper end
+
     /**
      * Gets the player's estimated ping in milliseconds.
-     *
+     * <p>
      * In Vanilla this value represents a weighted average of the response time
      * to application layer ping packets sent. This value does not represent the
      * network round trip time and as such may have less granularity and be
@@ -2652,7 +2648,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
     /**
      * Gets the player's current locale.
-     *
+     * <p>
      * The value of the locale String is not defined properly.
      * <br>
      * The vanilla Minecraft client will use lowercase language / country pairs
@@ -2667,6 +2663,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     public String getLocale();
 
     // Paper start
+
     /**
      * Get whether the player can affect mob spawning
      *
@@ -2710,13 +2707,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param simulationDistance the player's new simulation distance
      */
     public void setSimulationDistance(int simulationDistance);
-    
+
     /**
      * Gets the no-ticking view distance for this player.
      * <p>
      * No-tick view distance is the view distance where chunks will load, however the chunks and their entities will not
      * be set to tick.
      * </p>
+     *
      * @return The no-tick view distance for this player.
      * @deprecated Use {@link #getViewDistance()}
      */
@@ -2729,6 +2727,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * No-tick view distance is the view distance where chunks will load, however the chunks and their entities will not
      * be set to tick.
      * </p>
+     *
      * @param viewDistance view distance in [2, 32] or -1
      * @deprecated Use {@link #setViewDistance(int)}
      */
@@ -2740,6 +2739,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * <p>
      * Sending view distance is the view distance where chunks will load in for players.
      * </p>
+     *
      * @return The sending view distance for this player.
      */
     public int getSendViewDistance();
@@ -2749,6 +2749,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * <p>
      * Sending view distance is the view distance where chunks will load in for players.
      * </p>
+     *
      * @param viewDistance view distance in [2, 32] or -1
      */
     public void setSendViewDistance(int viewDistance);
@@ -2771,7 +2772,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
     /**
      * Open a Sign for editing by the Player.
-     *
+     * <p>
      * The Sign must be in the same world as the player.
      *
      * @param sign The sign to edit
@@ -2782,7 +2783,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
     /**
      * Open a Sign for editing by the Player.
-     *
+     * <p>
      * The Sign must be placed in the same world as the player.
      *
      * @param sign The sign to edit
@@ -2809,7 +2810,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     @NotNull
     @Override
     default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {
-        return net.kyori.adventure.text.event.HoverEvent.showEntity(op.apply(net.kyori.adventure.text.event.HoverEvent.ShowEntity.of(this.getType().getKey(), this.getUniqueId(), this.displayName())));
+        return net.kyori.adventure.text.event.HoverEvent.showEntity(op.apply(net.kyori.adventure.text.event.HoverEvent.ShowEntity.of(this.getType()
+                .getKey(), this.getUniqueId(), this.displayName())));
     }
 
     /**
@@ -2832,14 +2834,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     within Minecraft, so players will have to relog to do so.
      * </ul>
      *
-     * @param url The URL from which the client will download the resource
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
+     * @param url  The URL from which the client will download the resource
+     *             pack. The string must contain only US-ASCII characters and should
+     *             be encoded as per RFC 1738.
      * @param hash A 40 character hexadecimal and lowercase SHA-1 digest of
-     *     the resource pack file.
+     *             the resource pack file.
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
-     *     length restriction is an implementation specific arbitrary value.
+     *                                  length restriction is an implementation specific arbitrary value.
      */
     void setResourcePack(@NotNull String url, @NotNull String hash);
 
@@ -2863,15 +2865,15 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     within Minecraft, so players will have to relog to do so.
      * </ul>
      *
-     * @param url The URL from which the client will download the resource
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
-     * @param hash A 40 character hexadecimal and lowercase SHA-1 digest of
-     *     the resource pack file.
+     * @param url      The URL from which the client will download the resource
+     *                 pack. The string must contain only US-ASCII characters and should
+     *                 be encoded as per RFC 1738.
+     * @param hash     A 40 character hexadecimal and lowercase SHA-1 digest of
+     *                 the resource pack file.
      * @param required Marks if the resource pack should be required by the client
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
-     *     length restriction is an implementation specific arbitrary value.
+     *                                  length restriction is an implementation specific arbitrary value.
      */
     void setResourcePack(@NotNull String url, @NotNull String hash, boolean required);
 
@@ -2895,29 +2897,29 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     within Minecraft, so players will have to relog to do so.
      * </ul>
      *
-     * @param url The URL from which the client will download the resource
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
-     * @param hash A 40 character hexadecimal and lowercase SHA-1 digest of
-     *     the resource pack file.
-     * @param required Marks if the resource pack should be required by the client
+     * @param url                The URL from which the client will download the resource
+     *                           pack. The string must contain only US-ASCII characters and should
+     *                           be encoded as per RFC 1738.
+     * @param hash               A 40 character hexadecimal and lowercase SHA-1 digest of
+     *                           the resource pack file.
+     * @param required           Marks if the resource pack should be required by the client
      * @param resourcePackPrompt A Prompt to be displayed in the client request
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
-     *     length restriction is an implementation specific arbitrary value.
+     *                                  length restriction is an implementation specific arbitrary value.
      */
     void setResourcePack(@NotNull String url, @NotNull String hash, boolean required, @Nullable net.kyori.adventure.text.Component resourcePackPrompt);
+
     /**
      * @return the most recent resource pack status received from the player,
-     *         or null if no status has ever been received from this player.
+     * or null if no status has ever been received from this player.
      */
     @Nullable
     org.bukkit.event.player.PlayerResourcePackStatusEvent.Status getResourcePackStatus();
 
     /**
      * @return the most recent resource pack hash received from the player,
-     *         or null if no hash has ever been received from this player.
-     *
+     * or null if no hash has ever been received from this player.
      * @deprecated This is no longer sent from the client and will always be null
      */
     @Nullable
@@ -2926,12 +2928,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
     /**
      * @return true if the last resource pack status received from this player
-     *         was {@link org.bukkit.event.player.PlayerResourcePackStatusEvent.Status#SUCCESSFULLY_LOADED}
+     * was {@link org.bukkit.event.player.PlayerResourcePackStatusEvent.Status#SUCCESSFULLY_LOADED}
      */
     boolean hasResourcePack();
 
     /**
      * Gets a copy of this players profile
+     *
      * @return The players profile object
      */
     @NotNull
@@ -2940,6 +2943,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Changes the PlayerProfile for this player. This will cause this player
      * to be reregistered to all clients that can currently see this player
+     *
      * @param profile The new profile to use
      */
     void setPlayerProfile(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile);
@@ -2967,8 +2971,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * @return the client option value of the player
      */
-    @NotNull
-    <T> T getClientOption(@NotNull com.destroystokyo.paper.ClientOption<T> option);
+    @NotNull <T> T getClientOption(@NotNull com.destroystokyo.paper.ClientOption<T> option);
 
     /**
      * Boost a Player that's {@link #isGliding()} using a {@link Firework}.
@@ -2978,7 +2981,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param firework The {@link Material#FIREWORK_ROCKET} to boost the player with
      * @return The {@link Firework} boosting the Player or null if the spawning of the entity was cancelled
      * @throws IllegalArgumentException if {@link #isGliding()} is false
-     * or if the {@code firework} isn't a {@link Material#FIREWORK_ROCKET}
+     *                                  or if the {@code firework} isn't a {@link Material#FIREWORK_ROCKET}
      */
     @Nullable
     Firework boostElytra(@NotNull ItemStack firework);
@@ -3007,7 +3010,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Removes custom chat completion suggestions that the client
      * suggests when typing in chat.
-     *
+     * <p>
      * Note: this only applies to previously added custom completions,
      * online player names are always suggested and cannot be removed.
      *
@@ -3064,7 +3067,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
         /**
          * Sends the component to the specified screen position of this player
          *
-         * @param position the screen position
+         * @param position  the screen position
          * @param component the components to send
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
@@ -3076,7 +3079,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
         /**
          * Sends an array of components as a single message to the specified screen position of this player
          *
-         * @param position the screen position
+         * @param position   the screen position
          * @param components the components to send
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
@@ -3088,8 +3091,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
         /**
          * Sends the component to the specified screen position of this player
          *
-         * @param position the screen position
-         * @param sender the sender of the message
+         * @param position  the screen position
+         * @param sender    the sender of the message
          * @param component the components to send
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
@@ -3101,8 +3104,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
         /**
          * Sends an array of components as a single message to the specified screen position of this player
          *
-         * @param position the screen position
-         * @param sender the sender of the message
+         * @param position   the screen position
+         * @param sender     the sender of the message
          * @param components the components to send
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
@@ -3114,15 +3117,17 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
         // Paper start
         public int getPing() {
-            throw new UnsupportedOperationException( "Not supported yet." );
+            throw new UnsupportedOperationException("Not supported yet.");
         }
         // Paper end
     }
 
     // Paper start - brand support
+
     /**
      * Returns player's client brand name. If the client didn't send this information, the brand name will be null.<br>
      * For the Notchian client this name defaults to <code>vanilla</code>. Some modified clients report other names such as <code>forge</code>.<br>
+     *
      * @return client brand name
      */
     @Nullable
@@ -3130,10 +3135,11 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     // Paper end
 
     // Paper start - Teleport API
+
     /**
      * Sets the player's rotation.
      *
-     * @param yaw the yaw
+     * @param yaw   the yaw
      * @param pitch the pitch
      */
     @org.jetbrains.annotations.ApiStatus.Experimental
@@ -3142,9 +3148,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Causes the player to look towards the given position.
      *
-     * @param x x coordinate
-     * @param y y coordinate
-     * @param z z coordinate
+     * @param x            x coordinate
+     * @param y            y coordinate
+     * @param z            z coordinate
      * @param playerAnchor What part of the player should face the given position
      */
     @org.jetbrains.annotations.ApiStatus.Experimental
@@ -3153,7 +3159,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Causes the player to look towards the given position.
      *
-     * @param position Position to look at in the player's current world
+     * @param position     Position to look at in the player's current world
      * @param playerAnchor What part of the player should face the given position
      */
     @org.jetbrains.annotations.ApiStatus.Experimental
@@ -3164,7 +3170,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     /**
      * Causes the player to look towards the given entity.
      *
-     * @param entity Entity to look at
+     * @param entity       Entity to look at
      * @param playerAnchor What part of the player should face the entity
      * @param entityAnchor What part of the entity the player should face
      */
@@ -3173,6 +3179,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     // Paper end - Teleport API
 
     // Paper start
+
     /**
      * Displays elder guardian effect with a sound
      *
