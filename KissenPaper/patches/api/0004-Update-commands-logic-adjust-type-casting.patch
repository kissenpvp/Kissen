From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Fri, 11 Aug 2023 16:31:02 +0200
Subject: [PATCH] Update commands logic, adjust type casting

Made updates in the command execution logic and adjusted type casting. Removed unnecessary import statements in KissenPaperAbstractCommand.java and KissenPaperCommandImplementation.java. Made changes in the getExecutor method in KissenPaperAbstractCommand.java to ensure not null. Removed a forced type cast in KissenPaperAbstractCommand.java.

These changes were necessary to reduce redundancy, improve code readability and ensure not null safety. With these changes, unnecessary reliance on type casting is reduced and more efficient solutions are used.

diff --git a/src/main/java/net/kissenpvp/paper/api/command/KissenCommand.java b/src/main/java/net/kissenpvp/paper/api/command/KissenCommand.java
index d83ddd4770455443287a0c1abaf46c5e48b5be82..91c0ef1bec76480ca2ed4f50a30d4b767ad3c02d 100644
--- a/src/main/java/net/kissenpvp/paper/api/command/KissenCommand.java
+++ b/src/main/java/net/kissenpvp/paper/api/command/KissenCommand.java
@@ -3,7 +3,29 @@ package net.kissenpvp.paper.api.command;
 import org.bukkit.command.Command;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents an abstract, base command structure for the Kissen framework.
+ * <p>
+ * This base command class holds essential information about a command and serves as
+ * a foundation for all specific commands within the Kissen command hierarchy.
+ * The structure encapsulates the basic behavior and properties of a command,
+ * such as its name.
+ * <p>
+ * Subclasses should extend this class to provide specific implementations for each command.
+ *
+ * @see Command
+ */
 public abstract class KissenCommand extends Command {
+
+    /**
+     * Constructs a new command with the specified name.
+     *
+     * @param name The name of the command. It must not be null.
+     *             This is the primary identifier for the command and is used in command
+     *             processing to map user inputs to the corresponding command.
+     * @throws NullPointerException if the {@code name} parameter is null.
+     * @see Command
+     */
     protected KissenCommand(@NotNull String name) {
         super(name);
     }
diff --git a/src/main/java/net/kissenpvp/paper/api/command/PaperCommandImplementation.java b/src/main/java/net/kissenpvp/paper/api/command/PaperCommandImplementation.java
index 42170ae0de1abc7769c0fbe0b25a882e91740326..528a26682506b24ed2e3c57c63fce70422521d29 100644
--- a/src/main/java/net/kissenpvp/paper/api/command/PaperCommandImplementation.java
+++ b/src/main/java/net/kissenpvp/paper/api/command/PaperCommandImplementation.java
@@ -2,21 +2,57 @@ package net.kissenpvp.paper.api.command;
 
 import net.kissenpvp.core.api.base.Implementation;
 import net.kissenpvp.core.api.command.executor.TabCompleterExecutor;
-import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
 import java.util.Optional;
 
+/**
+ * Interface for the specific implementation of command operations for the Paper API.
+ * <p>
+ * This interface extends the {@link Implementation} and provides methods related to the command handling
+ * in the context of the Paper API. It outlines the operations for command retrieval, registration, tab completion, and de-registration.
+ *
+ * @see Implementation
+ */
 public interface PaperCommandImplementation extends Implementation {
 
-    @NotNull Optional<Command> getCommand(@NotNull String name);
-
+    /**
+     * Retrieves a command by its name.
+     *
+     * @param name The name of the command. Must not be null.
+     * @return An {@link Optional} that contains the Command if it exists; otherwise, it will be empty.
+     * @throws NullPointerException If the {@code name} parameter is null.
+     */
+    @NotNull Optional<KissenCommand> getCommand(@NotNull String name);
+
+    /**
+     * Registers one or more objects that contain command methods with the specified {@link Plugin}.
+     *
+     * @param plugin  The plugin to register the commands with. Must not be null.
+     * @param objects The object(s) containing the commands to be registered. Must not be null.
+     * @throws NullPointerException If any of the parameters is null.
+     */
     void registerCommand(@NotNull Plugin plugin, @NotNull Object... objects);
 
+    /**
+     * Registers a tab completion executor for a command with the given name.
+     *
+     * @param plugin               The plugin to register the tab completer with. Must not be null.
+     * @param name                 The name of the command to associate the tab completer with. Must not be null.
+     * @param tabCompleterExecutor The tab completion executor to register. Must not be null.
+     * @throws NullPointerException If any of the parameters is null.
+     */
     void registerCompleter(@NotNull Plugin plugin, @NotNull String name, @NotNull TabCompleterExecutor<CommandSender> tabCompleterExecutor);
 
+    /**
+     * Unregisters a command by its name.
+     *
+     * @param name The name of the command to unregister. Must not be null.
+     * @return true if the command was found and unregistered successfully, false otherwise.
+     * @throws NullPointerException If the {@code name} parameter is null.
+     */
     boolean unregisterCommand(@NotNull String name);
 
 }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index ace3b03163de85920dcbd4219df75807ca6eff3b..cddb784cfb1e671c94697b046ec8ba83326f41e5 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -2,22 +2,9 @@ package org.bukkit.plugin.java;
 
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.io.Reader;
-import java.net.URL;
-import java.net.URLConnection;
-import java.text.MessageFormat;
-import java.util.List;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import net.kissenpvp.core.api.base.Kissen;
 import net.kissenpvp.core.api.message.localization.LocalizationImplementation;
+import net.kissenpvp.paper.api.command.PaperCommandImplementation;
 import org.bukkit.Bukkit;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
@@ -30,10 +17,17 @@ import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.plugin.PluginBase;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
-import org.bukkit.plugin.PluginLogger;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.*;
+import java.net.URL;
+import java.net.URLConnection;
+import java.text.MessageFormat;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 /**
  * Represents a Java plugin and its main class. It contains fundamental methods
  * and fields for a plugin to be loaded and work properly. This is an indirect
@@ -55,7 +49,8 @@ public abstract class JavaPlugin extends PluginBase {
 
     public JavaPlugin() {
         // Paper start
-        if (this.getClass().getClassLoader() instanceof io.papermc.paper.plugin.provider.classloader.ConfiguredPluginClassLoader configuredPluginClassLoader) {
+        if (this.getClass()
+                .getClassLoader() instanceof io.papermc.paper.plugin.provider.classloader.ConfiguredPluginClassLoader configuredPluginClassLoader) {
             configuredPluginClassLoader.init(this);
         } else {
             throw new IllegalStateException("JavaPlugin requires to be created by a valid classloader.");
@@ -304,15 +299,17 @@ public abstract class JavaPlugin extends PluginBase {
 
     // Paper start
     private static class DummyPluginLoaderImplHolder {
-        private static final PluginLoader INSTANCE =  net.kyori.adventure.util.Services.service(PluginLoader.class)
-            .orElseThrow();
+        private static final PluginLoader INSTANCE = net.kyori.adventure.util.Services.service(PluginLoader.class)
+                .orElseThrow();
     }
+
     public final void init(@NotNull PluginLoader loader, @NotNull Server server, @NotNull PluginDescriptionFile description, @NotNull File dataFolder, @NotNull File file, @NotNull ClassLoader classLoader) {
         init(server, description, dataFolder, file, classLoader, description, com.destroystokyo.paper.utils.PaperPluginLogger.getLogger(description));
         this.pluginMeta = description;
     }
+
     public final void init(@NotNull Server server, @NotNull PluginDescriptionFile description, @NotNull File dataFolder, @NotNull File file, @NotNull ClassLoader classLoader, @Nullable io.papermc.paper.plugin.configuration.PluginMeta configuration, @NotNull Logger logger) {
-    // Paper end
+        // Paper end
         this.loader = DummyPluginLoaderImplHolder.INSTANCE; // Paper
         this.server = server;
         this.file = file;
@@ -355,7 +352,8 @@ public abstract class JavaPlugin extends PluginBase {
         PluginCommand command = getServer().getPluginCommand(alias);
 
         if (command == null || command.getPlugin() != this) {
-            command = getServer().getPluginCommand(description.getName().toLowerCase(java.util.Locale.ENGLISH) + ":" + alias);
+            command = getServer().getPluginCommand(description.getName()
+                    .toLowerCase(java.util.Locale.ENGLISH) + ":" + alias);
         }
 
         if (command != null && command.getPlugin() == this) {
@@ -366,6 +364,25 @@ public abstract class JavaPlugin extends PluginBase {
     }
 
     // KissenPaper start
+
+    /**
+     * Registers one or multiple object(s) containing command method(s).
+     * <p>
+     * This method scans the provided objects for methods annotated with {@code CommandData},
+     * and registers them as commands using the PaperCommandImplementation.
+     * These commands will then be ready for execution by {@link CommandSender}.
+     *
+     * @param command an array of objects. Each Object can contain one or more methods
+     *                annotated with {@code CommandData}, each representing a specific command.
+     * @throws NullPointerException if the {@code command} parameter is null.
+     * @see PaperCommandImplementation
+     * @see net.kissenpvp.core.api.command.annotations.CommandData
+     */
+    public void registerCommands(@NotNull Object... command) {
+        PaperCommandImplementation paperCommandImplementation = getKissen().getImplementation(PaperCommandImplementation.class);
+        paperCommandImplementation.registerCommand(this, command);
+    }
+
     @Override
     public @NotNull String getFullName() {
         return description.getFullName();
@@ -429,19 +446,19 @@ public abstract class JavaPlugin extends PluginBase {
      * does not extend the class, where the intended plugin would have
      * resided in a different jar / classloader.
      *
-     * @param <T> a class that extends JavaPlugin
+     * @param <T>   a class that extends JavaPlugin
      * @param clazz the class desired
      * @return the plugin that provides and implements said class
      * @throws IllegalArgumentException if clazz is null
      * @throws IllegalArgumentException if clazz does not extend {@link
-     *     JavaPlugin}
-     * @throws IllegalStateException if clazz was not provided by a plugin,
-     *     for example, if called with
-     *     <code>JavaPlugin.getPlugin(JavaPlugin.class)</code>
-     * @throws IllegalStateException if called from the static initializer for
-     *     given JavaPlugin
-     * @throws ClassCastException if plugin that provided the class does not
-     *     extend the class
+     *                                  JavaPlugin}
+     * @throws IllegalStateException    if clazz was not provided by a plugin,
+     *                                  for example, if called with
+     *                                  <code>JavaPlugin.getPlugin(JavaPlugin.class)</code>
+     * @throws IllegalStateException    if called from the static initializer for
+     *                                  given JavaPlugin
+     * @throws ClassCastException       if plugin that provided the class does not
+     *                                  extend the class
      */
     @NotNull
     public static <T extends JavaPlugin> T getPlugin(@NotNull Class<T> clazz) {
@@ -467,10 +484,10 @@ public abstract class JavaPlugin extends PluginBase {
      * @param clazz a class belonging to a plugin
      * @return the plugin that provided the class
      * @throws IllegalArgumentException if the class is not provided by a
-     *     JavaPlugin
+     *                                  JavaPlugin
      * @throws IllegalArgumentException if class is null
-     * @throws IllegalStateException if called from the static initializer for
-     *     given JavaPlugin
+     * @throws IllegalStateException    if called from the static initializer for
+     *                                  given JavaPlugin
      */
     @NotNull
     public static JavaPlugin getProvidingPlugin(@NotNull Class<?> clazz) {
