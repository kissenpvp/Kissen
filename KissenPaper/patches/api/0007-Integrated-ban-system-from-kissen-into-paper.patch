From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivo Quiring <falk.quiring@gmail.com>
Date: Sun, 7 Jan 2024 15:22:01 +0100
Subject: [PATCH] Integrated ban system from kissen into paper


diff --git a/src/main/java/net/kissenpvp/paper/api/ban/Ban.java b/src/main/java/net/kissenpvp/paper/api/ban/Ban.java
new file mode 100644
index 0000000000000000000000000000000000000000..c992f4812e6904e8a18629bbe3e88d237ffed855
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/ban/Ban.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.ban;
+
+import net.kissenpvp.core.api.ban.AbstractBan;
+
+/**
+ * Interface for a Paper-specific ban.
+ * <p>
+ * This interface extends the {@link AbstractBan} and doesn't introduce any new methods; it merely represents a
+ * specialized version of a ban within the context of the Paper API.
+ * <p>
+ * All methods inherited from {@link AbstractBan} maintain their original functionality in the Paper API context.
+ *
+ * @see AbstractBan
+ */
+public interface Ban extends AbstractBan {}
diff --git a/src/main/java/net/kissenpvp/paper/api/ban/BanImplementation.java b/src/main/java/net/kissenpvp/paper/api/ban/BanImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..240c4788cc90898a36f9516bbb966ec340535f48
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/ban/BanImplementation.java
@@ -0,0 +1,113 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.ban;
+
+import net.kissenpvp.core.api.ban.AbstractBanImplementation;
+import net.kissenpvp.core.api.ban.BanType;
+import net.kissenpvp.core.api.database.meta.BackendException;
+import net.kissenpvp.core.api.networking.client.entitiy.ServerEntity;
+import net.kissenpvp.paper.api.base.Context;
+import net.kyori.adventure.text.Component;
+import org.bukkit.ban.ProfileBanList;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Optional;
+import java.util.Set;
+import java.util.UUID;
+
+/**
+ * Interface for Paper-specific ban implementation.
+ * <p>
+ * This interface extends the {@link AbstractBanImplementation} and specializes the type for {@link Ban} and {@link Punishment}.
+ * This interface further defines methods to get punishment details within a Paper context.
+ *
+ * @see AbstractBanImplementation
+ * @see Ban
+ * @see Punishment
+ */
+public interface BanImplementation extends AbstractBanImplementation<Ban, Punishment>, ProfileBanList
+{
+    /**
+     * Returns an unmodifiable set of all punishments applied in the specified context.
+     *
+     * @param context The context from which to retrieve punishments.
+     * @return An unmodifiable set containing all punishments in the context.
+     * @throws BackendException if an error occurs when retrieving the punishment data.
+     */
+    @NotNull @Unmodifiable Set<Punishment> getPunishmentSet(@NotNull Context context) throws BackendException;
+
+    /**
+     * Returns an unmodifiable set of all punishments applied to the player with the given UUID within the specified context.
+     *
+     * @param totalID The UUID of the player for whom to retrieve the punishment data.
+     * @param context The context from which to retrieve punishments.
+     * @return An unmodifiable set containing all punishments for the player in the context.
+     * @throws BackendException if an error occurs when retrieving the punishment data.
+     */
+    @NotNull @Unmodifiable Set<Punishment> getPunishmentSet(@NotNull UUID totalID, @NotNull Context context) throws BackendException;
+
+    /**
+     * Returns the most recent punishment applied to the player with the given UUID within the specified context, if such a punishment exists.
+     *
+     * @param totalID The UUID of the player for whom to retrieve the latest punishment.
+     * @param context The context from which to retrieve the punishment.
+     * @return An Optional containing the latest punishment if it exists, or Optional.empty() otherwise.
+     * @throws BackendException if an error occurs when retrieving the punishment data.
+     */
+    @NotNull Optional<Punishment> getLatestPunishment(@NotNull UUID totalID, @NotNull Context context) throws BackendException;
+
+    /**
+     * Returns the most recent punishment of the specified type applied to the player with the given UUID within the specified context, if such a punishment exists.
+     *
+     * @param totalID The UUID of the player for whom to retrieve the latest punishment.
+     * @param banType The type of ban to search for.
+     * @param context The context from which to retrieve the punishment.
+     * @return An Optional containing the latest punishment of the required type if it exists, or Optional.empty() otherwise.
+     * @throws BackendException if an error occurs when retrieving the punishment data.
+     */
+    @NotNull Optional<Punishment> getLatestPunishment(@NotNull UUID totalID, @NotNull BanType banType, @NotNull Context context) throws BackendException;
+
+    /**
+     * Applies a punishment to the player with the specified UUID.
+     * <p>
+     * This method creates and returns a new instance of {@link Punishment} on the specified player,
+     * based on the given parameters. The new punishment is persistently stored in the backend.
+     *
+     * @param totalID The UUID of the player to be punished.
+     * @param ban The {@link Ban} instance representing the specifications of the punishment.
+     * @param banOperator The operator who is applying the punishment.
+     * @param reason The reason for the punishment. This can be null.
+     * @param context The context in which the punishment is being applied.
+     * @return The created {@link Punishment} instance.
+     * @throws BackendException if an error occurs when trying to create or persist the punishment in the backend.
+     */
+    @NotNull
+    Punishment punish(@NotNull UUID totalID, @NotNull Ban ban, @NotNull ServerEntity banOperator, @Nullable Component reason, @NotNull Context context) throws BackendException;
+
+    @NotNull
+    Punishment punish(@NotNull UUID totalID, @NotNull Ban ban, @NotNull ServerEntity banOperator, @NotNull Context context) throws BackendException;
+
+    @NotNull
+    Punishment punish(@NotNull UUID totalID, @NotNull Ban ban, @NotNull ServerEntity banOperator, boolean apply, @NotNull Context context) throws BackendException;
+
+    @NotNull
+    Punishment punish(@NotNull UUID totalID, @NotNull Ban ban, @NotNull ServerEntity banOperator, boolean apply, @Nullable Component reason, @NotNull Context context) throws BackendException;
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/ban/BanParser.java b/src/main/java/net/kissenpvp/paper/api/ban/BanParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..b927ba75cd55b0b41b4995aa799307195f986b96
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/ban/BanParser.java
@@ -0,0 +1,58 @@
+package net.kissenpvp.paper.api.ban;
+
+import net.kissenpvp.core.api.ban.AbstractBan;
+import net.kissenpvp.core.api.ban.exception.NonexistentBanException;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.command.exception.deserialization.DeserializationException;
+import net.kissenpvp.paper.api.command.ArgumentParser;
+import net.kissenpvp.paper.api.command.CommandExceptionHandler;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.Optional;
+import java.util.stream.Collectors;
+
+public class BanParser implements ArgumentParser<Ban>, CommandExceptionHandler<NonexistentBanException> {
+
+    @Override
+    public @NotNull String serialize(@NotNull Ban object) {
+        return String.valueOf(object.getID());
+    }
+
+    @Override
+    public @NotNull Ban deserialize(@NotNull String input) {
+        BanImplementation paperBanImplementation = Bukkit.getKissen().getImplementation(BanImplementation.class);
+
+        Optional<Ban> paperBan = Optional.empty();
+        try
+        {
+            paperBan = paperBanImplementation.getBan(Integer.parseInt(input));
+        } catch (NumberFormatException ignored) {}
+
+        // must be orElse get, otherwise it will execute it even paperBan is not null and might throw an DeserializationException
+        return paperBan.orElseGet(() -> paperBanImplementation.getBanSet().stream()
+                        .filter(ban -> ban.getName().equals(input)).findFirst()
+                        .orElseThrow(() -> new DeserializationException(new NonexistentBanException(input))));
+    }
+
+    @Override
+    public @Nullable String argumentName()
+    {
+        return "banid";
+    }
+
+    @Override
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload) {
+        return Bukkit.getKissen().getImplementation(BanImplementation.class).getBanSet().stream().map(AbstractBan::getID).map(String::valueOf).collect(Collectors.toSet());
+    }
+
+    @Override
+    public boolean handle(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull NonexistentBanException throwable) {
+        commandPayload.getSender().sendMessage(Component.translatable("server.ban.invalid", Component.text(throwable.getBan())));
+        return true;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/ban/Punishment.java b/src/main/java/net/kissenpvp/paper/api/ban/Punishment.java
new file mode 100644
index 0000000000000000000000000000000000000000..6975d5845e8947031d478333341b0ab485b47113
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/ban/Punishment.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.ban;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import net.kissenpvp.core.api.ban.AbstractPunishment;
+import org.bukkit.BanEntry;
+import org.bukkit.entity.Player;
+
+/**
+ * Represents a punishment applied to a Player within Paper-specific context.
+ * <p>
+ * This interface is an extension of the {@link AbstractPunishment} interface specific to Player instances.
+ * It defines the contract for any kind of punishment that can be applied to a Player in the game
+ * or application built on the Paper platform.
+ * <p>
+ * The specific methods of punishment and their behaviour on a Player are defined in the classes that
+ * implement this interface, in accordance with the specifications of the {@link AbstractPunishment} interface.
+ *
+ * @see AbstractPunishment
+ */
+public interface Punishment extends AbstractPunishment<Player>, BanEntry<PlayerProfile> {}
diff --git a/src/main/java/net/kissenpvp/paper/api/ban/PunishmentParser.java b/src/main/java/net/kissenpvp/paper/api/ban/PunishmentParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..b4a82ddae8acc9ab4b3578fa5f5b9a626939ab54
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/ban/PunishmentParser.java
@@ -0,0 +1,44 @@
+package net.kissenpvp.paper.api.ban;
+
+import net.kissenpvp.core.api.ban.AbstractPunishment;
+import net.kissenpvp.core.api.ban.exception.NonexistentPunishmentException;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.paper.api.command.ArgumentParser;
+import net.kissenpvp.paper.api.command.CommandExceptionHandler;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.stream.Collectors;
+
+public class PunishmentParser implements ArgumentParser<Punishment>, CommandExceptionHandler<NonexistentPunishmentException> {
+    @Override
+    public @NotNull String serialize(@NotNull Punishment object) {
+        return object.getID();
+    }
+
+    @Override
+    public @NotNull Punishment deserialize(@NotNull String input) {
+        return Bukkit.getKissen().getImplementation(BanImplementation.class).getPunishmentSet().stream().filter(punishment -> punishment.getID().equals(input)).findFirst().orElseThrow(() -> new NonexistentPunishmentException(input));
+    }
+
+    @Override
+    public @Nullable String argumentName()
+    {
+        return "punishmentid";
+    }
+
+    @Override
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload) {
+        return Bukkit.getKissen().getImplementation(BanImplementation.class).getPunishmentSet().stream().map(AbstractPunishment::getID).collect(Collectors.toSet());
+    }
+
+    @Override
+    public boolean handle(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull NonexistentPunishmentException throwable) {
+        commandPayload.getSender().sendMessage(Component.translatable("server.ban.punishment.invalid", Component.text(throwable.getPunishment())));
+        return true;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/ban/warn/Warn.java b/src/main/java/net/kissenpvp/paper/api/ban/warn/Warn.java
new file mode 100644
index 0000000000000000000000000000000000000000..2c7f4e0f4e71f6f70f615c1feab4ca9e59a63da6
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/ban/warn/Warn.java
@@ -0,0 +1,6 @@
+package net.kissenpvp.paper.api.ban.warn;
+
+import net.kissenpvp.core.api.user.AbstractWarn;
+import net.kissenpvp.paper.api.ban.Ban;
+
+public interface Warn extends AbstractWarn<Ban> {}
diff --git a/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java
index b4dcbd72371ee6a9e55ed58c0d08700f0faec8ea..ecb34ebdac02d0750ec98edcb82de3b107945650 100644
--- a/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java
+++ b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java
@@ -24,7 +24,7 @@ import net.kissenpvp.core.api.networking.client.entitiy.ServerEntity;
 import net.kissenpvp.core.api.time.AccurateDuration;
 import net.kissenpvp.core.api.user.User;
 import net.kissenpvp.paper.api.ban.Punishment;
-import net.kissenpvp.paper.api.ban.warn.PaperWarn;
+import net.kissenpvp.paper.api.ban.warn.Warn;
 import net.kissenpvp.paper.api.base.Context;
 import net.kissenpvp.paper.api.permission.PaperPermissible;
 import net.kissenpvp.paper.api.permission.PermissibleOverriddenException;
@@ -56,11 +56,13 @@ public interface PaperPlayerClient extends PlayerClient<Permission, PlayerRank,
 
     <X> @NotNull BoundPlayerSetting<X> getSetting(@NotNull Class<? extends PlayerSetting<X>> settingClass, @NotNull Context context);
 
-    @NotNull PaperWarn warn(@NotNull AbstractBan ban, @NotNull ServerEntity warnOperator);
+    @NotNull
+    Warn warn(@NotNull AbstractBan ban, @NotNull ServerEntity warnOperator);
 
-    @NotNull PaperWarn warn(@NotNull AbstractBan ban, @NotNull ServerEntity warnOperator, @Nullable Component reason);
+    @NotNull
+    Warn warn(@NotNull AbstractBan ban, @NotNull ServerEntity warnOperator, @Nullable Component reason);
 
-    @NotNull @Unmodifiable List<PaperWarn> getWarnHistory();
+    @NotNull @Unmodifiable List<Warn> getWarnHistory();
 
     void clearActiveWarns();
 }
diff --git a/src/main/java/org/bukkit/event/Event.java b/src/main/java/org/bukkit/event/Event.java
index 8ec56cd6b8e0f5c5dd8c7c88b4671e18dcf109d0..e2db4b4e3c04b408a5ff5d5a464b2b7f26d44a46 100644
--- a/src/main/java/org/bukkit/event/Event.java
+++ b/src/main/java/org/bukkit/event/Event.java
@@ -12,7 +12,8 @@ import org.jetbrains.annotations.NotNull;
  * @see PluginManager#callEvent(Event)
  * @see PluginManager#registerEvents(Listener,Plugin)
  */
-public abstract class Event {
+public abstract class Event implements net.kissenpvp.core.api.event.EventClass
+{
     private String name;
     private final boolean async;
 
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 1ce2c17ac0c81481f8d96d146a778044b06faa5f..8021c7f7a0e32f7d4239f56944be80f8395f267f 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -112,6 +112,13 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
      */
     public void callEvent(@NotNull net.kissenpvp.core.api.event.EventClass event) throws IllegalStateException; // KissenPaper - integrate unified event system
 
+    // KissenPaper start - keep compatibility with plugins
+    default void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin)
+    {
+        registerEvents((net.kissenpvp.core.api.event.EventListener<?>) listener, plugin);
+    }
+    // KissenPaper end - keep compatibility with plugins
+
     /**
      * Registers all the events in the given listener class
      *
