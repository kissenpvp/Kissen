From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Initial Source <auto@mated.null>
Date: Wed, 18 Oct 2023 13:50:57 +0200
Subject: [PATCH] Adjusted gradle script


diff --git a/build.gradle.kts b/build.gradle.kts
index 58da26ad2f128ba0b66f86820f60853f4be352f0..014109a5c455c3ff2905b177c4e3b33909c736f7 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -13,8 +13,15 @@ configurations.named(log4jPlugins.compileClasspathConfigurationName) {
 val alsoShade: Configuration by configurations.creating
 
 dependencies {
-    implementation(project(":paper-api"))
-    implementation(project(":paper-mojangapi"))
+    // KissenPaper start
+//    implementation(project(":paper-api"))
+//    implementation(project(":paper-mojangapi"))
+    implementation(project(":kissenpaper:kissenpaper-api"))
+    implementation("io.papermc.paper:paper-mojangapi:${project.version}") {
+        exclude("io.papermc.paper", "paper-api")
+    }
+    // KissenPaper end
+
     // Paper start
     implementation("org.jline:jline-terminal-jansi:3.21.0")
     implementation("net.minecrell:terminalconsoleappender:1.3.0")
@@ -51,6 +58,11 @@ dependencies {
     runtimeOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.9.18")
     runtimeOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.9.18")
 
+    // KissenPaper start
+    implementation(project(":kissen-api") )
+    implementation(project(":kissen-source") )
+    // KissenPaper end
+
     testImplementation("io.github.classgraph:classgraph:4.8.47") // Paper - mob goal test
     testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
     testImplementation("org.hamcrest:hamcrest:2.2")
diff --git a/src/main/java/net/kissenpvp/paper/user/UserSettingCommand.java b/src/main/java/net/kissenpvp/paper/user/UserSettingCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..120aaad68d1f7a3a94f05ead14e48a9a78a4f731
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/user/UserSettingCommand.java
@@ -0,0 +1,97 @@
+package net.kissenpvp.paper.user;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.command.annotations.CommandData;
+import net.kissenpvp.core.api.command.annotations.TabCompleter;
+import net.kissenpvp.core.api.user.UserImplementation;
+import net.kissenpvp.core.api.user.exception.UnauthorizedException;
+import net.kissenpvp.core.api.user.usersetttings.PlayerSetting;
+import net.kissenpvp.core.api.user.usersetttings.UserValue;
+import net.kissenpvp.core.user.usersettings.IllegalSettingException;
+import net.kissenpvp.core.user.usersettings.KissenUserBoundSettings;
+import net.kissenpvp.paper.api.command.PaperCommandExceptionHandler;
+import net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.UUID;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class UserSettingCommand implements PaperCommandExceptionHandler<IllegalSettingException>
+{
+
+    @CommandData("setting")
+    public void settingCommand(@NotNull CommandPayload<CommandSender> sender, @NotNull String setting, @NotNull String value) throws UnauthorizedException
+    {
+        sender.getSender().sendMessage(handleUnknownType(sender, deserialize(setting), value));
+    }
+
+    @TabCompleter(command = "setting")
+    public @NotNull Collection<String> settingCommand(@NotNull CommandPayload<CommandSender> payload)
+    {
+        try
+        {
+            if(payload.getArguments().length < 2)
+            {
+                return tabCompletion(payload);
+            }
+
+            PlayerSetting<?> playerSetting = deserialize(payload.getArguments()[0]);
+            Stream<? extends @NotNull UserValue<?>> stream = Arrays.stream(playerSetting.getPossibleValues());
+            return stream.map(value -> castUnknownValue(value, playerSetting)).collect(Collectors.toSet());
+        } catch (IllegalSettingException ignored) {}
+        return Collections.EMPTY_SET;
+    }
+
+    private <T> @NotNull String castUnknownValue(Object value, @NotNull PlayerSetting<T> playerSetting) {
+        return playerSetting.serialize(((UserValue<T>) value).value());
+    }
+
+    private <T> @NotNull Component handleUnknownType(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull PlayerSetting<T> settingsKey, @NotNull String value) throws UnauthorizedException
+    {
+        try
+        {
+            PaperPlayerClient player = (PaperPlayerClient) commandPayload.getSender();
+            UUID uuid = player.getUniqueId();
+            KissenUserBoundSettings<T> kissenUserBoundSettings = new KissenUserBoundSettings<>(settingsKey, uuid);
+
+            T newValue = value.equalsIgnoreCase("reset") ? settingsKey.getDefaultValue() : settingsKey.deserialize(value);
+            kissenUserBoundSettings.setValue(newValue);
+
+            return Component.text("Ist geändert");
+        }
+        catch (ClassCastException | IllegalArgumentException exception)
+        {
+            return Component.text("der wert ist aber net erlaubt du naseweiß");
+        }
+    }
+
+    public @NotNull PlayerSetting<?> deserialize(@NotNull String input)
+    {
+        UserImplementation userImplementation = Bukkit.getKissen().getImplementation(UserImplementation.class);
+        Stream<PlayerSetting<?>> settings = userImplementation.getUserSettings().stream();
+        Predicate<PlayerSetting<?>> predicate = userSetting -> userSetting.getKey().equals(input);
+        return settings.filter(predicate).findFirst().orElseThrow(IllegalSettingException::new);
+    }
+
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        UserImplementation userImplementation = Bukkit.getKissen().getImplementation(UserImplementation.class);
+        Stream<PlayerSetting<?>> settings = userImplementation.getUserSettings().stream();
+        return settings.map(PlayerSetting::getKey).collect(Collectors.toSet());
+    }
+
+    @Override
+    public boolean handle(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull IllegalSettingException throwable)
+    {
+        commandPayload.getSender().sendMessage("Die wurd jetzt net gefunden");
+        return true;
+    }
+}
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index 675cd61221e807aadf28322b46c3daa1370241b5..fc2d8b61dab3bbe2164d57c68e743ae03dee2357 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -6,17 +6,17 @@
         </Queue>
         <TerminalConsole name="TerminalConsole">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%logger] %msg%n%xEx{full}}">
+                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level] [%logger]: %msg%n%xEx{full}}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
                     <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
-                                  pattern="%highlightError{[%d{HH:mm:ss} %level]: %msg%n%xEx{full}}" />
+                                  pattern="%highlightError{[%d{HH:mm:ss} %level] [%thread]: %msg%n%xEx{full}}" />
                 </LoggerNamePatternSelector>
             </PatternLayout>
         </TerminalConsole>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %stripAnsi{%msg}%n%xEx{full}">
+                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level] [%logger]: %stripAnsi{%msg}%n%xEx{full}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
                     <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
