From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Mon, 11 Sep 2023 00:49:19 +0200
Subject: [PATCH] Integrated base and plugin system into paper


diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index eedbf46e04b5ae420f9bedcbc2bbb10643ba7e22..43088e7d9614e8fb151ac3a255f3d030692626a4 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -144,7 +144,13 @@ class PaperPluginInstanceManager {
     public void disablePlugins() {
         Plugin[] plugins = this.getPlugins();
         for (int i = plugins.length - 1; i >= 0; i--) {
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().disable(net.kissenpvp.core.base.PluginState.PRE, plugins[i]);
+            // KissenPaper end
             this.disablePlugin(plugins[i]);
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().disable(net.kissenpvp.core.base.PluginState.POST, plugins[i]);
+            // KissenPaper end
         }
     }
 
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
index dab211c458311869c61779305580a1c7da830f71..6b4ff21d64771486cf452d33c6a44a21dab2ff16 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -238,4 +238,12 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
     public MutableGraph<String> getInstanceManagerGraph() {
         return instanceManager.getDependencyGraph();
     }
+
+    // KissenPaper start
+    @Override
+    public void registerSetting(@NotNull net.kissenpvp.core.api.config.Option<?> setting, @NotNull Plugin plugin)
+    {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.core.api.config.ConfigurationImplementation.class).registerSetting(plugin, setting);
+    }
+    // KissenPaper end
 }
diff --git a/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java b/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
index cb9b13522a976b82bcb71cef486f11f4172e3e99..e132a7c5cd9bea3ba77500dfeeb5eb968abcc43b 100644
--- a/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
+++ b/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
@@ -35,6 +35,9 @@ public class ServerPluginProviderStorage extends ConfiguredProviderStorage<JavaP
 
             @Override
             public boolean load(PluginProvider<JavaPlugin> provider, JavaPlugin provided) {
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().load(net.kissenpvp.core.base.PluginState.PRE, provided);
+                // KissenPaper end
                 // Add it to the map here, we have to run the actual loading logic later.
                 PaperPluginManagerImpl.getInstance().loadPlugin(provided);
                 return true;
@@ -57,6 +60,9 @@ public class ServerPluginProviderStorage extends ConfiguredProviderStorage<JavaP
         try {
             provided.getLogger().info(String.format("Loading server plugin %s", provided.getPluginMeta().getDisplayName()));
             provided.onLoad();
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().load(net.kissenpvp.core.base.PluginState.POST, provided);
+            // KissenPaper end
         } catch (Throwable ex) {
             // Don't mark that provider as ERRORED, as this apparently still needs to run the onEnable logic.
             provided.getSLF4JLogger().error("Error initializing plugin '%s' in folder '%s' (Is it up to date?)".formatted(provider.getFileName(), provider.getParentSource()), ex);
diff --git a/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
new file mode 100644
index 0000000000000000000000000000000000000000..1195119d0ef03942c8f8625aa33a3a267160d318
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
@@ -0,0 +1,131 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.base;
+
+import net.kissenpvp.core.api.base.Implementation;
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
+import net.kissenpvp.core.api.config.ConfigurationImplementation;
+import net.kissenpvp.core.api.database.connection.DatabaseImplementation;
+import net.kissenpvp.core.api.database.meta.ObjectMeta;
+import net.kissenpvp.core.api.networking.client.entitiy.ConsoleClient;
+import net.kissenpvp.core.base.KissenCore;
+import net.kissenpvp.paper.api.base.PaperKissen;
+import net.kissenpvp.paper.database.KissenPaperConfigurationImplementation;
+import net.kissenpvp.paper.database.PrivateDatabaseDNS;
+import net.kissenpvp.paper.database.UsePrivate;
+import net.kissenpvp.paper.event.KissenEventImplementation;
+import net.kissenpvp.paper.api.permission.PaperPermissionImplementation;
+import net.kissenpvp.paper.api.command.PaperCommandImplementation;
+import net.kissenpvp.paper.ban.KissenPaperBanImplementation;
+import net.kissenpvp.paper.command.KissenPaperCommandImplementation;
+import net.kissenpvp.paper.command.confirmation.KissenPaperConfirmationImplementation;
+import net.kissenpvp.paper.message.localization.KissenPaperLocalizationImplementation;
+import net.kissenpvp.paper.permission.KissenPaperPermissionImplementation;
+import net.kissenpvp.paper.user.KissenPaperUserImplementation;
+import net.kissenpvp.paper.user.rank.KissenPaperRankImplementation;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.slf4j.Logger;
+
+import java.util.Map;
+import java.util.Objects;
+import java.util.UUID;
+
+// KissenPaper
+public class KissenPaperCore extends KissenCore implements PaperKissen {
+
+    private @Nullable ObjectMeta privateMeta;
+
+    /**
+     * Constructs a new instance of the KissenPaperCore class.
+     *
+     * @param logger The logger to be used for logging.
+     */
+    public KissenPaperCore(@NotNull Logger logger) {
+        super(logger);
+    }
+
+    @Override
+    protected void loadImplementations(@NotNull Map<Class<? extends Implementation>, Implementation> loader)
+    {
+        loader.put(ConfigurationImplementation.class, new KissenPaperConfigurationImplementation());
+        loader.put(EventImplementation.class, new KissenEventImplementation());
+        loader.put(UserImplementation.class, new KissenPaperUserImplementation());
+        loader.put(RankImplementation.class, new KissenPaperRankImplementation());
+        KissenPaperPermissionImplementation permissionImplementation = new KissenPaperPermissionImplementation();
+        loader.put(PermissionImplementation.class, permissionImplementation);
+        loader.put(PaperPermissionImplementation.class, permissionImplementation);
+        loader.put(LocalizationImplementation.class, new KissenPaperLocalizationImplementation());
+        loader.put(PaperCommandImplementation.class, new KissenPaperCommandImplementation());
+        loader.put(BanImplementation.class, new KissenPaperBanImplementation());
+        loader.put(KissenConfirmationImplementation.class, new KissenPaperConfirmationImplementation());
+        loader.put(KissenPaperAdvancementImplementation.class, new KissenPaperAdvancementImplementation());
+        super.loadImplementations(loader);
+    }
+
+    @Override
+    protected void setupDatabase(@NotNull ConfigurationImplementation config, @NotNull DatabaseImplementation database) {
+        super.setupDatabase(config, database);
+        if(config.getSetting(UsePrivate.class))
+        {
+            String connectionString = config.getSetting(PrivateDatabaseDNS.class);
+            privateMeta = database.connectDatabase("private", connectionString).createObjectMeta("kissen_private_meta");
+        }
+    }
+
+    @Override
+    public int getPort() {
+        return Bukkit.getPort();
+    }
+
+    @Override
+    public boolean isOnline(@NotNull UUID uuid) {
+        return Bukkit.getPlayer(uuid) != null;
+    }
+
+    @Override
+    public boolean isOnline(@NotNull String s) {
+        return Bukkit.getPlayer(s) != null;
+    }
+
+    @Override
+    public @NotNull ConsoleClient getConsole() {
+        return Bukkit.getConsoleSender();
+    }
+
+    @Override
+    public void runTask(@NotNull KissenPlugin kissenPlugin, @NotNull Runnable runnable)
+    {
+        Bukkit.getScheduler().runTask((Plugin) kissenPlugin, runnable);
+    }
+
+    @Override
+    public void runTask(@NotNull Runnable runnable, int delay, @NotNull String name)
+    {
+        ((CraftScheduler) Bukkit.getScheduler()).scheduleInternalTask(runnable, delay, name);
+    }
+
+    @Override
+    public @NotNull ObjectMeta getPrivateMeta() {
+        return Objects.requireNonNullElse(privateMeta, KissenCore.getInstance().getPublicMeta());
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/KissenPaperInternalCommandHandler.java b/src/main/java/net/kissenpvp/paper/command/KissenPaperInternalCommandHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..466f4168cf90923e692ad0dc4a062e4d2f8825f9
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/KissenPaperInternalCommandHandler.java
@@ -0,0 +1,39 @@
+package net.kissenpvp.paper.command;
+
+import net.kissenpvp.core.command.handler.InternalCommandHandler;
+import net.kissenpvp.paper.command.command.system.KissenPaperCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftServer;
+import org.jetbrains.annotations.NotNull;
+
+public class KissenPaperInternalCommandHandler extends InternalCommandHandler<CommandSender, KissenPaperCommand>
+{
+    @Override
+    protected void registerCommand(@NotNull KissenPaperCommand command)
+    {
+        if(Bukkit.getCommandMap().register("kissenpaper", command))
+        {
+            ((CraftServer) Bukkit.getServer()).syncCommands();
+        }
+    }
+
+    @Override
+    protected @NotNull KissenPaperCommand buildCommand(@NotNull String name)
+    {
+        String rootName = name.split("\\.")[0];
+        KissenPaperCommand command = getCommand(rootName).orElseGet(() ->
+        {
+            KissenPaperCommand kissenCommand = new KissenPaperCommand(rootName, 0, this);
+            getCommands().add(kissenCommand);
+            return kissenCommand;
+        });
+
+        if (!name.equals(rootName))
+        {
+            command = (KissenPaperCommand) command.createRecursive(name);
+            getCommands().add(command);
+        }
+        return command;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/KissenPaperPluginHandler.java b/src/main/java/net/kissenpvp/paper/command/KissenPaperPluginHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..8439a8f619b889999ec3d19f3db49c82da561d77
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/KissenPaperPluginHandler.java
@@ -0,0 +1,50 @@
+package net.kissenpvp.paper.command;
+
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
+import net.kissenpvp.core.api.command.executor.CommandExecutor;
+import net.kissenpvp.core.command.handler.PluginCommandHandler;
+import net.kissenpvp.paper.command.command.plugin.KissenPaperPluginCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.lang.reflect.Method;
+import java.util.Objects;
+
+public class KissenPaperPluginHandler extends PluginCommandHandler<CommandSender, KissenPaperPluginCommand>
+{
+    public KissenPaperPluginHandler(@NotNull KissenPlugin plugin)
+    {
+        super(plugin);
+    }
+
+    @Override
+    protected void registerCommand(@NotNull KissenPaperPluginCommand command)
+    {
+        if(Bukkit.getCommandMap().register(getPlugin().getName(), command))
+        {
+            ((CraftServer) Bukkit.getServer()).syncCommands();
+        }
+    }
+
+    @Override
+    protected @NotNull KissenPaperPluginCommand buildCommand(@NotNull String name)
+    {
+        String rootName = name.split("\\.")[0];
+        KissenPaperPluginCommand command = getCommand(rootName).orElseGet(() ->
+        {
+            KissenPaperPluginCommand kissenCommand = new KissenPaperPluginCommand((Plugin) getPlugin(), rootName, 0, this);
+            getCommands().add(kissenCommand);
+            return kissenCommand;
+        });
+
+        if (!Objects.equals(name, rootName))
+        {
+            command = (KissenPaperPluginCommand) command.createRecursive(name);
+            getCommands().add(command);
+        }
+        return command;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/PaperCommandImplementation.java b/src/main/java/net/kissenpvp/paper/command/PaperCommandImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..a2bfb1547286a1817305196df63cf5479662eb88
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/PaperCommandImplementation.java
@@ -0,0 +1,122 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.command;
+
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
+import net.kissenpvp.core.api.command.CommandHandler;
+import net.kissenpvp.core.command.CommandImplementation;
+import net.kissenpvp.core.command.TargetValidator;
+import net.kissenpvp.core.command.argument.MethodEvaluator;
+import net.kissenpvp.core.command.handler.InternalCommandHandler;
+import net.kissenpvp.core.command.handler.PluginCommandHandler;
+import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
+import net.kissenpvp.paper.api.command.KissenCommand;
+import net.kissenpvp.paper.command.handler.CompletionExceptionHandler;
+import net.kissenpvp.paper.command.handler.PlayerExceptionHandler;
+import net.kissenpvp.paper.command.handler.ProfileNotFoundExceptionHandler;
+import net.kissenpvp.paper.command.parser.OfflinePlayerParser;
+import net.kissenpvp.paper.command.parser.PlayerParser;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+import java.text.MessageFormat;
+import java.util.Optional;
+
+/**
+ * Represents a Kissen Paper command implementation that extends the functionality of the Kissen command framework
+ * and is compatible with the Paper server platform.
+ * <p>
+ * This class extends {@link CommandImplementation} and implements the {@link net.kissenpvp.paper.api.command.PaperCommandImplementation} interface
+ * to provide specialized command handling and execution functionality tailored for the Paper server platform.
+ * It integrates seamlessly with the Kissen command framework and enhances it with Paper-specific features.
+ */
+public class PaperCommandImplementation extends CommandImplementation<CommandSender> implements net.kissenpvp.paper.api.command.PaperCommandImplementation
+{
+
+
+    /**
+     * Constructs a new instance of {@link PaperCommandImplementation}.
+     * <p>
+     * This constructor initializes the {@link MethodEvaluator} and {@link TargetValidator} instances used by this
+     * Kissen Paper command implementation for evaluating command methods and validating command execution targets.
+     */
+    public PaperCommandImplementation()
+    {
+        super();
+
+        // Advanced
+        getInternalHandler().registerParser(Player.class, new PlayerParser());
+        getInternalHandler().registerParser(OfflinePlayer.class, new OfflinePlayerParser());
+
+        //Exception handler
+        getInternalHandler().registerExceptionHandler(new PlayerExceptionHandler());
+        getInternalHandler().registerExceptionHandler(new CompletionExceptionHandler());
+        getInternalHandler().registerExceptionHandler(new ProfileNotFoundExceptionHandler());
+    }
+
+    @Override
+    public boolean start()
+    {
+        KissenLocalizationImplementation kissenLocalizationImplementation = Bukkit.getKissen().getImplementation(
+                KissenLocalizationImplementation.class);
+        kissenLocalizationImplementation.register("server.command.mojang.profile.invalid",
+                new MessageFormat("Mojangs repository does not contain the specified profile."));
+        kissenLocalizationImplementation.register("server.command.player.offline",
+                new MessageFormat("The player {0} seems to be offline."));
+        kissenLocalizationImplementation.register("server.command.failed",
+                new MessageFormat(MiniMessage.miniMessage().serialize(Component.translatable("commands.help.failed"))));
+
+        kissenLocalizationImplementation.register("server.command.general.header",
+                new MessageFormat("===== [ {0} ] ====="));
+        kissenLocalizationImplementation.register("server.command.general.header.paged",
+                new MessageFormat("===== [ {0} ({1}/{2}) ] ====="));
+        kissenLocalizationImplementation.register("server.command.general.footer",
+                new MessageFormat("===== [ {0} ] ====="));
+        kissenLocalizationImplementation.register("server.command.general.footer.paged",
+                new MessageFormat("===== [ {0} ({1}/{2}) ] ====="));
+
+        kissenLocalizationImplementation.register("server.command.general.key.value", new MessageFormat("{0}: {1}"));
+
+        return super.start();
+    }
+
+    @Override
+    protected InternalCommandHandler<CommandSender, ?> constructInternalHandler()
+    {
+        return new KissenPaperInternalCommandHandler();
+    }
+
+    @Override
+    protected @NotNull PluginCommandHandler<CommandSender, ?> constructHandler(@NotNull KissenPlugin kissenPlugin)
+    {
+        return new KissenPaperPluginHandler(kissenPlugin);
+    }
+
+
+    @Override
+    public @NotNull Optional<CommandHandler<CommandSender, KissenCommand>> getPluginHandler(@NotNull KissenPlugin kissenPlugin)
+    {
+        return getHandler().stream().filter(handler -> handler.getPlugin().equals(kissenPlugin)).map(handler -> (CommandHandler<CommandSender, KissenCommand>) handler).findFirst();
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/database/KissenPaperConfigurationImplementation.java b/src/main/java/net/kissenpvp/paper/database/KissenPaperConfigurationImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..99abc97edc44746b9992d0c28cc938b6f3aeb4f8
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/database/KissenPaperConfigurationImplementation.java
@@ -0,0 +1,14 @@
+package net.kissenpvp.paper.database;
+
+import net.kissenpvp.core.config.KissenConfigurationImplementation;
+
+public class KissenPaperConfigurationImplementation extends KissenConfigurationImplementation {
+
+    public KissenPaperConfigurationImplementation()
+    {
+        super();
+        registerInternalSetting(new UsePrivate());
+        registerInternalSetting(new PrivateDatabaseDNS());
+    }
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/database/PrivateDatabaseDNS.java b/src/main/java/net/kissenpvp/paper/database/PrivateDatabaseDNS.java
new file mode 100644
index 0000000000000000000000000000000000000000..ba0aa2a3fa43d15fec1a012242245380da781933
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/database/PrivateDatabaseDNS.java
@@ -0,0 +1,26 @@
+package net.kissenpvp.paper.database;
+
+import net.kissenpvp.core.api.config.options.OptionString;
+import org.jetbrains.annotations.NotNull;
+
+public class PrivateDatabaseDNS extends OptionString {
+    @Override
+    public @NotNull String getGroup() {
+        return "database";
+    }
+
+    @Override
+    public @NotNull String getDescription() {
+        return "Second private sql.";
+    }
+
+    @Override
+    public @NotNull String getDefault() {
+        return "jdbc:sqlite:privatekissen.db";
+    }
+
+    @Override
+    public int getPriority() {
+        return 11;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/database/UsePrivate.java b/src/main/java/net/kissenpvp/paper/database/UsePrivate.java
new file mode 100644
index 0000000000000000000000000000000000000000..96674e6f20f94c065586c6d7823a875113aa3b09
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/database/UsePrivate.java
@@ -0,0 +1,26 @@
+package net.kissenpvp.paper.database;
+
+import net.kissenpvp.core.api.config.options.OptionBoolean;
+import org.jetbrains.annotations.NotNull;
+
+public class UsePrivate extends OptionBoolean {
+    @Override
+    public @NotNull String getGroup() {
+        return "database";
+    }
+
+    @Override
+    public @NotNull String getDescription() {
+        return "\nWhether the system should utilize a private SQL database.";
+    }
+
+    @Override
+    public @NotNull Boolean getDefault() {
+        return false;
+    }
+
+    @Override
+    public int getPriority() {
+        return 10;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d06185566b447c432d4dc2e3ba04d121bcdbc71b..98531c5e718f80c25c6d6009a1494b8bc5ac98a9 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -191,7 +191,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 
 import co.aikar.timings.MinecraftTimings; // Paper
 
-public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, CommandSource, AutoCloseable {
+public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, CommandSource, AutoCloseable, net.kissenpvp.core.api.base.KissenServer { // KissenPaper
 
     private static MinecraftServer SERVER; // Paper
     public static final Logger LOGGER = LogUtils.getLogger();
@@ -1016,6 +1016,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         // Spigot end
 
+        // KissenPaper start
+        net.kissenpvp.core.base.KissenCore.getInstance().shutdown();
+        // KissenPaper end
+
         // Paper start - move final shutdown items here
         LOGGER.info("Flushing Chunk IO");
         // Paper end - move final shutdown items here
@@ -1132,6 +1136,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 throw new IllegalStateException("Failed to initialize server");
             }
 
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().start();
+            // KissenPaper end
+
             this.nextTickTimeNanos = Util.getNanos();
             this.statusIcon = (ServerStatus.Favicon) this.loadStatusIcon().orElse(null); // CraftBukkit - decompile error
             this.status = this.buildServerStatus();
@@ -1855,7 +1863,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @DontObfuscate
     public String getServerModName() {
-        return "Paper"; // Paper
+        return "KissenPaper"; // KissenPaper
     }
 
     public SystemReport fillSystemReport(SystemReport details) {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 68d268b6fff126e8645b6deec3fb549ea2286b77..b166b2460fc2f5709bd65b059910e989e954a18f 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -179,6 +179,13 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             DedicatedServer.LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
         }
 
+        // KissenPaper start - start system
+        net.kissenpvp.paper.base.KissenPaperCore kissenPaperCore = new net.kissenpvp.paper.base.KissenPaperCore(LogUtils.getLogger());
+        org.bukkit.Bukkit.setKissen(kissenPaperCore);
+        //system start is asynchronous
+        java.util.concurrent.CompletableFuture<Void> systemStart = java.util.concurrent.CompletableFuture.runAsync(kissenPaperCore::initialize);
+        // KissenPaper stop
+
         // Paper start - detect running as root
         if (io.papermc.paper.util.ServerEnvironment.userIsRootOrAdmin()) {
             DedicatedServer.LOGGER.warn("****************************");
@@ -269,6 +276,10 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             return false;
         }
 
+        // KissenPaper start - wait for system start
+        systemStart.join();
+        // KissenPaper end
+
         // CraftBukkit start
         // this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage)); // Spigot - moved up
         this.server.loadPlugins();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 9f7ed337463cc9bb370a5541d9de5cd8f9c1a78a..c65ad124e3e9d1b4f2a6fe763d521103e8bbe5e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -266,7 +266,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Paper"; // Paper
+    private final String serverName = "KissenPaper"; // Paper
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
@@ -547,7 +547,13 @@ public final class CraftServer implements Server {
 
         for (Plugin plugin : plugins) {
             if ((!plugin.isEnabled()) && (plugin.getDescription().getLoad() == type)) {
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().enable(net.kissenpvp.core.base.PluginState.PRE, plugin);
+                // KissenPaper end
                 this.enablePlugin(plugin);
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().enable(net.kissenpvp.core.base.PluginState.POST, plugin);
+                // KissenPaper end
             }
         }
 
@@ -1022,6 +1028,12 @@ public final class CraftServer implements Server {
             throw new IllegalStateException("A lifecycle event handler has been registered which makes reloading plugins not possible");
         }
         // Paper end - lifecycle events
+
+        // KissenPaper start - reinitialize core
+        net.kissenpvp.core.base.KissenCore currentCore = net.kissenpvp.core.base.KissenCore.getInstance();
+        currentCore.shutdown();
+        // KissenPaper end - reinitialize core
+
         org.spigotmc.WatchdogThread.hasStarted = false; // Paper - Disable watchdog early timeout on reload
         this.reloadCount++;
         this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
@@ -1081,6 +1093,11 @@ public final class CraftServer implements Server {
             playerMetadata.removeAll(plugin);
         }
         // Paper end
+
+        // KissenPaper start - reinitialize core
+        currentCore.initialize(); // will replace current instance by overriding static var
+        // KissenPaper end - reinitialize core
+
         this.reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
@@ -1113,6 +1130,11 @@ public final class CraftServer implements Server {
         this.enablePlugins(PluginLoadOrder.STARTUP);
         this.enablePlugins(PluginLoadOrder.POSTWORLD);
         this.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.RELOAD));
+
+        // KissenPaper start - reinitialize core
+        currentCore.getKissenImplementations().forEach(net.kissenpvp.core.base.KissenImplementation::setupComplete);
+        // KissenPaper end - reinitialize core
+
         org.spigotmc.WatchdogThread.hasStarted = true; // Paper - Disable watchdog early timeout on reload
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index 66bdac50130f523f9dc4379b103b7a469f9ca36b..3b462b42888f884de8b660ba4e8707a1b37d19a7 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -150,4 +150,11 @@ public class MinecraftInternalPlugin extends PluginBase {
         throw new UnsupportedOperationException("Not supported.");
     }
     // Paper end - lifecycle events
+
+    // KissenPaper start
+    @Override
+    public net.kissenpvp.core.api.base.@org.jetbrains.annotations.NotNull Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+    // KissenPaper end
 }
diff --git a/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java b/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
index 90cf0c702ca2ff9de64d9718ecba5f2d128953a6..5ff44cd1d49da6f8961cf52713b54c9b37ea5cb7 100644
--- a/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
+++ b/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
@@ -150,4 +150,11 @@ public class PaperTestPlugin extends PluginBase {
         throw new UnsupportedOperationException("Not supported.");
     }
     // Paper end - lifecycle events
+
+    // KissenPaper start
+    @Override
+    public net.kissenpvp.core.api.base.@org.jetbrains.annotations.NotNull Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+    // KissenPaper end
 }
