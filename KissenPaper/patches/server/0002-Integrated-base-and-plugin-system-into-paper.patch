From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Mon, 11 Sep 2023 00:49:19 +0200
Subject: [PATCH] Integrated base and plugin system into paper


diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index 3e82ea07ca4194844c5528446e2c4a46ff4acee5..59f8f60d5d962eccf2637d16985c86a38803c8e2 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -158,7 +158,13 @@ class PaperPluginInstanceManager {
     public void disablePlugins() {
         Plugin[] plugins = this.getPlugins();
         for (int i = plugins.length - 1; i >= 0; i--) {
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().disable(net.kissenpvp.core.base.PluginState.PRE, plugins[i]);
+            // KissenPaper end
             this.disablePlugin(plugins[i]);
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().disable(net.kissenpvp.core.base.PluginState.POST, plugins[i]);
+            // KissenPaper end
         }
     }
 
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
index 097500a59336db1bbfffcd1aa4cff7a8586e46ec..b3fd45a4e11461a1237288863cebb5c5baa9d647 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -243,4 +243,12 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
     public MutableGraph<String> getInstanceManagerGraph() {
         return instanceManager.getDependencyGraph();
     }
+
+    // KissenPaper start
+    @Override
+    public void registerSetting(@NotNull net.kissenpvp.core.api.config.Option<?, ?> setting, @NotNull Plugin plugin)
+    {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.core.api.config.ConfigurationImplementation.class).registerSetting(plugin, setting);
+    }
+    // KissenPaper end
 }
diff --git a/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java b/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
index cb9b13522a976b82bcb71cef486f11f4172e3e99..e132a7c5cd9bea3ba77500dfeeb5eb968abcc43b 100644
--- a/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
+++ b/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
@@ -35,6 +35,9 @@ public class ServerPluginProviderStorage extends ConfiguredProviderStorage<JavaP
 
             @Override
             public boolean load(PluginProvider<JavaPlugin> provider, JavaPlugin provided) {
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().load(net.kissenpvp.core.base.PluginState.PRE, provided);
+                // KissenPaper end
                 // Add it to the map here, we have to run the actual loading logic later.
                 PaperPluginManagerImpl.getInstance().loadPlugin(provided);
                 return true;
@@ -57,6 +60,9 @@ public class ServerPluginProviderStorage extends ConfiguredProviderStorage<JavaP
         try {
             provided.getLogger().info(String.format("Loading server plugin %s", provided.getPluginMeta().getDisplayName()));
             provided.onLoad();
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().load(net.kissenpvp.core.base.PluginState.POST, provided);
+            // KissenPaper end
         } catch (Throwable ex) {
             // Don't mark that provider as ERRORED, as this apparently still needs to run the onEnable logic.
             provided.getSLF4JLogger().error("Error initializing plugin '%s' in folder '%s' (Is it up to date?)".formatted(provider.getFileName(), provider.getParentSource()), ex);
diff --git a/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
new file mode 100644
index 0000000000000000000000000000000000000000..964f3eeee94e61a0dd631ca32e7588cacc6a5787
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
@@ -0,0 +1,132 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.base;
+
+import net.kissenpvp.core.api.ban.AbstractBanImplementation;
+import net.kissenpvp.core.api.base.Implementation;
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
+import net.kissenpvp.core.api.config.ConfigurationImplementation;
+import net.kissenpvp.core.api.database.connection.DatabaseImplementation;
+import net.kissenpvp.core.api.message.localization.LocalizationImplementation;
+import net.kissenpvp.core.api.networking.client.entitiy.ConsoleClient;
+import net.kissenpvp.core.api.user.UserImplementation;
+import net.kissenpvp.core.api.user.rank.AbstractRankImplementation;
+import net.kissenpvp.core.base.KissenCore;
+import net.kissenpvp.core.command.confirmation.KissenConfirmationImplementation;
+import net.kissenpvp.core.event.EventImplementation;
+import net.kissenpvp.core.permission.InternalPermissionImplementation;
+import net.kissenpvp.paper.advancement.KissenPaperAdvancementImplementation;
+import net.kissenpvp.paper.api.base.PaperKissen;
+import net.kissenpvp.paper.api.command.PaperCommandImplementation;
+import net.kissenpvp.paper.api.permission.PermissionImplementation;
+import net.kissenpvp.paper.ban.KissenPaperBanImplementation;
+import net.kissenpvp.paper.command.KissenPaperCommandImplementation;
+import net.kissenpvp.paper.command.confirmation.KissenPaperConfirmationImplementation;
+import net.kissenpvp.paper.database.KissenPaperConfigurationImplementation;
+import net.kissenpvp.paper.database.KissenPaperDatabaseImplementation;
+import net.kissenpvp.paper.event.KissenEventImplementation;
+import net.kissenpvp.paper.message.localization.KissenPaperLocalizationImplementation;
+import net.kissenpvp.paper.permission.KissenPaperPermissionImplementation;
+import net.kissenpvp.paper.user.KissenPaperUserImplementation;
+import net.kissenpvp.paper.user.rank.KissenPaperRankImplementation;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.slf4j.Logger;
+
+import java.util.Map;
+import java.util.Optional;
+import java.util.UUID;
+
+// KissenPaper
+public class KissenPaperCore extends KissenCore implements PaperKissen {
+
+    /**
+     * Constructs a new instance of the KissenPaperCore class.
+     *
+     * @param logger The logger to be used for logging.
+     */
+    public KissenPaperCore(@NotNull Logger logger) {
+        super(logger);
+    }
+
+    @Override
+    public @NotNull Optional<KissenPlugin> getPlugin(@NotNull String plugin) {
+        return Optional.ofNullable(Bukkit.getPluginManager().getPlugin(plugin));
+    }
+
+    @Override
+    public @NotNull KissenPlugin[] getPlugins() {
+        return Bukkit.getPluginManager().getPlugins();
+    }
+
+    @Override
+    protected void loadImplementations(@NotNull Map<Class<? extends Implementation>, Implementation> loader) {
+        loader.put(ConfigurationImplementation.class, new KissenPaperConfigurationImplementation());
+        loader.put(DatabaseImplementation.class, new KissenPaperDatabaseImplementation());
+        loader.put(EventImplementation.class, new KissenEventImplementation());
+        loader.put(UserImplementation.class, new KissenPaperUserImplementation());
+        loader.put(AbstractRankImplementation.class, new KissenPaperRankImplementation());
+        KissenPaperPermissionImplementation permissionImplementation = new KissenPaperPermissionImplementation();
+        loader.put(InternalPermissionImplementation.class, permissionImplementation);
+        loader.put(PermissionImplementation.class, permissionImplementation);
+        loader.put(LocalizationImplementation.class, new KissenPaperLocalizationImplementation());
+        loader.put(PaperCommandImplementation.class, new KissenPaperCommandImplementation());
+        loader.put(AbstractBanImplementation.class, new KissenPaperBanImplementation());
+        loader.put(KissenConfirmationImplementation.class, new KissenPaperConfirmationImplementation());
+        loader.put(KissenPaperAdvancementImplementation.class, new KissenPaperAdvancementImplementation());
+        super.loadImplementations(loader);
+    }
+
+    @Override
+    protected void setupDatabase(@NotNull ConfigurationImplementation config, @NotNull DatabaseImplementation database) {
+        super.setupDatabase(config, database);
+    }
+
+    @Override
+    public int getPort() {
+        return Bukkit.getPort();
+    }
+
+    @Override
+    public boolean isOnline(@NotNull UUID uuid) {
+        return Bukkit.getPlayer(uuid)!=null;
+    }
+
+    @Override
+    public boolean isOnline(@NotNull String s) {
+        return Bukkit.getPlayer(s)!=null;
+    }
+
+    @Override
+    public @NotNull ConsoleClient getConsole() {
+        return Bukkit.getConsoleSender();
+    }
+
+    @Override
+    public void runTask(@NotNull KissenPlugin kissenPlugin, @NotNull Runnable runnable) {
+        Bukkit.getScheduler().runTask((Plugin) kissenPlugin, runnable);
+    }
+
+    @Override
+    public void runTask(@NotNull Runnable runnable, int delay, @NotNull String name) {
+        ((CraftScheduler) Bukkit.getScheduler()).scheduleInternalTask(runnable, delay, name);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/database/KissenPaperConfigurationImplementation.java b/src/main/java/net/kissenpvp/paper/database/KissenPaperConfigurationImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..eaadb426e0155f453e8763fa53158c5a4e291e32
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/database/KissenPaperConfigurationImplementation.java
@@ -0,0 +1,70 @@
+package net.kissenpvp.paper.database;
+
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
+import net.kissenpvp.core.api.config.Option;
+import net.kissenpvp.core.config.KissenConfigurationImplementation;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+import java.util.TreeMap;
+import java.util.function.Function;
+import java.util.stream.Collector;
+import java.util.stream.Collectors;
+
+public class KissenPaperConfigurationImplementation extends KissenConfigurationImplementation {
+
+    public KissenPaperConfigurationImplementation()
+    {
+        super();
+        registerInternalSetting(new UsePrivate());
+        registerInternalSetting(new PrivateDatabaseDns());
+    }
+
+    @Override
+    protected @NotNull File getFile() {
+        return new File("config", "kissen.yml");
+    }
+
+    @Override
+    protected @NotNull File getFile(@NotNull KissenPlugin plugin) {
+        return new File(plugin.getDataFolder(), "config.yml");
+    }
+
+    @Override
+    protected void load(@NotNull File file, @NotNull List<Option<?, ?>> options) {
+        FileConfiguration configuration = YamlConfiguration.loadConfiguration(file);
+        options.forEach(option -> {
+            String path = getPath(option);
+            if (configuration.contains(path)) {
+                setValue(option, Objects.requireNonNull(configuration.getObject(path, option.getConvertClass())));
+                return;
+            }
+            setDefault(option);
+        });
+    }
+
+    @Override
+    protected void write(@NotNull File file, @NotNull List<Option<?, ?>> options) throws IOException {
+        FileConfiguration configuration = YamlConfiguration.loadConfiguration(file);
+
+        options.stream().collect(getCollector()).forEach((group, optionList) -> optionList.forEach(option -> {
+            String path = getPath(option);
+            configuration.set(path, getSerialized(option));
+        }));
+
+        configuration.save(file);
+    }
+
+    @Contract(pure = true, value = "-> new")
+    private @NotNull Collector<Option<?, ?>, ?, TreeMap<String, List<Option<?, ?>>>> getCollector() {
+        Function<Option<?, ?>, String> key = option -> option.getGroup().toLowerCase();
+        return Collectors.groupingBy(key, TreeMap::new, Collectors.toCollection(ArrayList::new));
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/database/KissenPaperDatabaseImplementation.java b/src/main/java/net/kissenpvp/paper/database/KissenPaperDatabaseImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..3b07c7c85b8f4c25733b1d31c0750ebb62de7b90
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/database/KissenPaperDatabaseImplementation.java
@@ -0,0 +1,27 @@
+package net.kissenpvp.paper.database;
+
+import net.kissenpvp.core.base.KissenCore;
+import net.kissenpvp.core.database.KissenDatabaseImplementation;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+
+public class KissenPaperDatabaseImplementation extends KissenDatabaseImplementation {
+    @Override
+    public @NotNull Class<?> loadClass(@NotNull String name) {
+        try {
+            return getClass().getClassLoader().loadClass(name);
+        } catch (ClassNotFoundException ignored) {
+        }
+
+        for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+            try {
+                return plugin.getClass().getClassLoader().loadClass(name);
+            } catch (ClassNotFoundException ignored) {
+            }
+        }
+        KissenCore.getInstance().getLogger().info("Cannot find class {}.", name);
+        throw new NullPointerException();
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/database/PrivateDatabaseDns.java b/src/main/java/net/kissenpvp/paper/database/PrivateDatabaseDns.java
new file mode 100644
index 0000000000000000000000000000000000000000..e690fb547559d83348d53e8ff681af4e85d8f520
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/database/PrivateDatabaseDns.java
@@ -0,0 +1,26 @@
+package net.kissenpvp.paper.database;
+
+import net.kissenpvp.core.api.config.options.OptionString;
+import org.jetbrains.annotations.NotNull;
+
+public class PrivateDatabaseDns extends OptionString {
+    @Override
+    public @NotNull String getGroup() {
+        return "database";
+    }
+
+    @Override
+    public @NotNull String getDescription() {
+        return "Second private sql.";
+    }
+
+    @Override
+    public @NotNull String getDefault() {
+        return "jdbc:sqlite:privatekissen.db";
+    }
+
+    @Override
+    public int getPriority() {
+        return 11;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/database/UsePrivate.java b/src/main/java/net/kissenpvp/paper/database/UsePrivate.java
new file mode 100644
index 0000000000000000000000000000000000000000..96674e6f20f94c065586c6d7823a875113aa3b09
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/database/UsePrivate.java
@@ -0,0 +1,26 @@
+package net.kissenpvp.paper.database;
+
+import net.kissenpvp.core.api.config.options.OptionBoolean;
+import org.jetbrains.annotations.NotNull;
+
+public class UsePrivate extends OptionBoolean {
+    @Override
+    public @NotNull String getGroup() {
+        return "database";
+    }
+
+    @Override
+    public @NotNull String getDescription() {
+        return "\nWhether the system should utilize a private SQL database.";
+    }
+
+    @Override
+    public @NotNull Boolean getDefault() {
+        return false;
+    }
+
+    @Override
+    public int getPriority() {
+        return 10;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 39303bb4e336732db0ab19dee0c1f8b609bbb134..d1a4f2af08136de862166f4de46b30cb5b0a6b4d 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -195,7 +195,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 
 import co.aikar.timings.MinecraftTimings; // Paper
 
-public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, CommandSource, AutoCloseable {
+public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, CommandSource, AutoCloseable, net.kissenpvp.core.api.base.KissenServer { // KissenPaper - impement kissen server
 
     private static MinecraftServer SERVER; // Paper
     public static final Logger LOGGER = LogUtils.getLogger();
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 2eb9c584cc77237f1c82d880a51a3f8b51008d73..f593f830e766d4b407436f13662da833f28e5d9b 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -192,6 +192,13 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             DedicatedServer.LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
         }
 
+        // KissenPaper start - start system
+        net.kissenpvp.paper.base.KissenPaperCore kissenPaperCore = new net.kissenpvp.paper.base.KissenPaperCore(LogUtils.getLogger());
+        org.bukkit.Bukkit.setKissen(kissenPaperCore);
+        //system start is asynchronous
+        java.util.concurrent.CompletableFuture<Void> systemStart = java.util.concurrent.CompletableFuture.runAsync(kissenPaperCore::initialize);
+        // KissenPaper stop
+
         // Paper start - detect running as root
         if (io.papermc.paper.util.ServerEnvironment.userIsRootOrAdmin()) {
             DedicatedServer.LOGGER.warn("****************************");
@@ -226,6 +233,11 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         if (this.convertOldUsers()) {
             this.getProfileCache().save(false); // Paper
         }
+
+        // KissenPaper start - wait for system start
+        systemStart.join();
+        // KissenPaper end
+
         this.getPlayerList().loadAndSaveFiles(); // Must be after convertNames
         // Paper end - fix converting txt to json file
         org.spigotmc.WatchdogThread.doStart(org.spigotmc.SpigotConfig.timeoutTime, org.spigotmc.SpigotConfig.restartOnCrash); // Paper - start watchdog thread
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index da1aed63af837b193900bb85393611edbd56c363..1f8b1aaa133ff2c8af332b0feae937dd64a20701 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -269,7 +269,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Paper"; // Paper
+    private final String serverName = "KissenPaper"; // KissenPaper - rename
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
@@ -555,7 +555,13 @@ public final class CraftServer implements Server {
 
         for (Plugin plugin : plugins) {
             if ((!plugin.isEnabled()) && (plugin.getDescription().getLoad() == type)) {
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().enable(net.kissenpvp.core.base.PluginState.PRE, plugin);
+                // KissenPaper end
                 this.enablePlugin(plugin);
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().enable(net.kissenpvp.core.base.PluginState.POST, plugin);
+                // KissenPaper end
             }
         }
 
@@ -1006,6 +1012,12 @@ public final class CraftServer implements Server {
             throw new IllegalStateException(org.bukkit.command.defaults.ReloadCommand.RELOADING_DISABLED_MESSAGE);
         }
         // Paper end - lifecycle events
+
+        // KissenPaper start - reinitialize core
+        net.kissenpvp.core.base.KissenCore currentCore = net.kissenpvp.core.base.KissenCore.getInstance();
+        currentCore.shutdown();
+        // KissenPaper end - reinitialize core
+
         org.spigotmc.WatchdogThread.hasStarted = false; // Paper - Disable watchdog early timeout on reload
         this.reloadCount++;
         this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
@@ -1066,6 +1078,11 @@ public final class CraftServer implements Server {
             playerMetadata.removeAll(plugin);
         }
         // Paper end
+
+        // KissenPaper start - reinitialize core
+        currentCore.initialize(); // will replace current instance by overriding static var
+        // KissenPaper end - reinitialize core
+
         this.reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
@@ -1105,6 +1122,11 @@ public final class CraftServer implements Server {
         this.syncCommands(); // Refresh commands after event
         // Paper end - brigadier command API
         this.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.RELOAD));
+
+        // KissenPaper start - reinitialize core
+        currentCore.start();
+        // KissenPaper end - reinitialize core
+
         org.spigotmc.WatchdogThread.hasStarted = true; // Paper - Disable watchdog early timeout on reload
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index 66bdac50130f523f9dc4379b103b7a469f9ca36b..3b462b42888f884de8b660ba4e8707a1b37d19a7 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -150,4 +150,11 @@ public class MinecraftInternalPlugin extends PluginBase {
         throw new UnsupportedOperationException("Not supported.");
     }
     // Paper end - lifecycle events
+
+    // KissenPaper start
+    @Override
+    public net.kissenpvp.core.api.base.@org.jetbrains.annotations.NotNull Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+    // KissenPaper end
 }
diff --git a/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java b/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
index 90cf0c702ca2ff9de64d9718ecba5f2d128953a6..5ff44cd1d49da6f8961cf52713b54c9b37ea5cb7 100644
--- a/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
+++ b/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
@@ -150,4 +150,11 @@ public class PaperTestPlugin extends PluginBase {
         throw new UnsupportedOperationException("Not supported.");
     }
     // Paper end - lifecycle events
+
+    // KissenPaper start
+    @Override
+    public net.kissenpvp.core.api.base.@org.jetbrains.annotations.NotNull Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+    // KissenPaper end
 }
