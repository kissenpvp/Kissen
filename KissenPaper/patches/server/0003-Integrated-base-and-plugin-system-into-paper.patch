From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Mon, 11 Sep 2023 00:49:19 +0200
Subject: [PATCH] Integrated base and plugin system into paper


diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index 08b1aab5d37a56dc42542ce15ba1f7ccd1b08400..8bcda8b49e0f4c4626fae3afa541b909a3320d19 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -146,7 +146,13 @@ class PaperPluginInstanceManager {
     public void disablePlugins() {
         Plugin[] plugins = this.getPlugins();
         for (int i = plugins.length - 1; i >= 0; i--) {
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().load(net.kissenpvp.core.base.PluginState.PRE, plugins[i]);
+            // KissenPaper end
             this.disablePlugin(plugins[i]);
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().load(net.kissenpvp.core.base.PluginState.POST, plugins[i]);
+            // KissenPaper end
         }
     }
 
diff --git a/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java b/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
index cb9b13522a976b82bcb71cef486f11f4172e3e99..862625f912d8e8d980f06f58f7bef353578420e6 100644
--- a/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
+++ b/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
@@ -35,6 +35,9 @@ public class ServerPluginProviderStorage extends ConfiguredProviderStorage<JavaP
 
             @Override
             public boolean load(PluginProvider<JavaPlugin> provider, JavaPlugin provided) {
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().load(net.kissenpvp.core.base.PluginState.PRE, provided);
+                // KissenPaper end
                 // Add it to the map here, we have to run the actual loading logic later.
                 PaperPluginManagerImpl.getInstance().loadPlugin(provided);
                 return true;
@@ -57,6 +60,9 @@ public class ServerPluginProviderStorage extends ConfiguredProviderStorage<JavaP
         try {
             provided.getLogger().info(String.format("Loading server plugin %s", provided.getPluginMeta().getDisplayName()));
             provided.onLoad();
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().enable(net.kissenpvp.core.base.PluginState.POST, provided);
+            // KissenPaper end
         } catch (Throwable ex) {
             // Don't mark that provider as ERRORED, as this apparently still needs to run the onEnable logic.
             provided.getSLF4JLogger().error("Error initializing plugin '%s' in folder '%s' (Is it up to date?)".formatted(provider.getFileName(), provider.getParentSource()), ex);
diff --git a/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
new file mode 100644
index 0000000000000000000000000000000000000000..4446e728cd8c2a3869d0092000c347a44ca8bd39
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.base;
+
+import net.kissenpvp.core.api.database.meta.ObjectMeta;
+import net.kissenpvp.core.api.networking.client.entitiy.ConsoleClient;
+import net.kissenpvp.core.base.KissenCore;
+import net.kissenpvp.paper.api.base.PaperKissen;
+import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.slf4j.Logger;
+
+import java.util.UUID;
+
+// KissenPaper
+public class KissenPaperCore extends KissenCore implements PaperKissen {
+
+    /**
+     * Constructs a new instance of the KissenPaperCore class.
+     *
+     * @param logger The logger to be used for logging.
+     */
+    public KissenPaperCore(@NotNull Logger logger) {
+        super(logger);
+    }
+
+    @Override
+    public int getPort() {
+        return Bukkit.getPort();
+    }
+
+    @Override
+    public boolean isOnline(@NotNull UUID uuid) {
+        return Bukkit.getPlayer(uuid) != null;
+    }
+
+    @Override
+    public boolean isOnline(@NotNull String s) {
+        return Bukkit.getPlayer(s) != null;
+    }
+
+    @Override
+    public @NotNull ConsoleClient getConsole() {
+        return Bukkit.getConsoleSender();
+    }
+
+    @Override
+    public void repeatTask(@NotNull String name, int l1, @NotNull Runnable runnable) {
+        //TODO add task class
+    }
+
+    @Override
+    public void runTask(long l, @NotNull Runnable runnable) {
+        //TODO look method above
+    }
+
+    @Override
+    public @NotNull ObjectMeta getPrivateMeta() {
+        return KissenCore.getInstance().getPublicMeta(); //TODO
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 8f31413c939cc2b0454ad3d9a1b618dbae449d00..d2e8813e6fa4c0cc2e249b5260b8535a657e601e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -190,7 +190,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 
 import co.aikar.timings.MinecraftTimings; // Paper
 
-public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, CommandSource, AutoCloseable {
+public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, CommandSource, AutoCloseable, net.kissenpvp.core.api.base.KissenServer {
 
     private static MinecraftServer SERVER; // Paper
     public static final Logger LOGGER = LogUtils.getLogger();
@@ -971,6 +971,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.getProfileCache().save(false); // Paper
         }
         // Spigot end
+
+        // KissenPaper start
+        net.kissenpvp.core.base.KissenCore.getInstance().shutdown();
+        // KissenPaper end
+
         // Paper start - move final shutdown items here
         LOGGER.info("Flushing Chunk IO");
         // Paper end - move final shutdown items here
@@ -1087,6 +1092,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 throw new IllegalStateException("Failed to initialize server");
             }
 
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().start();
+            // KissenPaper end
+
             this.nextTickTime = Util.getMillis();
             this.statusIcon = (ServerStatus.Favicon) this.loadStatusIcon().orElse(null); // CraftBukkit - decompile error
             this.status = this.buildServerStatus();
@@ -1697,7 +1706,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @DontObfuscate
     public String getServerModName() {
-        return "Paper"; // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "KissenPaper"; // KissenPaper - KissenPaper > // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public SystemReport fillSystemReport(SystemReport details) {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 1c9742ad81f04052d2c3bc18c7636f45b2fc5160..ede2de85f0607701a2ac0443e6ef900269272139 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -192,6 +192,16 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         DedicatedServer.LOGGER.info("Loading properties");
         DedicatedServerProperties dedicatedserverproperties = this.settings.getProperties();
 
+        // KissenPaper start
+        net.kissenpvp.paper.base.KissenPaperCore kissenPaperCore = new net.kissenpvp.paper.base.KissenPaperCore(LogUtils.getLogger());
+        org.bukkit.Bukkit.setKissen(kissenPaperCore);
+        try {
+            kissenPaperCore.initialize(net.kissenpvp.paper.base.KissenPaperCore.class);
+        } catch (Exception exception) {
+            throw new RuntimeException(String.format("The system could not load the 'kissen' system due to a '%s' exception.", exception.getClass().getSimpleName()), exception);
+        }
+        // KissenPaper stop
+
         if (this.isSingleplayer()) {
             this.setLocalIp("127.0.0.1");
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 356107688a5d40d1c462b164f61af82f4dfd3926..c9fd81d76fd2d4d4b23bd4beb06c9a178c485765 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -554,7 +554,13 @@ public final class CraftServer implements Server {
 
         for (Plugin plugin : plugins) {
             if ((!plugin.isEnabled()) && (plugin.getDescription().getLoad() == type)) {
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().enable(net.kissenpvp.core.base.PluginState.PRE, plugin);
+                // KissenPaper end
                 this.enablePlugin(plugin);
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().enable(net.kissenpvp.core.base.PluginState.POST, plugin);
+                // KissenPaper end
             }
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index d96399e9bf1a58db5a4a22e58abb99e7660e0694..8a9614959e399ff8b43a8819f62f351b6bec78e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -143,4 +143,26 @@ public class MinecraftInternalPlugin extends PluginBase {
     public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
         throw new UnsupportedOperationException("Not supported.");
     }
+
+    // KissenPaper start
+    @Override
+    public @org.jetbrains.annotations.NotNull String getFullName() {
+        return getName();
+    }
+
+    @Override
+    public @org.jetbrains.annotations.NotNull String getPackage() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public net.kissenpvp.core.api.base.@org.jetbrains.annotations.NotNull Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+
+    @Override
+    public void registerTranslation(@org.jetbrains.annotations.NotNull String key, java.text.@org.jetbrains.annotations.NotNull MessageFormat defaultMessage) {
+        getKissen().getImplementation(net.kissenpvp.core.message.localization.KissenLocalizationImplementation.class).register(key, defaultMessage);
+    }
+    // KissenPaper end
 }
diff --git a/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java b/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
index 1d14f530ef888102e47eeeaf0d1a6076e51871c4..b83c491de7f79f29716686805b6f10341667b89b 100644
--- a/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
+++ b/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
@@ -143,4 +143,26 @@ public class PaperTestPlugin extends PluginBase {
     public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
         throw new UnsupportedOperationException("Not supported.");
     }
+
+    // KissenPaper start
+    @Override
+    public @org.jetbrains.annotations.NotNull String getFullName() {
+        return getName();
+    }
+
+    @Override
+    public @org.jetbrains.annotations.NotNull String getPackage() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public net.kissenpvp.core.api.base.@org.jetbrains.annotations.NotNull Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+
+    @Override
+    public void registerTranslation(@org.jetbrains.annotations.NotNull String key, java.text.@org.jetbrains.annotations.NotNull MessageFormat defaultMessage) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+    // KissenPaper end
 }
