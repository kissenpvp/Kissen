From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivo Quiring <falk.quiring@gmail.com>
Date: Mon, 12 Feb 2024 13:39:34 +0100
Subject: [PATCH] Integrated event system from kissen into paper

Signed-off-by: Ivo Quiring <falk.quiring@gmail.com>

diff --git a/src/main/java/io/papermc/paper/plugin/manager/DummyBukkitPluginLoader.java b/src/main/java/io/papermc/paper/plugin/manager/DummyBukkitPluginLoader.java
index aef19b44075a3b2e8696315baa89117dd8ebb513..a0b900bcf1baf348f655d55f0ece891400dcfb90 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/DummyBukkitPluginLoader.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/DummyBukkitPluginLoader.java
@@ -66,7 +66,7 @@ public class DummyBukkitPluginLoader implements PluginLoader {
     }
 
     @Override
-    public @NotNull Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull Plugin plugin) {
+    public @NotNull Map<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> createRegisteredListeners(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull Plugin plugin) { // KissenPaper - integrate unified event system
         return PaperPluginManagerImpl.getInstance().paperEventManager.createRegisteredListeners(listener, plugin);
     }
 
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
index 7ce9ebba8ce304d1f3f21d4f15ee5f3560d7700b..4abf5840c8846dd31b05926f0f55258fa5f562ca 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
@@ -35,15 +35,27 @@ class PaperEventManager {
     }
 
     // SimplePluginManager
-    public void callEvent(@NotNull Event event) {
-        if (event.isAsynchronous() && this.server.isPrimaryThread()) {
-            throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
-        } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping()) {
-            throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
+    public void callEvent(@NotNull net.kissenpvp.core.api.event.EventClass event) { // KissenPaper - integrate unified event system
+        // KissenPaper start - integrate unified event system
+        if(!event.volatileEvent())
+        {
+            if (event.isAsynchronous() && this.server.isPrimaryThread()) {
+                throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
+            } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping()) {
+                throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
+            }
         }
 
-        HandlerList handlers = event.getHandlers();
-        RegisteredListener[] listeners = handlers.getRegisteredListeners();
+        HandlerList handlerList = net.kissenpvp.paper.event.KissenEventImplementation.getHandlerList();
+        RegisteredListener[] listeners = handlerList.getRegisteredListeners();
+        if(event instanceof Event bukkitEvent)
+        {
+            handlerList = bukkitEvent.getHandlers();
+            RegisteredListener[] bukkitListeners = handlerList.getRegisteredListeners();
+            listeners = java.util.stream.Stream.concat(Arrays.stream(listeners),
+                    Arrays.stream(bukkitListeners)).toArray(RegisteredListener[]::new);
+        }
+        // KissenPaper end - integrate unified event system
 
         for (RegisteredListener registration : listeners) {
             if (!registration.getPlugin().isEnabled()) {
@@ -75,22 +87,22 @@ class PaperEventManager {
         }
     }
 
-    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin) {
+    public void registerEvents(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull Plugin plugin) { // KissenPaper - integrate unified event system
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + listener + " while not enabled");
         }
 
-        for (Map.Entry<Class<? extends Event>, Set<RegisteredListener>> entry : this.createRegisteredListeners(listener, plugin).entrySet()) {
+        for (Map.Entry<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> entry : this.createRegisteredListeners(listener, plugin).entrySet()) { // KissenPaper - integrate unified event system
             this.getEventListeners(this.getRegistrationClass(entry.getKey())).registerAll(entry.getValue());
         }
 
     }
 
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) {
+    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) { // KissenPaper - integrate unified event system
         this.registerEvent(event, listener, priority, executor, plugin, false);
     }
 
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) {
+    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) { // KissenPaper - integrate unified event system
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + event + " while not enabled");
         }
@@ -100,7 +112,7 @@ class PaperEventManager {
     }
 
     @NotNull
-    private HandlerList getEventListeners(@NotNull Class<? extends Event> type) {
+    private HandlerList getEventListeners(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> type) { // KissenPaper - integrate unified event system
         try {
             Method method = this.getRegistrationClass(type).getDeclaredMethod("getHandlerList");
             method.setAccessible(true);
@@ -111,11 +123,17 @@ class PaperEventManager {
     }
 
     @NotNull
-    private Class<? extends Event> getRegistrationClass(@NotNull Class<? extends Event> clazz) {
+    private Class<? extends net.kissenpvp.core.api.event.EventClass> getRegistrationClass(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> clazz) { // KissenPaper - integrate unified event system
         try {
             clazz.getDeclaredMethod("getHandlerList");
             return clazz;
         } catch (NoSuchMethodException e) {
+            // KissenPaper start - integrate unified event system
+            if(!Listener.class.isAssignableFrom(clazz))
+            {
+                return net.kissenpvp.paper.event.KissenEventImplementation.class;
+            }
+            // KissenPaper end - integrate unified event system
             if (clazz.getSuperclass() != null
                 && !clazz.getSuperclass().equals(Event.class)
                 && Event.class.isAssignableFrom(clazz.getSuperclass())) {
@@ -128,8 +146,8 @@ class PaperEventManager {
 
     // JavaPluginLoader
     @NotNull
-    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull final Plugin plugin) {
-        Map<Class<? extends Event>, Set<RegisteredListener>> ret = new HashMap<>();
+    public Map<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> createRegisteredListeners(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull final Plugin plugin) { // KissenPaper - integrate unified event system
+        Map<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> ret = new HashMap<>();
 
         Set<Method> methods;
         try {
@@ -143,6 +161,16 @@ class PaperEventManager {
             return ret;
         }
 
+        // KissenPaper start - integrate unified event system
+        if(!(listener instanceof Listener))
+        {
+            EventExecutor executor = this::callUnknownEvent;
+            RegisteredListener registeredListener = new RegisteredListener(listener, executor, EventPriority.NORMAL, plugin, false);
+            Set<RegisteredListener> eventSet = ret.computeIfAbsent(net.kissenpvp.paper.event.KissenEventImplementation.class, k -> new HashSet<>());
+            eventSet.add(registeredListener);
+        }
+        // KissenPaper end - integrate unified event system
+
         for (final Method method : methods) {
             final EventHandler eh = method.getAnnotation(EventHandler.class);
             if (eh == null) continue;
@@ -152,15 +180,15 @@ class PaperEventManager {
                 continue;
             }
             final Class<?> checkClass;
-            if (method.getParameterTypes().length != 1 || !Event.class.isAssignableFrom(checkClass = method.getParameterTypes()[0])) {
+            if (method.getParameterTypes().length != 1 || !net.kissenpvp.core.api.event.EventClass.class.isAssignableFrom(checkClass = method.getParameterTypes()[0])) { // KissenPaper - integrate unified event system
                 plugin.getLogger().severe(plugin.getPluginMeta().getDisplayName() + " attempted to register an invalid EventHandler method signature \"" + method.toGenericString() + "\" in " + listener.getClass());
                 continue;
             }
-            final Class<? extends Event> eventClass = checkClass.asSubclass(Event.class);
+            final Class<? extends net.kissenpvp.core.api.event.EventClass> eventClass = checkClass.asSubclass(net.kissenpvp.core.api.event.EventClass.class); // KissenPaper - integrate unified event system
             method.setAccessible(true);
             Set<RegisteredListener> eventSet = ret.computeIfAbsent(eventClass, k -> new HashSet<>());
 
-            for (Class<?> clazz = eventClass; Event.class.isAssignableFrom(clazz); clazz = clazz.getSuperclass()) {
+            for (Class<?> clazz = eventClass; net.kissenpvp.core.api.event.EventClass.class.isAssignableFrom(clazz); clazz = clazz.getSuperclass()) { // KissenPaper - integrate unified event system
                 // This loop checks for extending deprecated events
                 if (clazz.getAnnotation(Deprecated.class) != null) {
                     Warning warning = clazz.getAnnotation(Warning.class);
@@ -191,4 +219,14 @@ class PaperEventManager {
     public void clearEvents() {
         HandlerList.unregisterAll();
     }
+
+    // KissenPaper start - integrate unified event system
+    private <T extends net.kissenpvp.core.api.event.EventClass> void callUnknownEvent(@NotNull net.kissenpvp.core.api.event.EventListener<T> eventListener, @NotNull net.kissenpvp.core.api.event.EventClass eventClass)
+    {
+        try
+        {
+            eventListener.call((T) eventClass);
+        } catch (ClassCastException ignored) {}
+    }
+    // KissenPaper end - integrate unified event system
 }
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
index 8f8a43fa4cefaa8a01c571f2ffc8fe35aa687d84..4299c924572408d95fba8cf8675406c14245ceee 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -122,22 +122,22 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
     // Event manipulation
 
     @Override
-    public void callEvent(@NotNull Event event) throws IllegalStateException {
+    public void callEvent(@NotNull net.kissenpvp.core.api.event.EventClass event) throws IllegalStateException { // KissenPaper - integrate unified event system
         this.paperEventManager.callEvent(event);
     }
 
     @Override
-    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin) {
+    public void registerEvents(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull Plugin plugin) { // KissenPaper - integrate unified event system
         this.paperEventManager.registerEvents(listener, plugin);
     }
 
     @Override
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) {
+    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) { // KissenPaper - integrate unified event system
         this.paperEventManager.registerEvent(event, listener, priority, executor, plugin);
     }
 
     @Override
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) {
+    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) { // KissenPaper - integrate unified event system
         this.paperEventManager.registerEvent(event, listener, priority, executor, plugin, ignoreCancelled);
     }
 
diff --git a/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
index 2a84b413edf6ab6d1146a8faf75cbdec703f47d7..4db1b0bede75d6e1db7e9c4061234ce52d349f74 100644
--- a/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
+++ b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
@@ -25,7 +25,9 @@ import net.kissenpvp.core.api.database.connection.DatabaseImplementation;
 import net.kissenpvp.core.api.database.meta.ObjectMeta;
 import net.kissenpvp.core.api.networking.client.entitiy.ConsoleClient;
 import net.kissenpvp.core.base.KissenCore;
+import net.kissenpvp.core.event.EventImplementation;
 import net.kissenpvp.paper.api.base.PaperKissen;
+<<<<<<< HEAD
 import net.kissenpvp.paper.database.KissenPaperConfigurationImplementation;
 import net.kissenpvp.paper.database.PrivateDatabaseDns;
 import net.kissenpvp.paper.database.UsePrivate;
@@ -39,6 +41,9 @@ import net.kissenpvp.paper.message.localization.KissenPaperLocalizationImplement
 import net.kissenpvp.paper.permission.KissenPaperPermissionImplementation;
 import net.kissenpvp.paper.user.KissenPaperUserImplementation;
 import net.kissenpvp.paper.user.rank.KissenPaperRankImplementation;
+=======
+import net.kissenpvp.paper.event.KissenEventImplementation;
+>>>>>>> ff6499c85 (Integrated event system from kissen into paper)
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.scheduler.CraftScheduler;
 import org.bukkit.plugin.Plugin;
@@ -79,6 +84,7 @@ public class KissenPaperCore extends KissenCore implements PaperKissen {
         loader.put(BanImplementation.class, new KissenPaperBanImplementation());
         loader.put(KissenConfirmationImplementation.class, new KissenPaperConfirmationImplementation());
         loader.put(KissenPaperAdvancementImplementation.class, new KissenPaperAdvancementImplementation());
+        loader.put(EventImplementation.class, new KissenEventImplementation());
         super.loadImplementations(loader);
     }
 
diff --git a/src/main/java/net/kissenpvp/paper/event/KissenEventImplementation.java b/src/main/java/net/kissenpvp/paper/event/KissenEventImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..715d1f9d2a8bcbf2c01ef90c64279d2b12adac17
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/event/KissenEventImplementation.java
@@ -0,0 +1,29 @@
+package net.kissenpvp.paper.event;
+
+import net.kissenpvp.core.api.event.Cancellable;
+import net.kissenpvp.core.api.event.EventClass;
+import net.kissenpvp.core.event.EventImplementation;
+import org.bukkit.Bukkit;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+public class KissenEventImplementation implements EventImplementation, EventClass {
+
+    private final static HandlerList HANDLER_LIST = new HandlerList();
+    @Override
+    public boolean call(@NotNull EventClass eventClass) {
+        Bukkit.getPluginManager().callEvent(eventClass);
+
+        if (eventClass instanceof Cancellable cancellable) {
+            return !cancellable.isCancelled();
+        } else if (eventClass instanceof org.bukkit.event.Cancellable cancellable) {
+            return !cancellable.isCancelled();
+        }
+
+        return true;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/permission/command/PermissionCommand.java b/src/main/java/net/kissenpvp/paper/permission/command/PermissionCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..4b96b6a41ca3ba9c0fce327cabcb02dcd10d6e6d
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/permission/command/PermissionCommand.java
@@ -0,0 +1,278 @@
+package net.kissenpvp.paper.permission.command;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.command.annotations.ArgumentName;
+import net.kissenpvp.core.api.command.annotations.CommandData;
+import net.kissenpvp.core.api.command.exception.ArgumentMissingException;
+import net.kissenpvp.core.api.message.ThemeProvider;
+import net.kissenpvp.core.api.util.PageBuilder;
+import net.kissenpvp.core.api.util.PageImplementation;
+import net.kissenpvp.paper.api.base.Context;
+import net.kissenpvp.paper.api.permission.PaperGroupablePermissionEntry;
+import net.kissenpvp.paper.api.permission.PaperPermission;
+import net.kissenpvp.paper.api.permission.PaperPermissionGroup;
+import net.kissenpvp.paper.api.permission.PaperPermissionImplementation;
+import net.kissenpvp.paper.permission.PermissionParser;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.TranslatableComponent;
+import net.kyori.adventure.text.format.TextColor;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Comparator;
+import java.util.List;
+import java.util.Optional;
+import java.util.Set;
+
+public class PermissionCommand
+{
+    @CommandData(value = "permission", permission = "*")
+    public void permissionGroup(CommandPayload<CommandSender> commandPayload)
+    {
+        throw new ArgumentMissingException();
+    }
+
+    @CommandData(value = "permission.user", permission = "*", runAsync = true)
+    public void permissionUser(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull OfflinePlayer player, @NotNull PermissionParser.PermissionArgument permission, @NotNull @ArgumentName("value") Optional<PermissionAction> value)
+    {
+        commandPayload.confirmRequest(() -> commandPayload.getSender().sendMessage(
+                execute(player, permission.permission(), value.orElse(null))));
+    }
+
+    @CommandData(value = "permission.user.wipe", permission = "*", runAsync = true)
+    public void permissionUserWipe(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull OfflinePlayer player)
+    {
+        commandPayload.getSender().sendMessage(player.wipePermissions() + " permissions gewiped");
+    }
+
+    @CommandData(value = "permission.group", permission = "*", runAsync = true)
+    public void permissionGroup(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull PaperPermissionGroup group, @NotNull PermissionParser.PermissionArgument permission, @NotNull @ArgumentName("value") Optional<PermissionAction> value)
+    {
+        commandPayload.confirmRequest(() -> commandPayload.getSender().sendMessage(
+                execute(group, permission.permission(), value.orElse(null))));
+    }
+
+    @CommandData(value = "permission.group.create", permission = "*", runAsync = true)
+    public void permissionGroupCreate(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull String group)
+    {
+        PaperPermissionImplementation implementation = Bukkit.getKissen().getImplementation(PaperPermissionImplementation.class);
+        PaperPermissionGroup permissionGroup = implementation.getGroupNotNull(group);
+        Component message = Component.translatable("server.permission.group.created", Component.text(group));
+        commandPayload.getSender().sendMessage(message);
+    }
+
+    @CommandData(value = "permission.group.delete", permission = "*", runAsync = true)
+    public void permissionGroupCreate(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull PaperPermissionGroup group)
+    {
+        group.delete();
+        Component message = Component.translatable("server.permission.group.deleted", group.displayName());
+        commandPayload.getSender().sendMessage(message);
+    }
+
+    @CommandData(value = "permission.group.wipe", permission = "*", runAsync = true)
+    public void permissionGroupWipe(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull PaperPermissionGroup group)
+    {
+        commandPayload.getSender().sendMessage(Component.translatable("server.permission.groups.clear", commandPayload.getSender().displayName(), Component.text(group.wipeGroups())));
+    }
+
+    @CommandData(value = "group", permission = "*", runAsync = true)
+    public void group() {throw new ArgumentMissingException();}
+
+    @CommandData(value = "group.add.user", permission = "*", runAsync = true)
+    public void groupAddUser(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull OfflinePlayer player, @NotNull PaperPermissionGroup group)
+    {
+        commandPayload.getSender().sendMessage(executor().setGroup(true, player, group));
+    }
+
+    @CommandData(value = "group.wipe.user", permission = "*", runAsync = true)
+    public void groupWipeUser(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull OfflinePlayer player)
+    {
+        commandPayload.getSender().sendMessage(Component.translatable("server.permission.groups.clear", player.displayName(), Component.text(player.wipeGroups())));
+    }
+
+    @CommandData(value = "group.remove.user", permission = "*", runAsync = true)
+    public void groupRemoveUser(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull OfflinePlayer player, @NotNull PaperPermissionGroup group)
+    {
+        commandPayload.getSender().sendMessage(executor().setGroup(false, player, group));
+    }
+
+    @CommandData(value = "group.add.group", permission = "*", runAsync = true)
+    public void groupAddGroup(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull PaperPermissionGroup group, @NotNull PaperPermissionGroup group1)
+    {
+        commandPayload.getSender().sendMessage(executor().setGroup(true, group, group1));
+    }
+
+    @CommandData(value = "group.remove.group", permission = "*", runAsync = true)
+    public void groupRemoveGroup(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull PaperPermissionGroup group, @NotNull PaperPermissionGroup group1)
+    {
+        commandPayload.getSender().sendMessage(executor().setGroup(false, group, group1));
+    }
+
+    @CommandData(value = "group.wipe.group", permission = "*", runAsync = true)
+    public void groupWipeGroup(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull PaperPermissionGroup group)
+    {
+        commandPayload.getSender().sendMessage(Component.translatable("server.permission.permissions.clear", group.displayName(), Component.text(group.wipeGroups())));
+    }
+
+    @CommandData(value = "permissioninfo", aliases = {"peri"}, runAsync = true)
+    public void permissionInfo() {throw new ArgumentMissingException();}
+
+    @CommandData(value = "permissioninfo.user", runAsync = true)
+    public void permissionInfoUser(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull OfflinePlayer player, @NotNull @ArgumentName("page/permission") Optional<String> data)
+    {
+        commandPayload.getSender().sendMessage(info(player, data.orElse(null)));
+    }
+
+    @CommandData(value = "permissioninfo.group", runAsync = true)
+    public void permissionInfoGroup(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull PaperPermissionGroup group, @NotNull @ArgumentName("page/permission") Optional<String> data)
+    {
+        commandPayload.getSender().sendMessage(info(group, data.orElse(null)));
+    }
+
+    /**
+     * Generates an information Component based on the provided PaperGroupablePermissionEntry and optional data.
+     *
+     * @param entry The PaperGroupablePermissionEntry for which information is generated.
+     * @param data  Optional data, can be null or a String representation of an integer.
+     *              If null, a default information Component is generated.
+     *              If a valid integer string, information Component is generated based on the parsed integer.
+     *              If an invalid integer string, information Component is generated based on the raw data.
+     * @return A Component representing the generated information.
+     * @throws NullPointerException if entry is null.
+     */
+    private @NotNull Component info(@NotNull PaperGroupablePermissionEntry entry, @Nullable String data)
+    {
+        if (data == null)
+        {
+            return infoComponent(entry, 1);
+        }
+
+        try
+        {
+            return infoComponent(entry, Integer.parseInt(data));
+        }
+        catch (NumberFormatException ignored) {}
+
+        return infoComponent(entry, data);
+    }
+
+    /**
+     * Generates an information {@link Component} displaying details about the permissions of a {@link PaperGroupablePermissionEntry}.
+     *
+     * @param permissionEntry The {@link PaperGroupablePermissionEntry} for which information is displayed.
+     * @param page            The page number for paginating the information (if applicable).
+     * @return A formatted {@link Component} containing information about the permissions of the specified entry.
+     */
+    private @NotNull Component infoComponent(@NotNull PaperGroupablePermissionEntry permissionEntry, int page)
+    {
+        Set<PaperPermission> permissionSet = permissionEntry.getPermissionList();
+        if (permissionSet.isEmpty())
+        {
+            return Component.translatable("server.permission.info.clear", permissionEntry.displayName());
+        }
+
+        Comparator<PaperPermission> comparator = (a, b) -> CharSequence.compare(a.getOwner().getPermissionID(),
+                b.getOwner().getPermissionID());
+
+        PageImplementation pageBuilder = Bukkit.getKissen().getImplementation(PageImplementation.class);
+        List<PaperPermission> sorted = permissionSet.stream().sorted(comparator).toList();
+
+        PageBuilder<PaperPermission> permissions = pageBuilder.createPageBuilder(sorted);
+
+        Component header = permissions.getHeader(permissionEntry.displayName(), page);
+        Component footer = permissions.getFooter(permissionEntry.displayName(), page);
+
+        TextComponent.Builder builder = Component.text().append(header);
+        permissions.getEntries(page).forEach(per ->
+        {
+            TextColor statusColor = per.getValue() ? ThemeProvider.enabled() : ThemeProvider.disabled();
+            Component[] args = {
+                    Component.text(per.getValue() ? "✔" : "❌").color(statusColor),
+                    per.getOwner().displayName().color(ThemeProvider.secondary()),
+                    Component.text(per.getName()).color(ThemeProvider.general())
+            };
+            builder.appendNewline().append(Component.translatable("server.permission.info.compact", args));
+        });
+        builder.appendNewline().append(footer);
+        return builder.asComponent();
+    }
+
+    /**
+     * Generates an information {@link Component} displaying details about a specific permission of a {@link PaperGroupablePermissionEntry}.
+     *
+     * @param permissionEntry The {@link PaperGroupablePermissionEntry} for which information is displayed.
+     * @param permission      The name of the specific permission.
+     * @return A formatted {@link Component} containing information about the specified permission of the entry.
+     */
+    private @NotNull Component infoComponent(@NotNull PaperGroupablePermissionEntry permissionEntry, @NotNull String permission)
+    {
+        return permissionEntry.getPermission(permission).map(paperPermission ->
+        {
+
+            Component header = Component.translatable("server.command.general.header", permissionEntry.displayName());
+            Component footer = Component.translatable("server.command.general.footer", permissionEntry.displayName());
+            TranslatableComponent keyValue = Component.translatable("server.command.general.key.value");
+
+            Component id = Component.translatable("server.general.id").color(ThemeProvider.general());
+            Component owner = Component.translatable("server.permission.owner").color(ThemeProvider.general());
+
+            TextComponent.Builder builder = Component.text().appendNewline().append(header);
+            builder.appendNewline().append(keyValue.arguments(id, Component.text(paperPermission.getName())));
+            builder.appendNewline().append(keyValue.arguments(owner, paperPermission.getOwner().displayName()));
+            builder.appendNewline().append(footer);
+            return builder.asComponent();
+        }).orElseGet(() -> Component.translatable("server.permission.entity.failed", permissionEntry.displayName(),
+                Component.text(permission)));
+    }
+
+    /**
+     * Executes a permission-related operation based on the provided parameters.
+     *
+     * @param entry      The PaperGroupablePermissionEntry to perform the operation on.
+     * @param permission The permission string involved in the operation.
+     * @param action     The PermissionAction indicating the action to be performed.
+     *                   If null, the permission will be set without considering a specific action.
+     * @return A Component representing the result of the permission operation.
+     * @throws NullPointerException if entry, permission, or executor() result in null.
+     */
+    private @NotNull Component execute(@NotNull PaperGroupablePermissionEntry entry, @NotNull String permission, @Nullable PermissionAction action)
+    {
+        PermissionCommandExecutor executor = executor();
+        if (action == null)
+        {
+            return executor.setPermission(entry, permission, null);
+        }
+
+        if (action.equals(PermissionAction.UNSET))
+        {
+            return executor.unsetPermission(entry, permission);
+        }
+
+        return executor.setPermission(entry, permission, Boolean.parseBoolean(action.name()));
+    }
+
+    /**
+     * Retrieves a new instance of PermissionCommandExecutor with the context set to LOCAL.
+     *
+     * @return A new PermissionCommandExecutor with the context set to LOCAL.
+     */
+    private @NotNull PermissionCommandExecutor executor()
+    {
+        return new PermissionCommandExecutor(Context.LOCAL);
+    }
+
+    /**
+     * Enum representing possible actions for permission operations.
+     */
+    public enum PermissionAction
+    {
+        TRUE,
+        FALSE,
+        UNSET
+    }
+}
diff --git a/src/test/java/io/papermc/paper/plugin/SyntheticEventTest.java b/src/test/java/io/papermc/paper/plugin/SyntheticEventTest.java
index 2a7408ed5d9a415333212cadd7fefcd03785afbf..937fd2067273e74fa8a0e0dff2e3b0d52d2f874b 100644
--- a/src/test/java/io/papermc/paper/plugin/SyntheticEventTest.java
+++ b/src/test/java/io/papermc/paper/plugin/SyntheticEventTest.java
@@ -1,7 +1,6 @@
 package io.papermc.paper.plugin;
 
 import io.papermc.paper.plugin.manager.PaperPluginManagerImpl;
-import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
@@ -12,8 +11,13 @@ public class SyntheticEventTest {
 
     @Test
     public void test() {
+        // KissenPaper start
+        org.bukkit.Server server = org.mockito.Mockito.mock(org.bukkit.Server.class);
+        org.mockito.Mockito.when(server.isPrimaryThread()).thenReturn(true);
+        // KissenPaper end
+
         PaperTestPlugin paperTestPlugin = new PaperTestPlugin("synthetictest");
-        PaperPluginManagerImpl paperPluginManager = new PaperPluginManagerImpl(Bukkit.getServer(), null, null);
+        PaperPluginManagerImpl paperPluginManager = new PaperPluginManagerImpl(server, null, null); // KissenPaper
 
         TestEvent event = new TestEvent(false);
         Impl impl = new Impl();
