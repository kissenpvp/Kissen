From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Thu, 10 Aug 2023 22:57:56 +0200
Subject: [PATCH] Reworked the message system used by paper (spigot and bukkit)
 to make it use localized messages wherever it can.

Signed-off-by: Groldi <chniucg@gmail.com>

diff --git a/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java b/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java
index ef0e834c164b0ccc1a61b349348e6799733d66d9..8ea08539e8e89ea3cf49aec4a6f026b482756a21 100644
--- a/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java
+++ b/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java
@@ -33,96 +33,112 @@ public final class LegacyPaperConfig {
     // must be run BEFORE the "settings" flatten
     private static ConfigurationTransformation.Versioned versioned() {
         return ConfigurationTransformation.versionedBuilder()
-            .versionKey(Configuration.LEGACY_CONFIG_VERSION_FIELD)
-            .addVersion(11, ConfigurationTransformation.builder().addAction(path("settings", "play-in-use-item-spam-threshold"), TransformAction.rename("incoming-packet-spam-threshold")).build())
-            .addVersion(14, ConfigurationTransformation.builder().addAction(path("settings", "spam-limiter", "tab-spam-increment"), (path, value) -> {
-                if (value.getInt() == 10) {
-                    value.set(2);
-                }
-                return null;
-            }).build())
-            .addVersion(15, ConfigurationTransformation.builder().addAction(path("settings"), (path, value) -> {
-                value.node("async-chunks", "threads").set(-1);
-                return null;
-            }).build())
-            .addVersion(21, ConfigurationTransformation.builder().addAction(path("use-display-name-in-quit-message"), (path, value) -> new Object[]{"settings", "use-display-name-in-quit-message"}).build())
-            .addVersion(23, ConfigurationTransformation.builder().addAction(path("settings", "chunk-loading", "global-max-chunk-load-rate"), (path, value) -> {
-                if (value.getDouble() == 300.0) {
-                    value.set(-1.0);
-                }
-                return null;
-            }).build())
-            .addVersion(25, ConfigurationTransformation.builder().addAction(path("settings", "chunk-loading", "player-max-concurrent-loads"), (path, value) -> {
-                if (value.getDouble() == 4.0) {
-                    value.set(20.0);
-                }
-                return null;
-            }).build())
-            .build();
+                .versionKey(Configuration.LEGACY_CONFIG_VERSION_FIELD)
+                .addVersion(11, ConfigurationTransformation.builder()
+                        .addAction(path("settings", "play-in-use-item-spam-threshold"), TransformAction.rename("incoming-packet-spam-threshold"))
+                        .build())
+                .addVersion(14, ConfigurationTransformation.builder()
+                        .addAction(path("settings", "spam-limiter", "tab-spam-increment"), (path, value) -> {
+                            if (value.getInt() == 10) {
+                                value.set(2);
+                            }
+                            return null;
+                        })
+                        .build())
+                .addVersion(15, ConfigurationTransformation.builder().addAction(path("settings"), (path, value) -> {
+                    value.node("async-chunks", "threads").set(-1);
+                    return null;
+                }).build())
+                .addVersion(21, ConfigurationTransformation.builder()
+                        .addAction(path("use-display-name-in-quit-message"), (path, value) -> new Object[]{"settings", "use-display-name-in-quit-message"})
+                        .build())
+                .addVersion(23, ConfigurationTransformation.builder()
+                        .addAction(path("settings", "chunk-loading", "global-max-chunk-load-rate"), (path, value) -> {
+                            if (value.getDouble() == 300.0) {
+                                value.set(-1.0);
+                            }
+                            return null;
+                        })
+                        .build())
+                .addVersion(25, ConfigurationTransformation.builder()
+                        .addAction(path("settings", "chunk-loading", "player-max-concurrent-loads"), (path, value) -> {
+                            if (value.getDouble() == 4.0) {
+                                value.set(20.0);
+                            }
+                            return null;
+                        })
+                        .build())
+                .build();
     }
 
     // other non-versioned transforms found in PaperConfig
     // must be run BEFORE the "settings" flatten
     private static ConfigurationTransformation notVersioned(final YamlConfiguration spigotConfiguration) {
         return ConfigurationTransformation.builder()
-            .addAction(path("settings"), (path, value) -> {
-                final ConfigurationNode node = value.node("async-chunks");
-                if (node.hasChild("load-threads")) {
-                    if (!node.hasChild("threads")) {
-                        node.node("threads").set(node.node("load-threads").getInt());
+                .addAction(path("settings"), (path, value) -> {
+                    final ConfigurationNode node = value.node("async-chunks");
+                    if (node.hasChild("load-threads")) {
+                        if (!node.hasChild("threads")) {
+                            node.node("threads").set(node.node("load-threads").getInt());
+                        }
+                        node.removeChild("load-threads");
                     }
-                    node.removeChild("load-threads");
-                }
-                node.removeChild("generation");
-                node.removeChild("enabled");
-                node.removeChild("thread-per-world-generation");
-                return null;
-            })
-            .addAction(path("allow-perm-block-break-exploits"), (path, value) -> new Object[]{"settings", "unsupported-settings", "allow-permanent-block-break-exploits"})
-            .addAction(path("settings", "unsupported-settings", "allow-tnt-duplication"), TransformAction.rename("allow-piston-duplication"))
-            .addAction(path("settings", "save-player-data"), (path, value) -> {
-                final @Nullable Object val = value.raw();
-                if (val instanceof Boolean bool) {
-                    spigotConfiguration.set("players.disable-saving", !bool);
-                }
-                value.raw(null);
-                return null;
-            })
-            .addAction(path("settings", "log-named-entity-deaths"), (path, value) -> {
-                final @Nullable Object val = value.raw();
-                if (val instanceof Boolean bool && !bool) {
-                    spigotConfiguration.set("settings.log-named-deaths", false);
-                }
-                value.raw(null);
-                return null;
-            })
-            .build();
+                    node.removeChild("generation");
+                    node.removeChild("enabled");
+                    node.removeChild("thread-per-world-generation");
+                    return null;
+                })
+                .addAction(path("allow-perm-block-break-exploits"), (path, value) -> new Object[]{"settings", "unsupported-settings", "allow-permanent-block-break-exploits"})
+                .addAction(path("settings", "unsupported-settings", "allow-tnt-duplication"), TransformAction.rename("allow-piston-duplication"))
+                .addAction(path("settings", "save-player-data"), (path, value) -> {
+                    final @Nullable Object val = value.raw();
+                    if (val instanceof Boolean bool) {
+                        spigotConfiguration.set("players.disable-saving", !bool);
+                    }
+                    value.raw(null);
+                    return null;
+                })
+                .addAction(path("settings", "log-named-entity-deaths"), (path, value) -> {
+                    final @Nullable Object val = value.raw();
+                    if (val instanceof Boolean bool && !bool) {
+                        spigotConfiguration.set("settings.log-named-deaths", false);
+                    }
+                    value.raw(null);
+                    return null;
+                })
+                .build();
     }
 
     // transforms to new format with configurate
     // must be run AFTER the "settings" flatten
     public static ConfigurationTransformation toNewFormat() {
         return ConfigurationTransformation.chain(
-            ConfigurationTransformation.versionedBuilder().versionKey(Configuration.LEGACY_CONFIG_VERSION_FIELD).addVersion(Configuration.FINAL_LEGACY_VERSION + 1, newFormatTransformation()).build(),
-            ConfigurationTransformation.builder().addAction(path(Configuration.LEGACY_CONFIG_VERSION_FIELD), TransformAction.rename(Configuration.VERSION_FIELD)).build() // rename to _version to place at the top
+                ConfigurationTransformation.versionedBuilder()
+                        .versionKey(Configuration.LEGACY_CONFIG_VERSION_FIELD)
+                        .addVersion(Configuration.FINAL_LEGACY_VERSION + 1, newFormatTransformation())
+                        .build(),
+                ConfigurationTransformation.builder()
+                        .addAction(path(Configuration.LEGACY_CONFIG_VERSION_FIELD), TransformAction.rename(Configuration.VERSION_FIELD))
+                        .build() // rename to _version to place at the top
         );
     }
 
     private static ConfigurationTransformation newFormatTransformation() {
         final ConfigurationTransformation.Builder builder = ConfigurationTransformation.builder()
-            .addAction(path("verbose"), TransformAction.remove()) // not needed
-            .addAction(path("unsupported-settings", "allow-headless-pistons-readme"), TransformAction.remove())
-            .addAction(path("unsupported-settings", "allow-permanent-block-break-exploits-readme"), TransformAction.remove())
-            .addAction(path("unsupported-settings", "allow-piston-duplication-readme"), TransformAction.remove())
-            .addAction(path("packet-limiter", "limits", "all"), (path, value) -> new Object[]{"packet-limiter", "all-packets"})
-            .addAction(path("packet-limiter", "limits"), (path, value) -> new Object[]{"packet-limiter", "overrides"})
-            .addAction(path("packet-limiter", "overrides", ConfigurationTransformation.WILDCARD_OBJECT), (path, value) -> {
-                final @Nullable Object keyValue = value.key();
-                if (keyValue != null && keyValue.toString().equals("PacketPlayInAutoRecipe")) { // add special cast to handle the default for moj-mapped servers that upgrade the config
-                    return path.with(path.size() - 1, ServerboundPlaceRecipePacket.class.getSimpleName()).array();
-                }
-                return null;
-            }).addAction(path("loggers"), TransformAction.rename("logging"));
+                .addAction(path("verbose"), TransformAction.remove()) // not needed
+                .addAction(path("unsupported-settings", "allow-headless-pistons-readme"), TransformAction.remove())
+                .addAction(path("unsupported-settings", "allow-permanent-block-break-exploits-readme"), TransformAction.remove())
+                .addAction(path("unsupported-settings", "allow-piston-duplication-readme"), TransformAction.remove())
+                .addAction(path("packet-limiter", "limits", "all"), (path, value) -> new Object[]{"packet-limiter", "all-packets"})
+                .addAction(path("packet-limiter", "limits"), (path, value) -> new Object[]{"packet-limiter", "overrides"})
+                .addAction(path("packet-limiter", "overrides", ConfigurationTransformation.WILDCARD_OBJECT), (path, value) -> {
+                    final @Nullable Object keyValue = value.key();
+                    if (keyValue != null && keyValue.toString()
+                            .equals("PacketPlayInAutoRecipe")) { // add special cast to handle the default for moj-mapped servers that upgrade the config
+                        return path.with(path.size() - 1, ServerboundPlaceRecipePacket.class.getSimpleName()).array();
+                    }
+                    return null;
+                }).addAction(path("loggers"), TransformAction.rename("logging"));
 
         moveFromRootAndRename(builder, "incoming-packet-spam-threshold", "incoming-packet-threshold", "spam-limiter");
 
@@ -174,6 +190,7 @@ public final class LegacyPaperConfig {
     private static void miniMessageWithTranslatable(final ConfigurationTransformation.Builder builder, final Predicate<String> englishCheck, final String i18nKey, final String... strPath) {
         miniMessageWithTranslatable(builder, englishCheck, Component.translatable(i18nKey), strPath);
     }
+
     private static void miniMessageWithTranslatable(final ConfigurationTransformation.Builder builder, final Predicate<String> englishCheck, final Component component, final String... strPath) {
         builder.addAction(path((Object[]) strPath), (path, value) -> {
             final @Nullable Object val = value.raw();
@@ -201,7 +218,9 @@ public final class LegacyPaperConfig {
 
     @SuppressWarnings("deprecation") // valid use to convert legacy string to mini-message in legacy migration
     private static String miniMessage(final String input) {
-        return MiniMessage.miniMessage().serialize(LegacyComponentSerializer.legacySection().deserialize(ChatColor.translateAlternateColorCodes('&', input)));
+        return MiniMessage.miniMessage()
+                .serialize(LegacyComponentSerializer.legacySection()
+                        .deserialize(ChatColor.translateAlternateColorCodes('&', input)));
     }
 
     private static void moveFromRootToMisc(final ConfigurationTransformation.Builder builder, final String key) {
diff --git a/src/main/java/net/kissenpvp/paper/message/localization/KissenPaperLocalizationImplementation.java b/src/main/java/net/kissenpvp/paper/message/localization/KissenPaperLocalizationImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..cf3730e36c870b32fdbd757928029ede72fac7aa
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/message/localization/KissenPaperLocalizationImplementation.java
@@ -0,0 +1,37 @@
+package net.kissenpvp.paper.message.localization;
+
+import net.kissenpvp.core.message.KissenComponentSerializer;
+import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
+import net.kyori.adventure.text.Component;
+
+import java.text.MessageFormat;
+
+public class KissenPaperLocalizationImplementation extends KissenLocalizationImplementation {
+
+    @Override
+    public boolean postStart() {
+
+        //Bukkit
+        register("bukkit.shutdown-message", getTranslation("multiplayer.disconnect.server_shutdown"));
+
+        //Spigot
+        register("spigot.whitelist", getTranslation("multiplayer.disconnect.not_whitelisted"));
+        register("spigot.unknown-command", new MessageFormat("Unknown command. Type \"/help\" for help."));
+        register("spigot.server-full", getTranslation("multiplayer.disconnect.server_full"));
+        register("spigot.outdated-client", getTranslation("multiplayer.disconnect.outdated_client"));
+        register("spigot.outdated-server", getTranslation("multiplayer.disconnect.outdated_server"));
+        register("spigot.restart", getTranslation("multiplayer.disconnect.server_shutdown"));
+
+        //Paper
+        register("paper.kick.connection-throttle", new MessageFormat("Connection throttled! Please wait before reconnecting."));
+        register("paper.unauthorized", new MessageFormat("You do not have the permission to perform this command."));
+
+        return super.postStart();
+    }
+
+    private MessageFormat getTranslation(String languageKey) {
+        return new MessageFormat(KissenComponentSerializer.getInstance()
+                .getMiniSerializer()
+                .serialize(Component.translatable(languageKey)));
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/permission/KissenPaperPermissible.java b/src/main/java/net/kissenpvp/paper/permission/KissenPaperPermissible.java
index 61dc4e7f33a933e0fddbb8b087df39497d9792d4..82dcf477f21b551d2e2e064b4f67c4e576a7fbb7 100644
--- a/src/main/java/net/kissenpvp/paper/permission/KissenPaperPermissible.java
+++ b/src/main/java/net/kissenpvp/paper/permission/KissenPaperPermissible.java
@@ -32,11 +32,7 @@ public abstract class KissenPaperPermissible implements KissenPaperGroupablePerm
 
     @Override
     public void permissionUpdate() {
-        for (String name : getPermissionList().stream()
-            .map(net.kissenpvp.core.api.permission.Permission::getName)
-            .collect(Collectors.toSet())) {
-            Bukkit.getServer().getPluginManager().unsubscribeFromPermission(name, parent);
-        }
+        unsubscribe();
 
         Bukkit.getServer().getPluginManager().unsubscribeFromDefaultPerms(false, parent);
         Bukkit.getServer().getPluginManager().unsubscribeFromDefaultPerms(true, parent);
@@ -94,14 +90,14 @@ public abstract class KissenPaperPermissible implements KissenPaperGroupablePerm
         PermissionAttachment result = addAttachment(plugin);
 
         if (Bukkit.getServer()
-            .getScheduler()
-            .scheduleSyncDelayedTask(plugin, new RemoveAttachmentRunnable(result), ticks) == -1) {
+                .getScheduler()
+                .scheduleSyncDelayedTask(plugin, new RemoveAttachmentRunnable(result), ticks) == -1) {
             Bukkit.getServer()
-                .getLogger()
-                .log(Level.WARNING, "Could not add PermissionAttachment to " + ComponentSerializer.getInstance()
-                    .getLegacySerializer()
-                    .serialize(displayName()) + " for plugin " + plugin.getPluginMeta()
-                    .getDisplayName() + ": Scheduler returned -1");
+                    .getLogger()
+                    .log(Level.WARNING, "Could not add PermissionAttachment to " + ComponentSerializer.getInstance()
+                            .getLegacySerializer()
+                            .serialize(displayName()) + " for plugin " + plugin.getPluginMeta()
+                            .getDisplayName() + ": Scheduler returned -1");
             result.remove();
             return null;
         } else {
@@ -121,8 +117,8 @@ public abstract class KissenPaperPermissible implements KissenPaperGroupablePerm
             permissionUpdate();
         } else {
             throw new IllegalArgumentException("Given attachment is not part of Permissible object " + ComponentSerializer.getInstance()
-                .getLegacySerializer()
-                .serialize(displayName()));
+                    .getLegacySerializer()
+                    .serialize(displayName()));
         }
     }
 
@@ -149,10 +145,30 @@ public abstract class KissenPaperPermissible implements KissenPaperGroupablePerm
         Set<KissenPaperAttachmentPermission> kissenPaperAttachmentPermissions = new HashSet<>();
         for (PermissionAttachment permissionAttachment : attachments) {
             permissionAttachment.getPermissions().forEach((key, value) ->
-                kissenPaperAttachmentPermissions.add(new KissenPaperAttachmentPermission(permissionAttachment, key, value, KissenPaperPermissible.this, true)));
+                    kissenPaperAttachmentPermissions.add(new KissenPaperAttachmentPermission(permissionAttachment, key, value, KissenPaperPermissible.this, true)));
         }
 
         return Stream.concat(KissenPaperGroupablePermissionEntry.super.getPermissionList()
-            .stream(), kissenPaperAttachmentPermissions.stream()).collect(Collectors.toSet());
+                .stream(), kissenPaperAttachmentPermissions.stream()).collect(Collectors.toSet());
+    }
+
+    /**
+     * The <code>unsubscribe</code> method is used to deregister all permissions from a parent permission holder in the Bukkit server.
+     *
+     * <p>As a result of calling this method, the permission holder specified by 'parent' would not hold the permissions anymore until re-registered.</p>
+     *
+     * <p>Note: Parent could be a Player, a Group, or any entity that can hold permissions in Bukkit.</p>
+     *
+     * <p>It is advised to call this method when you no longer need the permissions to be associated with the parent or want to clear current permissions before setting new ones.</p>
+     *
+     * @see net.kissenpvp.core.api.permission.Permission
+     * @see org.bukkit.permissions.Permissible
+     */
+    public void unsubscribe() {
+        for (String name : getPermissionList().stream()
+                .map(net.kissenpvp.core.api.permission.Permission::getName)
+                .collect(Collectors.toSet())) {
+            Bukkit.getServer().getPluginManager().unsubscribeFromPermission(name, parent);
+        }
     }
 }
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 1a52772a3614056e9889f6560bad094b035f8ff4..4cc703e8e02c9b5e50f3afe295a35e8738bb1353 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -1,5 +1,6 @@
 package net.minecraft.commands;
 
+import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
 import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
@@ -12,13 +13,6 @@ import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
 import com.mojang.logging.LogUtils;
-
-import java.util.*;
-import java.util.function.Predicate;
-import java.util.function.UnaryOperator;
-import java.util.stream.Collectors;
-import javax.annotation.Nullable;
-
 import net.kissenpvp.core.base.KissenCore;
 import net.kissenpvp.core.message.KissenComponentSerializer;
 import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
@@ -33,100 +27,24 @@ import net.minecraft.core.HolderSet;
 import net.minecraft.core.Registry;
 import net.minecraft.data.registries.VanillaRegistries;
 import net.minecraft.gametest.framework.TestCommand;
-import net.minecraft.network.chat.ClickEvent;
-import net.minecraft.network.chat.CommonComponents;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.ComponentUtils;
-import net.minecraft.network.chat.HoverEvent;
-import net.minecraft.network.chat.MutableComponent;
+import net.minecraft.network.chat.*;
 import net.minecraft.network.protocol.game.ClientboundCommandsPacket;
 import net.minecraft.resources.ResourceKey;
-import net.minecraft.server.commands.AdvancementCommands;
-import net.minecraft.server.commands.AttributeCommand;
-import net.minecraft.server.commands.BanIpCommands;
-import net.minecraft.server.commands.BanListCommands;
-import net.minecraft.server.commands.BanPlayerCommands;
-import net.minecraft.server.commands.BossBarCommands;
-import net.minecraft.server.commands.ClearInventoryCommands;
-import net.minecraft.server.commands.CloneCommands;
-import net.minecraft.server.commands.DamageCommand;
-import net.minecraft.server.commands.DataPackCommand;
-import net.minecraft.server.commands.DeOpCommands;
-import net.minecraft.server.commands.DebugCommand;
-import net.minecraft.server.commands.DefaultGameModeCommands;
-import net.minecraft.server.commands.DifficultyCommand;
-import net.minecraft.server.commands.EffectCommands;
-import net.minecraft.server.commands.EmoteCommands;
-import net.minecraft.server.commands.EnchantCommand;
-import net.minecraft.server.commands.ExecuteCommand;
-import net.minecraft.server.commands.ExperienceCommand;
-import net.minecraft.server.commands.FillBiomeCommand;
-import net.minecraft.server.commands.FillCommand;
-import net.minecraft.server.commands.ForceLoadCommand;
-import net.minecraft.server.commands.FunctionCommand;
-import net.minecraft.server.commands.GameModeCommand;
-import net.minecraft.server.commands.GameRuleCommand;
-import net.minecraft.server.commands.GiveCommand;
-import net.minecraft.server.commands.HelpCommand;
-import net.minecraft.server.commands.ItemCommands;
-import net.minecraft.server.commands.JfrCommand;
-import net.minecraft.server.commands.KickCommand;
-import net.minecraft.server.commands.KillCommand;
-import net.minecraft.server.commands.ListPlayersCommand;
-import net.minecraft.server.commands.LocateCommand;
-import net.minecraft.server.commands.LootCommand;
-import net.minecraft.server.commands.MsgCommand;
-import net.minecraft.server.commands.OpCommand;
-import net.minecraft.server.commands.PardonCommand;
-import net.minecraft.server.commands.PardonIpCommand;
-import net.minecraft.server.commands.ParticleCommand;
-import net.minecraft.server.commands.PerfCommand;
-import net.minecraft.server.commands.PlaceCommand;
-import net.minecraft.server.commands.PlaySoundCommand;
-import net.minecraft.server.commands.PublishCommand;
-import net.minecraft.server.commands.RecipeCommand;
-import net.minecraft.server.commands.ReloadCommand;
-import net.minecraft.server.commands.ReturnCommand;
-import net.minecraft.server.commands.RideCommand;
-import net.minecraft.server.commands.SaveAllCommand;
-import net.minecraft.server.commands.SaveOffCommand;
-import net.minecraft.server.commands.SaveOnCommand;
-import net.minecraft.server.commands.SayCommand;
-import net.minecraft.server.commands.ScheduleCommand;
-import net.minecraft.server.commands.ScoreboardCommand;
-import net.minecraft.server.commands.SeedCommand;
-import net.minecraft.server.commands.SetBlockCommand;
-import net.minecraft.server.commands.SetPlayerIdleTimeoutCommand;
-import net.minecraft.server.commands.SetSpawnCommand;
-import net.minecraft.server.commands.SetWorldSpawnCommand;
-import net.minecraft.server.commands.SpawnArmorTrimsCommand;
-import net.minecraft.server.commands.SpectateCommand;
-import net.minecraft.server.commands.SpreadPlayersCommand;
-import net.minecraft.server.commands.StopCommand;
-import net.minecraft.server.commands.StopSoundCommand;
-import net.minecraft.server.commands.SummonCommand;
-import net.minecraft.server.commands.TagCommand;
-import net.minecraft.server.commands.TeamCommand;
-import net.minecraft.server.commands.TeamMsgCommand;
-import net.minecraft.server.commands.TeleportCommand;
-import net.minecraft.server.commands.TellRawCommand;
-import net.minecraft.server.commands.TimeCommand;
-import net.minecraft.server.commands.TitleCommand;
-import net.minecraft.server.commands.TriggerCommand;
-import net.minecraft.server.commands.WeatherCommand;
-import net.minecraft.server.commands.WhitelistCommand;
-import net.minecraft.server.commands.WorldBorderCommand;
+import net.minecraft.server.commands.*;
 import net.minecraft.server.commands.data.DataCommands;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.profiling.jfr.JvmProfiler;
 import org.bukkit.entity.Player;
-import org.slf4j.Logger;
-
-// CraftBukkit start
-import com.google.common.base.Joiner;
 import org.bukkit.event.player.PlayerCommandSendEvent;
 import org.bukkit.event.server.ServerCommandEvent;
+import org.slf4j.Logger;
+
+import javax.annotation.Nullable;
+import java.util.*;
+import java.util.function.Predicate;
+import java.util.function.UnaryOperator;
+import java.util.stream.Collectors;
 // CraftBukkit end
 
 public class Commands {
@@ -235,7 +153,8 @@ public class Commands {
         // Paper start
         for (final CommandNode<CommandSourceStack> node : this.dispatcher.getRoot().getChildren()) {
             if (node.getRequirement() == com.mojang.brigadier.builder.ArgumentBuilder.<CommandSourceStack>defaultRequirement()) {
-                node.requirement = stack -> stack.source == CommandSource.NULL || stack.getBukkitSender().hasPermission(org.bukkit.craftbukkit.command.VanillaCommandWrapper.getPermission(node));
+                node.requirement = stack -> stack.source == CommandSource.NULL || stack.getBukkitSender()
+                        .hasPermission(org.bukkit.craftbukkit.command.VanillaCommandWrapper.getPermission(node));
             }
         }
         // Paper end
@@ -332,7 +251,7 @@ public class Commands {
                     .getLegacySerializer()
                     .serialize(KissenCore.getInstance()
                             .getImplementation(KissenLocalizationImplementation.class)
-                            .translate("messages.unknown-command", senderLocale));
+                            .translate("spigot.unknown-command", senderLocale));
             // KissenPaper end
 
             try {
@@ -346,7 +265,12 @@ public class Commands {
             } catch (CommandSyntaxException commandsyntaxexception) {
                 // Paper start
                 final net.kyori.adventure.text.TextComponent.Builder builder = net.kyori.adventure.text.Component.text();
-                if ((parseresults.getContext().getNodes().isEmpty() || !this.vanillaCommandNodes.contains(parseresults.getContext().getNodes().get(0).getNode()))) {
+                if ((parseresults.getContext()
+                        .getNodes()
+                        .isEmpty() || !this.vanillaCommandNodes.contains(parseresults.getContext()
+                        .getNodes()
+                        .get(0)
+                        .getNode()))) {
                     // KissenPaper start
                     if (!unknownCommandMessage.isEmpty()) {
                         //pesky bungee chat
@@ -358,58 +282,72 @@ public class Commands {
                     }*/
                     // KissenPaper end
                 } else {
-                // commandlistenerwrapper.sendFailure(ComponentUtils.fromMessage(commandsyntaxexception.getRawMessage()));
-                builder.color(net.kyori.adventure.text.format.NamedTextColor.RED).append(io.papermc.paper.brigadier.PaperBrigadier.componentFromMessage(commandsyntaxexception.getRawMessage()));
-                // Paper end
-                if (commandsyntaxexception.getInput() != null && commandsyntaxexception.getCursor() >= 0) {
-                    int j = Math.min(commandsyntaxexception.getInput().length(), commandsyntaxexception.getCursor());
-                    MutableComponent ichatmutablecomponent = Component.empty().withStyle(ChatFormatting.GRAY).withStyle((chatmodifier) -> {
-                        return chatmodifier.withClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/" + label)); // CraftBukkit // Paper
-                    });
-
-                    if (j > 10) {
-                        ichatmutablecomponent.append(CommonComponents.ELLIPSIS);
+                    // commandlistenerwrapper.sendFailure(ComponentUtils.fromMessage(commandsyntaxexception.getRawMessage()));
+                    builder.color(net.kyori.adventure.text.format.NamedTextColor.RED)
+                            .append(io.papermc.paper.brigadier.PaperBrigadier.componentFromMessage(commandsyntaxexception.getRawMessage()));
+                    // Paper end
+                    if (commandsyntaxexception.getInput() != null && commandsyntaxexception.getCursor() >= 0) {
+                        int j = Math.min(commandsyntaxexception.getInput()
+                                .length(), commandsyntaxexception.getCursor());
+                        MutableComponent ichatmutablecomponent = Component.empty()
+                                .withStyle(ChatFormatting.GRAY)
+                                .withStyle((chatmodifier) -> {
+                                    return chatmodifier.withClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/" + label)); // CraftBukkit // Paper
+                                });
+
+                        if (j > 10) {
+                            ichatmutablecomponent.append(CommonComponents.ELLIPSIS);
+                        }
+
+                        ichatmutablecomponent.append(commandsyntaxexception.getInput()
+                                .substring(Math.max(0, j - 10), j));
+                        if (j < commandsyntaxexception.getInput().length()) {
+                            MutableComponent ichatmutablecomponent1 = Component.literal(commandsyntaxexception.getInput()
+                                    .substring(j)).withStyle(ChatFormatting.RED, ChatFormatting.UNDERLINE);
+
+                            ichatmutablecomponent.append((Component) ichatmutablecomponent1);
+                        }
+
+                        ichatmutablecomponent.append((Component) Component.translatable("command.context.here")
+                                .withStyle(ChatFormatting.RED, ChatFormatting.ITALIC));
+                        // Paper start
+                        // commandlistenerwrapper.sendFailure(ichatmutablecomponent);
+                        builder
+                                .append(net.kyori.adventure.text.Component.newline())
+                                .append(io.papermc.paper.adventure.PaperAdventure.asAdventure(ichatmutablecomponent));
                     }
-
-                    ichatmutablecomponent.append(commandsyntaxexception.getInput().substring(Math.max(0, j - 10), j));
-                    if (j < commandsyntaxexception.getInput().length()) {
-                        MutableComponent ichatmutablecomponent1 = Component.literal(commandsyntaxexception.getInput().substring(j)).withStyle(ChatFormatting.RED, ChatFormatting.UNDERLINE);
-
-                        ichatmutablecomponent.append((Component) ichatmutablecomponent1);
-                    }
-
-                    ichatmutablecomponent.append((Component) Component.translatable("command.context.here").withStyle(ChatFormatting.RED, ChatFormatting.ITALIC));
-                // Paper start
-                    // commandlistenerwrapper.sendFailure(ichatmutablecomponent);
-                    builder
-                        .append(net.kyori.adventure.text.Component.newline())
-                        .append(io.papermc.paper.adventure.PaperAdventure.asAdventure(ichatmutablecomponent));
-                }
                 }
-                org.bukkit.event.command.UnknownCommandEvent event = new org.bukkit.event.command.UnknownCommandEvent(commandlistenerwrapper.getBukkitSender(), s, /* KissenPaper */ unknownCommandMessage /* org.spigotmc.SpigotConfig.unknownCommandMessage.isEmpty() */ .isEmpty() ? null : builder.build());
+                org.bukkit.event.command.UnknownCommandEvent event = new org.bukkit.event.command.UnknownCommandEvent(commandlistenerwrapper.getBukkitSender(), s, /* KissenPaper */ unknownCommandMessage /* org.spigotmc.SpigotConfig.unknownCommandMessage.isEmpty() */.isEmpty() ? null : builder.build());
                 org.bukkit.Bukkit.getServer().getPluginManager().callEvent(event);
                 if (event.message() != null) {
                     commandlistenerwrapper.sendFailure(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.message()), false);
-                // Paper end
+                    // Paper end
                 }
 
                 b1 = 0;
                 return b1;
             } catch (Exception exception) {
-                MutableComponent ichatmutablecomponent2 = Component.literal(exception.getMessage() == null ? exception.getClass().getName() : exception.getMessage());
+                MutableComponent ichatmutablecomponent2 = Component.literal(exception.getMessage() == null ? exception.getClass()
+                        .getName() : exception.getMessage());
 
                 if (Commands.LOGGER.isDebugEnabled()) {
                     Commands.LOGGER.error("Command exception: /{}", s, exception);
                     StackTraceElement[] astacktraceelement = exception.getStackTrace();
 
                     for (int k = 0; k < Math.min(astacktraceelement.length, 3); ++k) {
-                        ichatmutablecomponent2.append("\n\n").append(astacktraceelement[k].getMethodName()).append("\n ").append(astacktraceelement[k].getFileName()).append(":").append(String.valueOf(astacktraceelement[k].getLineNumber()));
+                        ichatmutablecomponent2.append("\n\n")
+                                .append(astacktraceelement[k].getMethodName())
+                                .append("\n ")
+                                .append(astacktraceelement[k].getFileName())
+                                .append(":")
+                                .append(String.valueOf(astacktraceelement[k].getLineNumber()));
                     }
                 }
 
-                commandlistenerwrapper.sendFailure(Component.translatable("command.failed").withStyle((chatmodifier) -> {
-                    return chatmodifier.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, ichatmutablecomponent2));
-                }));
+                commandlistenerwrapper.sendFailure(Component.translatable("command.failed")
+                        .withStyle((chatmodifier) -> {
+                            return chatmodifier.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, ichatmutablecomponent2));
+                        }));
                 if (SharedConstants.IS_RUNNING_IN_IDE) {
                     commandlistenerwrapper.sendFailure(Component.literal(Util.describeError(exception)));
                     Commands.LOGGER.error("'/{}' threw an exception", s, exception);
@@ -426,7 +364,7 @@ public class Commands {
 
     public void sendCommands(ServerPlayer player) {
         // Paper start - Send empty commands if tab completion is disabled
-        if ( org.spigotmc.SpigotConfig.tabComplete < 0 ) { //return; // Spigot
+        if (org.spigotmc.SpigotConfig.tabComplete < 0) { //return; // Spigot
             player.connection.send(new ClientboundCommandsPacket(new RootCommandNode<>()));
             return;
         }
@@ -435,18 +373,18 @@ public class Commands {
         // Register Vanilla commands into builtRoot as before
         // Paper start - Async command map building
         COMMAND_SENDING_POOL.execute(() -> {
-                this.sendAsync(player);
+            this.sendAsync(player);
         });
     }
 
     public static final java.util.concurrent.ThreadPoolExecutor COMMAND_SENDING_POOL = new java.util.concurrent.ThreadPoolExecutor(
-        0, 2, 60L, java.util.concurrent.TimeUnit.SECONDS,
-        new java.util.concurrent.LinkedBlockingQueue<>(),
-        new com.google.common.util.concurrent.ThreadFactoryBuilder()
-            .setNameFormat("Paper Async Command Builder Thread Pool - %1$d")
-            .setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(net.minecraft.server.MinecraftServer.LOGGER))
-            .build(),
-        new java.util.concurrent.ThreadPoolExecutor.DiscardPolicy()
+            0, 2, 60L, java.util.concurrent.TimeUnit.SECONDS,
+            new java.util.concurrent.LinkedBlockingQueue<>(),
+            new com.google.common.util.concurrent.ThreadFactoryBuilder()
+                    .setNameFormat("Paper Async Command Builder Thread Pool - %1$d")
+                    .setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(net.minecraft.server.MinecraftServer.LOGGER))
+                    .build(),
+            new java.util.concurrent.ThreadPoolExecutor.DiscardPolicy()
     );
 
     private void sendAsync(ServerPlayer player) {
@@ -471,7 +409,7 @@ public class Commands {
         // Paper start - Async command map building
         new com.destroystokyo.paper.event.brigadier.AsyncPlayerSendCommandsEvent<CommandSourceStack>(player.getBukkitEntity(), (RootCommandNode) rootcommandnode, false).callEvent(); // Paper
         net.minecraft.server.MinecraftServer.getServer().execute(() -> {
-           runSync(player, bukkit, rootcommandnode);
+            runSync(player, bukkit, rootcommandnode);
         });
     }
 
@@ -502,7 +440,7 @@ public class Commands {
                 commandnode2 = commandnode2.clientNode;
             }
             // Paper end
-            if ( !org.spigotmc.SpigotConfig.sendNamespaced && commandnode2.getName().contains( ":" ) ) continue; // Spigot
+            if (!org.spigotmc.SpigotConfig.sendNamespaced && commandnode2.getName().contains(":")) continue; // Spigot
 
             if (commandnode2.canUse(source)) {
                 ArgumentBuilder argumentbuilder = commandnode2.createBuilder(); // CraftBukkit - decompile error
@@ -571,7 +509,15 @@ public class Commands {
 
     @Nullable
     public static <S> CommandSyntaxException getParseException(ParseResults<S> parse) {
-        return !parse.getReader().canRead() ? null : (parse.getExceptions().size() == 1 ? (CommandSyntaxException) parse.getExceptions().values().iterator().next() : (parse.getContext().getRange().isEmpty() ? CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand().createWithContext(parse.getReader()) : CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownArgument().createWithContext(parse.getReader())));
+        return !parse.getReader().canRead() ? null : (parse.getExceptions()
+                .size() == 1 ? (CommandSyntaxException) parse.getExceptions()
+                .values()
+                .iterator()
+                .next() : (parse.getContext()
+                .getRange()
+                .isEmpty() ? CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand()
+                .createWithContext(parse.getReader()) : CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownArgument()
+                .createWithContext(parse.getReader())));
     }
 
     public static CommandBuildContext createValidationContext(final HolderLookup.Provider registryLookup) {
@@ -613,9 +559,11 @@ public class Commands {
         }).collect(Collectors.toSet());
 
         if (!set1.isEmpty()) {
-            Commands.LOGGER.warn("Missing type registration for following arguments:\n {}", set1.stream().map((argumenttype) -> {
-                return "\t" + argumenttype;
-            }).collect(Collectors.joining(",\n")));
+            Commands.LOGGER.warn("Missing type registration for following arguments:\n {}", set1.stream()
+                    .map((argumenttype) -> {
+                        return "\t" + argumenttype;
+                    })
+                    .collect(Collectors.joining(",\n")));
             throw new IllegalStateException("Unregistered argument types");
         }
     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e4135793607ff6d29f5f56f5cb337a85625f886e..7b5c8d4da64ac06960c64d7c3947cd3c41bb3d30 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1,11 +1,9 @@
 package net.minecraft.server;
 
+import co.aikar.timings.MinecraftTimings;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -13,62 +11,20 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
+import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.DynamicOps;
+import com.mojang.serialization.Lifecycle;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
-import java.awt.image.BufferedImage;
-import java.io.BufferedWriter;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.IOException;
-import java.lang.management.ManagementFactory;
-import java.lang.management.ThreadInfo;
-import java.lang.management.ThreadMXBean;
-import java.net.Proxy;
-import java.nio.file.Files;
-import java.nio.file.LinkOption;
-import java.nio.file.Path;
-import java.security.KeyPair;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
-import java.util.concurrent.RejectedExecutionException;
-import java.util.concurrent.atomic.AtomicReference;
-import java.util.function.BooleanSupplier;
-import java.util.function.Consumer;
-import java.util.function.Function;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-import javax.annotation.Nullable;
-import javax.imageio.ImageIO;
-
+import joptsimple.OptionSet;
 import net.kissenpvp.core.base.KissenCore;
 import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
-import net.minecraft.CrashReport;
-import net.minecraft.ReportedException;
-import net.minecraft.SharedConstants;
-import net.minecraft.SystemReport;
-import net.minecraft.Util;
+import net.minecraft.*;
 import net.minecraft.commands.CommandSource;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.HolderGetter;
-import net.minecraft.core.LayeredRegistryAccess;
-import net.minecraft.core.Registry;
-import net.minecraft.core.RegistryAccess;
+import net.minecraft.core.*;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.data.worldgen.features.MiscOverworldFeatures;
 import net.minecraft.gametest.framework.GameTestTicker;
@@ -81,15 +37,13 @@ import net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket;
 import net.minecraft.network.protocol.game.ClientboundSetTimePacket;
 import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.obfuscate.DontObfuscate;
+import net.minecraft.resources.RegistryOps;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.server.level.DemoMode;
-import net.minecraft.server.level.PlayerRespawnLogic;
-import net.minecraft.server.level.ServerChunkCache;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.level.ServerPlayerGameMode;
-import net.minecraft.server.level.TicketType;
+import net.minecraft.server.bossevents.CustomBossEvents;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.DedicatedServerProperties;
+import net.minecraft.server.level.*;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.server.level.progress.ChunkProgressListenerFactory;
 import net.minecraft.server.network.ServerConnectionListener;
@@ -104,22 +58,9 @@ import net.minecraft.server.players.GameProfileCache;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.server.players.ServerOpListEntry;
 import net.minecraft.server.players.UserWhiteList;
-import net.minecraft.util.Crypt;
-import net.minecraft.util.CryptException;
-import net.minecraft.util.FrameTimer;
-import net.minecraft.util.ModCheck;
-import net.minecraft.util.Mth;
-import net.minecraft.util.NativeModuleLister;
-import net.minecraft.util.ProgressListener;
-import net.minecraft.util.RandomSource;
-import net.minecraft.util.SignatureValidator;
-import net.minecraft.util.Unit;
+import net.minecraft.util.*;
 import net.minecraft.util.datafix.DataFixers;
-import net.minecraft.util.profiling.EmptyProfileResults;
-import net.minecraft.util.profiling.ProfileResults;
-import net.minecraft.util.profiling.ProfilerFiller;
-import net.minecraft.util.profiling.ResultField;
-import net.minecraft.util.profiling.SingleTickProfiler;
+import net.minecraft.util.profiling.*;
 import net.minecraft.util.profiling.jfr.JvmProfiler;
 import net.minecraft.util.profiling.jfr.callback.ProfiledDuration;
 import net.minecraft.util.profiling.metrics.profiling.ActiveMetricsRecorder;
@@ -138,64 +79,50 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.flag.FeatureFlagSet;
 import net.minecraft.world.flag.FeatureFlags;
 import net.minecraft.world.item.crafting.RecipeManager;
-import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.CustomSpawner;
-import net.minecraft.world.level.DataPackConfig;
-import net.minecraft.world.level.ForcedChunksSavedData;
-import net.minecraft.world.level.GameRules;
-import net.minecraft.world.level.GameType;
-import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelSettings;
-import net.minecraft.world.level.WorldDataConfiguration;
+import net.minecraft.world.level.*;
 import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.dimension.LevelStem;
-import net.minecraft.world.level.levelgen.WorldOptions;
+import net.minecraft.world.level.levelgen.*;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
+import net.minecraft.world.level.levelgen.presets.WorldPresets;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
-import net.minecraft.world.level.storage.CommandStorage;
-import net.minecraft.world.level.storage.DimensionDataStorage;
-import net.minecraft.world.level.storage.LevelData;
-import net.minecraft.world.level.storage.LevelResource;
-import net.minecraft.world.level.storage.LevelStorageSource;
-import net.minecraft.world.level.storage.PlayerDataStorage;
-import net.minecraft.world.level.storage.PrimaryLevelData;
-import net.minecraft.world.level.storage.ServerLevelData;
-import net.minecraft.world.level.storage.WorldData;
+import net.minecraft.world.level.storage.*;
 import net.minecraft.world.level.storage.loot.LootDataManager;
-import org.slf4j.Logger;
-
-// CraftBukkit start
-import com.mojang.datafixers.util.Pair;
-import com.mojang.serialization.DynamicOps;
-import com.mojang.serialization.Lifecycle;
-import java.util.Random;
-// import jline.console.ConsoleReader; // Paper
-import joptsimple.OptionSet;
-import net.minecraft.core.HolderLookup;
-import net.minecraft.resources.RegistryOps;
-import net.minecraft.server.bossevents.CustomBossEvents;
-import net.minecraft.server.dedicated.DedicatedServer;
-import net.minecraft.server.dedicated.DedicatedServerProperties;
-import net.minecraft.world.level.levelgen.Heightmap;
-import net.minecraft.world.level.levelgen.PatrolSpawner;
-import net.minecraft.world.level.levelgen.PhantomSpawner;
-import net.minecraft.world.level.levelgen.WorldDimensions;
-import net.minecraft.world.level.levelgen.presets.WorldPresets;
 import net.minecraft.world.level.validation.ContentValidationException;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.Main;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
-import org.bukkit.craftbukkit.util.LazyPlayerSet;
-import org.bukkit.event.player.AsyncPlayerChatPreviewEvent;
 import org.bukkit.event.server.ServerLoadEvent;
-// CraftBukkit end
+import org.slf4j.Logger;
 
-import co.aikar.timings.MinecraftTimings; // Paper
+import javax.annotation.Nullable;
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.BufferedWriter;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.lang.management.ManagementFactory;
+import java.lang.management.ThreadInfo;
+import java.lang.management.ThreadMXBean;
+import java.net.Proxy;
+import java.nio.file.Files;
+import java.nio.file.LinkOption;
+import java.nio.file.Path;
+import java.security.KeyPair;
+import java.util.*;
+import java.util.Map.Entry;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.BooleanSupplier;
+import java.util.function.Consumer;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
 
@@ -306,7 +233,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public static final int TPS = 20;
     public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;
     private static final int SAMPLE_INTERVAL = 20; // Paper
-    public final double[] recentTps = new double[ 3 ];
+    public final double[] recentTps = new double[3];
     // Spigot end
     public final io.papermc.paper.configuration.PaperConfigurations paperConfigurations;
     public static long currentTickLong = 0L; // Paper
@@ -331,7 +258,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         S s0 = serverFactory.apply(thread); // CraftBukkit - decompile error
 
         atomicreference.set(s0);
-        thread.setPriority(Thread.NORM_PRIORITY+2); // Paper - boost priority
+        thread.setPriority(Thread.NORM_PRIORITY + 2); // Paper - boost priority
         thread.start();
         return s0;
     }
@@ -357,7 +284,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.frameTimer = new FrameTimer();
         this.registries = worldstem.registries();
         this.worldData = worldstem.worldData();
-        if (false && !this.registries.compositeAccess().registryOrThrow(Registries.LEVEL_STEM).containsKey(LevelStem.OVERWORLD)) { // CraftBukkit - initialised later
+        if (false && !this.registries.compositeAccess()
+                .registryOrThrow(Registries.LEVEL_STEM)
+                .containsKey(LevelStem.OVERWORLD)) { // CraftBukkit - initialised later
             throw new IllegalStateException("Missing Overworld dimension data");
         } else {
             this.proxy = proxy;
@@ -374,7 +303,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.playerDataStorage = convertable_conversionsession.createPlayerStorage();
             this.fixerUpper = datafixer;
             this.functionManager = new ServerFunctionManager(this, this.resources.managers.getFunctionLibrary());
-            HolderGetter<Block> holdergetter = this.registries.compositeAccess().registryOrThrow(Registries.BLOCK).asLookup().filterFeatures(this.worldData.enabledFeatures());
+            HolderGetter<Block> holdergetter = this.registries.compositeAccess()
+                    .registryOrThrow(Registries.BLOCK)
+                    .asLookup()
+                    .filterFeatures(this.worldData.enabledFeatures());
 
             this.structureTemplateManager = new StructureTemplateManager(worldstem.resourceManager(), convertable_conversionsession, datafixer, holdergetter);
             this.serverThread = thread;
@@ -478,7 +410,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 dimension = -999;
             }
 
-            String worldType = (dimension == -999) ? dimensionKey.location().getNamespace() + "_" + dimensionKey.location().getPath() : org.bukkit.World.Environment.getEnvironment(dimension).toString().toLowerCase();
+            String worldType = (dimension == -999) ? dimensionKey.location()
+                    .getNamespace() + "_" + dimensionKey.location()
+                    .getPath() : org.bukkit.World.Environment.getEnvironment(dimension).toString().toLowerCase();
             String name = (dimensionKey == LevelStem.OVERWORLD) ? s : s + "_" + worldType;
             if (dimension != 0) {
                 File newWorld = LevelStorageSource.getStorageFolder(new File(name).toPath(), dimensionKey).toFile();
@@ -516,7 +450,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 }
 
                 try {
-                    worldSession = LevelStorageSource.createDefault(this.server.getWorldContainer().toPath()).validateAndCreateAccess(name, dimensionKey);
+                    worldSession = LevelStorageSource.createDefault(this.server.getWorldContainer().toPath())
+                            .validateAndCreateAccess(name, dimensionKey);
                 } catch (IOException | ContentValidationException ex) {
                     throw new RuntimeException(ex);
                 }
@@ -529,7 +464,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             WorldLoader.DataLoadContext worldloader_a = this.worldLoader;
             Registry<LevelStem> iregistry = worldloader_a.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
             DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) worldloader_a.datapackWorldgen());
-            Pair<WorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
+            Pair<WorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen()
+                    .allRegistriesLifecycle());
 
             if (pair != null) {
                 worlddata = (PrimaryLevelData) pair.getFirst();
@@ -551,7 +487,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 }
 
                 WorldDimensions.Complete worlddimensions_b = worlddimensions.bake(iregistry);
-                Lifecycle lifecycle = worlddimensions_b.lifecycle().add(worldloader_a.datapackWorldgen().allRegistriesLifecycle());
+                Lifecycle lifecycle = worlddimensions_b.lifecycle()
+                        .add(worldloader_a.datapackWorldgen().allRegistriesLifecycle());
 
                 worlddata = new PrimaryLevelData(worldsettings, worldoptions, worlddimensions_b.specialWorldProperty(), lifecycle);
             }
@@ -566,7 +503,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             List<CustomSpawner> list = ImmutableList.of(new PhantomSpawner(), new PatrolSpawner(), new CatSpawner(), new VillageSiege(), new WanderingTraderSpawner(iworlddataserver));
             LevelStem worlddimension = (LevelStem) dimensions.get(dimensionKey);
 
-            org.bukkit.generator.WorldInfo worldInfo = new org.bukkit.craftbukkit.generator.CraftWorldInfo(iworlddataserver, worldSession, org.bukkit.World.Environment.getEnvironment(dimension), worlddimension.type().value(), worlddimension.generator(), this.registryAccess()); // Paper
+            org.bukkit.generator.WorldInfo worldInfo = new org.bukkit.craftbukkit.generator.CraftWorldInfo(iworlddataserver, worldSession, org.bukkit.World.Environment.getEnvironment(dimension), worlddimension.type()
+                    .value(), worlddimension.generator(), this.registryAccess()); // Paper
             if (biomeProvider == null && gen != null) {
                 biomeProvider = gen.getDefaultBiomeProvider(worldInfo);
             }
@@ -574,7 +512,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             // Paper start - fix and optimise world upgrading
             if (options.has("forceUpgrade")) {
                 net.minecraft.server.Main.convertWorldButItWorks(
-                    dimensionKey, worldSession, DataFixers.getDataFixer(), worlddimension.generator().getTypeNameForDataFixer(), options.has("eraseCache")
+                        dimensionKey, worldSession, DataFixers.getDataFixer(), worlddimension.generator()
+                                .getTypeNameForDataFixer(), options.has("eraseCache")
                 );
             }
             // Paper end - fix and optimise world upgrading
@@ -595,12 +534,16 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 ChunkProgressListener worldloadlistener = this.progressListenerFactory.create(11);
                 // Paper start - option to use the dimension_type to check if spawners should be added. I imagine mojang will add some datapack-y way of managing this in the future.
                 final List<CustomSpawner> spawners;
-                if (io.papermc.paper.configuration.GlobalConfiguration.get().misc.useDimensionTypeForCustomSpawners && this.registryAccess().registryOrThrow(Registries.DIMENSION_TYPE).getResourceKey(worlddimension.type().value()).orElseThrow() == net.minecraft.world.level.dimension.BuiltinDimensionTypes.OVERWORLD) {
+                if (io.papermc.paper.configuration.GlobalConfiguration.get().misc.useDimensionTypeForCustomSpawners && this.registryAccess()
+                        .registryOrThrow(Registries.DIMENSION_TYPE)
+                        .getResourceKey(worlddimension.type().value())
+                        .orElseThrow() == net.minecraft.world.level.dimension.BuiltinDimensionTypes.OVERWORLD) {
                     spawners = list;
                 } else {
                     spawners = Collections.emptyList();
                 }
-                world = new ServerLevel(this, this.executor, worldSession, iworlddataserver, worldKey, worlddimension, worldloadlistener, flag, j, spawners, true, this.overworld().getRandomSequences(), org.bukkit.World.Environment.getEnvironment(dimension), gen, biomeProvider);
+                world = new ServerLevel(this, this.executor, worldSession, iworlddataserver, worldKey, worlddimension, worldloadlistener, flag, j, spawners, true, this.overworld()
+                        .getRandomSequences(), org.bukkit.World.Environment.getEnvironment(dimension), gen, biomeProvider);
                 // Paper end
             }
 
@@ -624,13 +567,18 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         // Paper start - Handle collideRule team for player collision toggle
         final ServerScoreboard scoreboard = this.getScoreboard();
-        final java.util.Collection<String> toRemove = scoreboard.getPlayerTeams().stream().filter(team -> team.getName().startsWith("collideRule_")).map(net.minecraft.world.scores.PlayerTeam::getName).collect(java.util.stream.Collectors.toList());
+        final java.util.Collection<String> toRemove = scoreboard.getPlayerTeams()
+                .stream()
+                .filter(team -> team.getName().startsWith("collideRule_"))
+                .map(net.minecraft.world.scores.PlayerTeam::getName)
+                .collect(java.util.stream.Collectors.toList());
         for (String teamName : toRemove) {
             scoreboard.removePlayerTeam(scoreboard.getPlayerTeam(teamName)); // Clean up after ourselves
         }
 
         if (!io.papermc.paper.configuration.GlobalConfiguration.get().collisions.enablePlayerCollisions) {
-            this.getPlayerList().collideRuleTeamName = org.apache.commons.lang3.StringUtils.left("collideRule_" + java.util.concurrent.ThreadLocalRandom.current().nextInt(), 16);
+            this.getPlayerList().collideRuleTeamName = org.apache.commons.lang3.StringUtils.left("collideRule_" + java.util.concurrent.ThreadLocalRandom.current()
+                    .nextInt(), 16);
             net.minecraft.world.scores.PlayerTeam collideTeam = scoreboard.addPlayerTeam(this.getPlayerList().collideRuleTeamName);
             collideTeam.setSeeFriendlyInvisibles(false); // Because we want to mimic them not being on a team at all
         }
@@ -649,11 +597,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         boolean flag = saveData.isDebugWorld();
         // CraftBukkit start
         if (worldserver.generator != null) {
-            worldserver.getWorld().getPopulators().addAll(worldserver.generator.getDefaultPopulators(worldserver.getWorld()));
+            worldserver.getWorld()
+                    .getPopulators()
+                    .addAll(worldserver.generator.getDefaultPopulators(worldserver.getWorld()));
         }
         WorldBorder worldborder = worldserver.getWorldBorder();
         worldborder.applySettings(iworlddataserver.getWorldBorder()); // CraftBukkit - move up so that WorldBorder is set during WorldInitEvent
-        this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldInitEvent(worldserver.getWorld())); // CraftBukkit - SPIGOT-5569: Call WorldInitEvent before any chunks are generated
+        this.server.getPluginManager()
+                .callEvent(new org.bukkit.event.world.WorldInitEvent(worldserver.getWorld())); // CraftBukkit - SPIGOT-5569: Call WorldInitEvent before any chunks are generated
 
         if (!iworlddataserver.isInitialized()) {
             try {
@@ -693,7 +644,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
                 if (spawn != null) {
                     if (spawn.getWorld() != world.getWorld()) {
-                        throw new IllegalStateException("Cannot set spawn point for " + worldProperties.getLevelName() + " to be in another world (" + spawn.getWorld().getName() + ")");
+                        throw new IllegalStateException("Cannot set spawn point for " + worldProperties.getLevelName() + " to be in another world (" + spawn.getWorld()
+                                .getName() + ")");
                     } else {
                         worldProperties.setSpawn(new BlockPos(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()), spawn.getYaw());
                         return;
@@ -768,32 +720,33 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // CraftBukkit end
         if (worldserver.getWorld().getKeepSpawnInMemory()) { // Paper
 
-        MinecraftServer.LOGGER.info("Preparing start region for dimension {}", worldserver.dimension().location());
-        BlockPos blockposition = worldserver.getSharedSpawnPos();
+            MinecraftServer.LOGGER.info("Preparing start region for dimension {}", worldserver.dimension().location());
+            BlockPos blockposition = worldserver.getSharedSpawnPos();
 
-        worldloadlistener.updateSpawnPos(new ChunkPos(blockposition));
-        //ChunkProviderServer chunkproviderserver = worldserver.getChunkProvider(); // Paper - move up
+            worldloadlistener.updateSpawnPos(new ChunkPos(blockposition));
+            //ChunkProviderServer chunkproviderserver = worldserver.getChunkProvider(); // Paper - move up
 
-        this.nextTickTime = Util.getMillis();
-        // Paper start - configurable spawn reason
-        int radiusBlocks = worldserver.paperConfig().spawn.keepSpawnLoadedRange * 16;
-        int radiusChunks = radiusBlocks / 16 + ((radiusBlocks & 15) != 0 ? 1 : 0);
-        int totalChunks = ((radiusChunks) * 2 + 1);
-        totalChunks *= totalChunks;
-        worldloadlistener.setChunkRadius(radiusBlocks / 16);
-
-        worldserver.addTicketsForSpawn(radiusBlocks, blockposition);
-        // Paper end
+            this.nextTickTime = Util.getMillis();
+            // Paper start - configurable spawn reason
+            int radiusBlocks = worldserver.paperConfig().spawn.keepSpawnLoadedRange * 16;
+            int radiusChunks = radiusBlocks / 16 + ((radiusBlocks & 15) != 0 ? 1 : 0);
+            int totalChunks = ((radiusChunks) * 2 + 1);
+            totalChunks *= totalChunks;
+            worldloadlistener.setChunkRadius(radiusBlocks / 16);
+
+            worldserver.addTicketsForSpawn(radiusBlocks, blockposition);
+            // Paper end
 
-        // this.nextTickTime = SystemUtils.getMillis() + 10L;
-        this.executeModerately();
-        // Iterator iterator = this.levels.values().iterator();
+            // this.nextTickTime = SystemUtils.getMillis() + 10L;
+            this.executeModerately();
+            // Iterator iterator = this.levels.values().iterator();
         }
 
         if (true) {
             ServerLevel worldserver1 = worldserver;
             // CraftBukkit end
-            ForcedChunksSavedData forcedchunk = (ForcedChunksSavedData) worldserver1.getDataStorage().get(ForcedChunksSavedData::load, "chunks");
+            ForcedChunksSavedData forcedchunk = (ForcedChunksSavedData) worldserver1.getDataStorage()
+                    .get(ForcedChunksSavedData::load, "chunks");
 
             if (forcedchunk != null) {
                 LongIterator longiterator = forcedchunk.getChunks().iterator();
@@ -839,6 +792,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // This allows us to avoid double saving chunks by closing instead of saving then closing
         return this.saveAllChunks(suppressLogs, flush, force, false);
     }
+
     public boolean saveAllChunks(boolean suppressLogs, boolean flush, boolean force, boolean close) {
         // Paper end - rewrite chunk system - add close param
         boolean flag3 = false;
@@ -847,7 +801,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             ServerLevel worldserver = (ServerLevel) iterator.next();
 
             if (!suppressLogs) {
-                MinecraftServer.LOGGER.info("Saving chunks for level '{}'/{}", worldserver, worldserver.dimension().location());
+                MinecraftServer.LOGGER.info("Saving chunks for level '{}'/{}", worldserver, worldserver.dimension()
+                        .location());
             }
             // Paper start - rewrite chunk system
             worldserver.save((ProgressListener) null, flush, worldserver.noSave && !force, close);
@@ -906,6 +861,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public volatile boolean hasFullyShutdown = false; // Paper
     private boolean hasLoggedStop = false; // Paper
     private final Object stopLock = new Object();
+
     public final boolean hasStopped() {
         synchronized (this.stopLock) {
             return this.hasStopped;
@@ -915,11 +871,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     public void stopServer() {
         // CraftBukkit start - prevent double stopping on multiple threads
-        synchronized(this.stopLock) {
+        synchronized (this.stopLock) {
             if (this.hasStopped) return;
             this.hasStopped = true;
         }
-        if (!hasLoggedStop && isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread("Server stopped"); // Paper
+        if (!hasLoggedStop && isDebugging())
+            io.papermc.paper.util.TraceUtil.dumpTraceForThread("Server stopped"); // Paper
         // Paper start - kill main thread, and kill it hard
         shutdownThread = Thread.currentThread();
         org.spigotmc.WatchdogThread.doStop(); // Paper
@@ -956,7 +913,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             MinecraftServer.LOGGER.info("Saving players");
             this.playerList.saveAll();
             this.playerList.removeAll(this.isRestarting); // Paper
-            try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
+            try {Thread.sleep(100);} catch (
+                    InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
         }
 
         MinecraftServer.LOGGER.info("Saving worlds");
@@ -983,7 +941,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         // Spigot start
         io.papermc.paper.util.MCUtil.asyncExecutor.shutdown(); // Paper
-        try { io.papermc.paper.util.MCUtil.asyncExecutor.awaitTermination(30, java.util.concurrent.TimeUnit.SECONDS); // Paper
+        try {
+            io.papermc.paper.util.MCUtil.asyncExecutor.awaitTermination(30, java.util.concurrent.TimeUnit.SECONDS); // Paper
         } catch (java.lang.InterruptedException ignored) {} // Paper
         if (org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly) {
             MinecraftServer.LOGGER.info("Saving usercache.json");
@@ -1022,6 +981,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Paper start - allow passing of the intent to restart
         this.safeShutdown(waitForShutdown, false);
     }
+
     public void safeShutdown(boolean waitForShutdown, boolean isRestarting) {
         this.isRestarting = isRestarting;
         this.hasLoggedStop = true; // Paper
@@ -1039,9 +999,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     // Spigot Start
-    private static double calcTps(double avg, double exp, double tps)
-    {
-        return ( avg * exp ) + ( tps * ( 1 - exp ) );
+    private static double calcTps(double avg, double exp, double tps) {
+        return (avg * exp) + (tps * (1 - exp));
     }
 
     // Paper start - Further improve server tick loop
@@ -1076,6 +1035,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         private static java.math.BigDecimal dec(long t) {
             return new java.math.BigDecimal(t);
         }
+
         public void add(java.math.BigDecimal x, long t) {
             time -= times[index];
             total = total.subtract(samples[index].multiply(dec(times[index])));
@@ -1092,6 +1052,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             return total.divide(dec(time), 30, java.math.RoundingMode.HALF_UP).doubleValue();
         }
     }
+
     private static final java.math.BigDecimal TPS_BASE = new java.math.BigDecimal(1E9).multiply(new java.math.BigDecimal(SAMPLE_INTERVAL));
     // Paper End
     // Spigot End
@@ -1106,7 +1067,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             }
 
             this.nextTickTime = Util.getMillis();
-            this.statusIcon = (ServerStatus.Favicon) this.loadStatusIcon().orElse(null); // CraftBukkit - decompile error
+            this.statusIcon = (ServerStatus.Favicon) this.loadStatusIcon()
+                    .orElse(null); // CraftBukkit - decompile error
             this.status = this.buildServerStatus();
 
             // KissenPaper start
@@ -1127,7 +1089,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             org.spigotmc.WatchdogThread.tick(); // Paper
             org.spigotmc.WatchdogThread.hasStarted = true; // Paper
-            Arrays.fill( recentTps, 20 );
+            Arrays.fill(recentTps, 20);
             long start = System.nanoTime(), curTime, tickSection = start; // Paper - Further improve server tick loop
             lastTick = start - TICK_TIME; // Paper
             while (this.running) {
@@ -1143,14 +1105,13 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     long j = i / 50L;
 
                     if (this.server.getWarnOnOverload()) // CraftBukkit
-                    MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
+                        MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
                     this.nextTickTime += j * 50L;
                     this.lastOverloadWarning = this.nextTickTime;
                 }
 
                 ++MinecraftServer.currentTickLong; // Paper
-                if ( ++MinecraftServer.currentTick % MinecraftServer.SAMPLE_INTERVAL == 0 )
-                {
+                if (++MinecraftServer.currentTick % MinecraftServer.SAMPLE_INTERVAL == 0) {
                     final long diff = curTime - tickSection;
                     java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP);
                     tps1.add(currentTps, diff);
@@ -1194,9 +1155,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             // Paper end
             MinecraftServer.LOGGER.error("Encountered an unexpected exception", throwable);
             // Spigot Start
-            if ( throwable.getCause() != null )
-            {
-                MinecraftServer.LOGGER.error( "\tCause of unexpected exception was", throwable.getCause() );
+            if (throwable.getCause() != null) {
+                MinecraftServer.LOGGER.error("\tCause of unexpected exception was", throwable.getCause());
             }
             // Spigot End
             CrashReport crashreport = MinecraftServer.constructOrExtractCrashReport(throwable);
@@ -1274,6 +1234,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     // Paper start
     boolean isOversleep = false;
+
     private boolean canOversleep() {
         return this.mayHaveDelayedTasks && Util.getMillis() < this.delayedTasksMaxNextTickTime;
     }
@@ -1389,13 +1350,15 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         long i = Util.getNanos();
 
         // Paper start - move oversleep into full server tick
-        isOversleep = true;MinecraftTimings.serverOversleep.startTiming();
+        isOversleep = true;
+        MinecraftTimings.serverOversleep.startTiming();
         this.managedBlock(() -> {
             return !this.canOversleep();
         });
-        isOversleep = false;MinecraftTimings.serverOversleep.stopTiming();
+        isOversleep = false;
+        MinecraftTimings.serverOversleep.stopTiming();
         // Paper end
-        new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.tickCount+1).callEvent(); // Paper
+        new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.tickCount + 1).callEvent(); // Paper
 
         ++this.tickCount;
         this.tickChildren(shouldKeepTicking);
@@ -1435,7 +1398,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Paper start
         long endTime = System.nanoTime();
         long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
-        new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.tickCount, ((double)(endTime - lastTick) / 1000000D), remaining).callEvent();
+        new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.tickCount, ((double) (endTime - lastTick) / 1000000D), remaining).callEvent();
         // Paper end
         this.profiler.push("tallying");
         long j = this.tickTimes[this.tickCount % 100] = Util.getNanos() - i;
@@ -1531,7 +1494,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 ServerPlayer entityplayer = (ServerPlayer) entityhuman;
                 long playerTime = entityplayer.getPlayerTime();
                 ClientboundSetTimePacket packet = (playerTime == dayTime) ? worldPacket :
-                    new ClientboundSetTimePacket(worldTime, playerTime, doDaylight);
+                        new ClientboundSetTimePacket(worldTime, playerTime, doDaylight);
                 entityplayer.connection.send(packet); // Add support for per player time
             }
         }
@@ -1542,9 +1505,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         Iterator iterator = this.getAllLevels().iterator(); // Paper - move down
         while (iterator.hasNext()) {
             ServerLevel worldserver = (ServerLevel) iterator.next();
-            worldserver.hasPhysicsEvent =  org.bukkit.event.block.BlockPhysicsEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper
-            net.minecraft.world.level.block.entity.HopperBlockEntity.skipHopperEvents = worldserver.paperConfig().hopper.disableMoveEvent || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0; // Paper
-            worldserver.hasEntityMoveEvent =  io.papermc.paper.event.entity.EntityMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper
+            worldserver.hasPhysicsEvent = org.bukkit.event.block.BlockPhysicsEvent.getHandlerList()
+                    .getRegisteredListeners().length > 0; // Paper
+            net.minecraft.world.level.block.entity.HopperBlockEntity.skipHopperEvents = worldserver.paperConfig().hopper.disableMoveEvent || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList()
+                    .getRegisteredListeners().length == 0; // Paper
+            worldserver.hasEntityMoveEvent = io.papermc.paper.event.entity.EntityMoveEvent.getHandlerList()
+                    .getRegisteredListeners().length > 0; // Paper
 
             this.profiler.push(() -> {
                 return worldserver + " " + worldserver.dimension().location();
@@ -1574,7 +1540,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 try {
                     crashreport = CrashReport.forThrowable(throwable, "Exception ticking world");
                 } catch (Throwable t) {
-                    if (throwable instanceof ThreadDeath) { throw (ThreadDeath)throwable; } // Paper
+                    if (throwable instanceof ThreadDeath) {throw (ThreadDeath) throwable;} // Paper
                     throw new RuntimeException("Error generating crash report", t);
                 }
                 // Spigot End
@@ -1613,7 +1579,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     private void synchronizeTime(ServerLevel world) {
-        this.playerList.broadcastAll(new ClientboundSetTimePacket(world.getGameTime(), world.getDayTime(), world.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)), world.dimension());
+        this.playerList.broadcastAll(new ClientboundSetTimePacket(world.getGameTime(), world.getDayTime(), world.getGameRules()
+                .getBoolean(GameRules.RULE_DAYLIGHT)), world.dimension());
     }
 
     public void forceTimeSynchronization() {
@@ -1723,7 +1690,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             }).collect(Collectors.joining(", "));
         });
         details.setDetail("Enabled Feature Flags", () -> {
-            return (String) FeatureFlags.REGISTRY.toNames(this.worldData.enabledFeatures()).stream().map(ResourceLocation::toString).collect(Collectors.joining(", "));
+            return (String) FeatureFlags.REGISTRY.toNames(this.worldData.enabledFeatures())
+                    .stream()
+                    .map(ResourceLocation::toString)
+                    .collect(Collectors.joining(", "));
         });
         details.setDetail("World Generation", () -> {
             return this.worldData.worldGenSettingsLifecycle().toString();
@@ -1889,12 +1859,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public abstract boolean isCommandBlockEnabled();
 
     public String getMotd() {
-        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.motd); // Paper - Adventure
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .serialize(this.motd); // Paper - Adventure
     }
 
     public void setMotd(String motd) {
         // Paper start - Adventure
-        this.motd = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserializeOr(motd, net.kyori.adventure.text.Component.empty());
+        this.motd = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .deserializeOr(motd, net.kyori.adventure.text.Component.empty());
     }
 
     public net.kyori.adventure.text.Component motd() {
@@ -2052,10 +2024,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     // Paper start - add cause
-    @Deprecated @io.papermc.paper.annotation.DoNotUse
+    @Deprecated
+    @io.papermc.paper.annotation.DoNotUse
     public CompletableFuture<Void> reloadResources(Collection<String> dataPacks) {
         return this.reloadResources(dataPacks, io.papermc.paper.event.server.ServerResourcesReloadedEvent.Cause.PLUGIN);
     }
+
     public CompletableFuture<Void> reloadResources(Collection<String> dataPacks, io.papermc.paper.event.server.ServerResourcesReloadedEvent.Cause cause) {
         // Paper end
         RegistryAccess.Frozen iregistrycustom_dimension = this.registries.getAccessForLoading(RegistryLayer.RELOADABLE);
@@ -2064,18 +2038,23 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             PackRepository resourcepackrepository = this.packRepository;
 
             Objects.requireNonNull(this.packRepository);
-            return stream.<Pack>map(resourcepackrepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()); // CraftBukkit - decompile error // Paper - decompile error // todo: is this needed anymore?
+            return stream.<Pack>map(resourcepackrepository::getPack)
+                    .filter(Objects::nonNull)
+                    .map(Pack::open)
+                    .collect(ImmutableList.toImmutableList()); // CraftBukkit - decompile error // Paper - decompile error // todo: is this needed anymore?
         }, this).thenCompose((immutablelist) -> {
             MultiPackResourceManager resourcemanager = new MultiPackResourceManager(PackType.SERVER_DATA, immutablelist);
 
-            return ReloadableServerResources.loadResources(resourcemanager, iregistrycustom_dimension, this.worldData.enabledFeatures(), this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this).whenComplete((datapackresources, throwable) -> {
-                if (throwable != null) {
-                    resourcemanager.close();
-                }
+            return ReloadableServerResources.loadResources(resourcemanager, iregistrycustom_dimension, this.worldData.enabledFeatures(), this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this)
+                    .whenComplete((datapackresources, throwable) -> {
+                        if (throwable != null) {
+                            resourcemanager.close();
+                        }
 
-            }).thenApply((datapackresources) -> {
-                return new MinecraftServer.ReloadableResources(resourcemanager, datapackresources);
-            });
+                    })
+                    .thenApply((datapackresources) -> {
+                        return new MinecraftServer.ReloadableResources(resourcemanager, datapackresources);
+                    });
         }).thenAcceptAsync((minecraftserver_reloadableresources) -> {
             this.resources.close();
             this.resources = minecraftserver_reloadableresources;
@@ -2182,7 +2161,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (this.isEnforceWhitelist()) {
             PlayerList playerlist = source.getServer().getPlayerList();
             UserWhiteList whitelist = playerlist.getWhiteList();
-            if (!((DedicatedServer)getServer()).getProperties().whiteList.get()) return; // Paper - white list not enabled
+            if (!((DedicatedServer) getServer()).getProperties().whiteList.get())
+                return; // Paper - white list not enabled
             List<ServerPlayer> list = Lists.newArrayList(playerlist.getPlayers());
             Iterator iterator = list.iterator();
 
@@ -2194,9 +2174,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                         .getImplementation(KissenLocalizationImplementation.class);
                 // KissenPaper end
 
-                if (!whitelist.isWhiteListed(entityplayer.getGameProfile()) && !this.getPlayerList().isOp(entityplayer.getGameProfile())) { // Paper - Fix kicking ops when whitelist is reloaded (MC-171420)
+                if (!whitelist.isWhiteListed(entityplayer.getGameProfile()) && !this.getPlayerList()
+                        .isOp(entityplayer.getGameProfile())) { // Paper - Fix kicking ops when whitelist is reloaded (MC-171420)
                     // KissenPaper start
-                    entityplayer.connection.disconnect(/* KissenPaper */ kissenLocalizationImplementation.translate("messages.whitelist", entityplayer.getBukkitEntity()
+                    entityplayer.connection.disconnect(/* KissenPaper */ kissenLocalizationImplementation.translate("spigot.whitelist", entityplayer.getBukkitEntity()
                             .getCurrentLocale()), org.bukkit.event.player.PlayerKickEvent.Cause.WHITELIST); // Paper - use configurable message
                     //entityplayer.connection.disconnect(org.spigotmc.SpigotConfig.whitelistMessage, org.bukkit.event.player.PlayerKickEvent.Cause.WHITELIST); // Paper - use configurable message
                     // KissenPaper end
@@ -2277,7 +2258,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (this.getPlayerList().isOp(profile)) {
             ServerOpListEntry oplistentry = (ServerOpListEntry) this.getPlayerList().getOps().get(profile);
 
-            return oplistentry != null ? oplistentry.getLevel() : (this.isSingleplayerOwner(profile) ? 4 : (this.isSingleplayer() ? (this.getPlayerList().isAllowCheatsForAllPlayers() ? 4 : 0) : this.getOperatorUserPermissionLevel()));
+            return oplistentry != null ? oplistentry.getLevel() : (this.isSingleplayerOwner(profile) ? 4 : (this.isSingleplayer() ? (this.getPlayerList()
+                    .isAllowCheatsForAllPlayers() ? 4 : 0) : this.getOperatorUserPermissionLevel()));
         } else {
             return 0;
         }
@@ -2656,7 +2638,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     // CraftBukkit start
     public final java.util.concurrent.ExecutorService chatExecutor = java.util.concurrent.Executors.newCachedThreadPool(
-            new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async Chat Thread - #%d").setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(net.minecraft.server.MinecraftServer.LOGGER)).build()); // Paper
+            new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true)
+                    .setNameFormat("Async Chat Thread - #%d")
+                    .setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(net.minecraft.server.MinecraftServer.LOGGER))
+                    .build()); // Paper
 
     public ChatDecorator getChatDecorator() {
         // Paper start - moved to ChatPreviewProcessor
@@ -2668,7 +2653,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // CraftBukkit end
     }
 
-    public static record ReloadableResources(CloseableResourceManager resourceManager, ReloadableServerResources managers) implements AutoCloseable {
+    public static record ReloadableResources(CloseableResourceManager resourceManager,
+                                             ReloadableServerResources managers) implements AutoCloseable {
 
         public void close() {
             this.resourceManager.close();
@@ -2725,7 +2711,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
 
-    public static record ServerResourcePackInfo(String url, String hash, boolean isRequired, @Nullable Component prompt) {
+    public static record ServerResourcePackInfo(String url, String hash, boolean isRequired,
+                                                @Nullable Component prompt) {
 
     }
 
@@ -2795,7 +2782,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         co.aikar.timings.MinecraftTimings.midTickChunkTasks.startTiming();
         try {
-            for (;;) {
+            for (; ; ) {
                 boolean moreTasks = this.tickMidTickTasks();
                 long currTime = System.nanoTime();
                 long diff = currTime - startTime;
@@ -2812,8 +2799,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                         overuse = 10L * 1000L * 1000L; // 10ms
                     }
 
-                    double overuseCount = (double)overuse/(double)MAX_CHUNK_EXEC_TIME;
-                    long extraSleep = (long)Math.round(overuseCount*CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME);
+                    double overuseCount = (double) overuse / (double) MAX_CHUNK_EXEC_TIME;
+                    long extraSleep = (long) Math.round(overuseCount * CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME);
 
                     lastMidTickExecute = currTime + extraSleep;
                     return;
diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index 63cf71940f6480c593a43bd39900c50676367404..42e11a16b4c52e304964d77fd315e6d0157fb726 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -1,36 +1,36 @@
 package net.minecraft.server.network;
 
+import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
 import net.minecraft.SharedConstants;
 import net.minecraft.network.Connection;
 import net.minecraft.network.ConnectionProtocol;
 import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
 import net.minecraft.network.protocol.handshake.ServerHandshakePacketListener;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
 
-// CraftBukkit start
 import java.net.InetAddress;
 import java.util.HashMap;
 // CraftBukkit end
 
 public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketListener {
 
-    // Spigot start
-    private static final com.google.gson.Gson gson = new com.google.gson.Gson();
     static final java.util.regex.Pattern HOST_PATTERN = java.util.regex.Pattern.compile("[0-9a-f\\.:]{0,45}");
     static final java.util.regex.Pattern PROP_PATTERN = java.util.regex.Pattern.compile("\\w{0,16}");
+    // Spigot start
+    private static final com.google.gson.Gson gson = new com.google.gson.Gson();
     // Spigot end
     // CraftBukkit start - add fields
     private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
-    private static int throttleCounter = 0;
     // CraftBukkit end
     private static final Component IGNORE_STATUS_REASON = Component.translatable("disconnect.ignoring_status_request");
+    private static final boolean BYPASS_HOSTCHECK = Boolean.getBoolean("Paper.bypassHostCheck"); // Paper
+    private static int throttleCounter = 0;
     private final MinecraftServer server;
     private final Connection connection;
-    private static final boolean BYPASS_HOSTCHECK = Boolean.getBoolean("Paper.bypassHostCheck"); // Paper
 
     public ServerHandshakePacketListenerImpl(MinecraftServer server, Connection connection) {
         this.server = server;
@@ -46,34 +46,35 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                 // CraftBukkit start - Connection throttle
                 try {
                     if (!(this.connection.channel.localAddress() instanceof io.netty.channel.unix.DomainSocketAddress)) { // Paper - the connection throttle is useless when you have a Unix domain socket
-                    long currentTime = System.currentTimeMillis();
-                    long connectionThrottle = this.server.server.getConnectionThrottle();
-                    InetAddress address = ((java.net.InetSocketAddress) this.connection.getRemoteAddress()).getAddress();
+                        long currentTime = System.currentTimeMillis();
+                        long connectionThrottle = this.server.server.getConnectionThrottle();
+                        InetAddress address = ((java.net.InetSocketAddress) this.connection.getRemoteAddress()).getAddress();
+
+                        synchronized (ServerHandshakePacketListenerImpl.throttleTracker) {
+                            if (ServerHandshakePacketListenerImpl.throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - ServerHandshakePacketListenerImpl.throttleTracker.get(address) < connectionThrottle) {
+                                ServerHandshakePacketListenerImpl.throttleTracker.put(address, currentTime);
+                                Component chatmessage = io.papermc.paper.adventure.PaperAdventure.asVanilla(io.papermc.paper.configuration.GlobalConfiguration.get().messages.kick.connectionThrottle); // Paper - Configurable connection throttle kick message
+                                this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
+                                this.connection.disconnect(chatmessage);
+                                return;
+                            }
 
-                    synchronized (ServerHandshakePacketListenerImpl.throttleTracker) {
-                        if (ServerHandshakePacketListenerImpl.throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - ServerHandshakePacketListenerImpl.throttleTracker.get(address) < connectionThrottle) {
                             ServerHandshakePacketListenerImpl.throttleTracker.put(address, currentTime);
-                            Component chatmessage = io.papermc.paper.adventure.PaperAdventure.asVanilla(io.papermc.paper.configuration.GlobalConfiguration.get().messages.kick.connectionThrottle); // Paper - Configurable connection throttle kick message
-                            this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
-                            this.connection.disconnect(chatmessage);
-                            return;
-                        }
-
-                        ServerHandshakePacketListenerImpl.throttleTracker.put(address, currentTime);
-                        ServerHandshakePacketListenerImpl.throttleCounter++;
-                        if (ServerHandshakePacketListenerImpl.throttleCounter > 200) {
-                            ServerHandshakePacketListenerImpl.throttleCounter = 0;
-
-                            // Cleanup stale entries
-                            java.util.Iterator iter = ServerHandshakePacketListenerImpl.throttleTracker.entrySet().iterator();
-                            while (iter.hasNext()) {
-                                java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry) iter.next();
-                                if (entry.getValue() > connectionThrottle) {
-                                    iter.remove();
+                            ServerHandshakePacketListenerImpl.throttleCounter++;
+                            if (ServerHandshakePacketListenerImpl.throttleCounter > 200) {
+                                ServerHandshakePacketListenerImpl.throttleCounter = 0;
+
+                                // Cleanup stale entries
+                                java.util.Iterator iter = ServerHandshakePacketListenerImpl.throttleTracker.entrySet()
+                                        .iterator();
+                                while (iter.hasNext()) {
+                                    java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry) iter.next();
+                                    if (entry.getValue() > connectionThrottle) {
+                                        iter.remove();
+                                    }
                                 }
                             }
                         }
-                    }
                     } // Paper - add closing bracket for if check above
                 } catch (Throwable t) {
                     org.apache.logging.log4j.LogManager.getLogger().debug("Failed to check connection throttle", t);
@@ -82,65 +83,83 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                 if (packet.getProtocolVersion() != SharedConstants.getCurrentVersion().getProtocolVersion()) {
                     Component ichatmutablecomponent; // Paper - Fix hex colors not working in some kick messages
 
-                    if (packet.getProtocolVersion() < SharedConstants.getCurrentVersion().getProtocolVersion()) { // Paper - Fix incorrect message for outdated clients
-                        ichatmutablecomponent = org.bukkit.craftbukkit.util.CraftChatMessage.fromString( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedClientMessage.replaceAll("'", "''"), SharedConstants.getCurrentVersion().getName() ) , true )[0]; // Spigot // Paper - Fix hex colors not working in some kick messages
+                    // KissenPaper start
+                    KissenLocalizationImplementation kissenLocalizationImplementation = Bukkit.getKissen()
+                            .getImplementation(KissenLocalizationImplementation.class);
+
+                    if (packet.getProtocolVersion() < SharedConstants.getCurrentVersion()
+                            .getProtocolVersion()) { // Paper - Fix incorrect message for outdated clients
+                        ichatmutablecomponent = io.papermc.paper.adventure.PaperAdventure.asVanilla(
+                                kissenLocalizationImplementation.
+                                        translate("spigot.outdated-client",
+                                                kissenLocalizationImplementation.getDefaultLocale(),
+                                                SharedConstants.getCurrentVersion().getName()));
+                        //ichatmutablecomponent = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(java.text.MessageFormat.format(org.spigotmc.SpigotConfig.outdatedClientMessage.replaceAll("'", "''"), SharedConstants.getCurrentVersion().getName()), true)[0]; // Spigot // Paper - Fix hex colors not working in some kick messages
                     } else {
-                        ichatmutablecomponent = org.bukkit.craftbukkit.util.CraftChatMessage.fromString( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedServerMessage.replaceAll("'", "''"), SharedConstants.getCurrentVersion().getName() ) , true )[0]; // Spigot // Paper - Fix hex colors not working in some kick messages
+                        ichatmutablecomponent = io.papermc.paper.adventure.PaperAdventure.asVanilla(
+                                kissenLocalizationImplementation.
+                                        translate("spigot.outdated-server",
+                                                kissenLocalizationImplementation.getDefaultLocale(),
+                                                SharedConstants.getCurrentVersion().getName()));
+                        //ichatmutablecomponent = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(java.text.MessageFormat.format(org.spigotmc.SpigotConfig.outdatedServerMessage.replaceAll("'", "''"), SharedConstants.getCurrentVersion().getName()), true)[0]; // Spigot // Paper - Fix hex colors not working in some kick messages
                     }
-
+                    // KissenPaper end
                     this.connection.send(new ClientboundLoginDisconnectPacket(ichatmutablecomponent));
                     this.connection.disconnect(ichatmutablecomponent);
                 } else {
                     this.connection.setListener(new ServerLoginPacketListenerImpl(this.server, this.connection));
-                // Paper start - handshake event
-                boolean proxyLogicEnabled = org.spigotmc.SpigotConfig.bungee;
-                boolean handledByEvent = false;
-                // Try and handle the handshake through the event
-                if (com.destroystokyo.paper.event.player.PlayerHandshakeEvent.getHandlerList().getRegisteredListeners().length != 0) { // Hello? Can you hear me?
-                    java.net.SocketAddress socketAddress = this.connection.address;
-                    String hostnameOfRemote = socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getHostString() : InetAddress.getLoopbackAddress().getHostAddress();
-                    com.destroystokyo.paper.event.player.PlayerHandshakeEvent event = new com.destroystokyo.paper.event.player.PlayerHandshakeEvent(packet.hostName, hostnameOfRemote, !proxyLogicEnabled);
-                    if (event.callEvent()) {
-                        // If we've failed somehow, let the client know so and go no further.
-                        if (event.isFailed()) {
-                            Component component = io.papermc.paper.adventure.PaperAdventure.asVanilla(event.failMessage());
-                            this.connection.send(new ClientboundLoginDisconnectPacket(component));
-                            this.connection.disconnect(component);
-                            return;
-                        }
+                    // Paper start - handshake event
+                    boolean proxyLogicEnabled = org.spigotmc.SpigotConfig.bungee;
+                    boolean handledByEvent = false;
+                    // Try and handle the handshake through the event
+                    if (com.destroystokyo.paper.event.player.PlayerHandshakeEvent.getHandlerList()
+                            .getRegisteredListeners().length != 0) { // Hello? Can you hear me?
+                        java.net.SocketAddress socketAddress = this.connection.address;
+                        String hostnameOfRemote = socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getHostString() : InetAddress.getLoopbackAddress()
+                                .getHostAddress();
+                        com.destroystokyo.paper.event.player.PlayerHandshakeEvent event = new com.destroystokyo.paper.event.player.PlayerHandshakeEvent(packet.hostName, hostnameOfRemote, !proxyLogicEnabled);
+                        if (event.callEvent()) {
+                            // If we've failed somehow, let the client know so and go no further.
+                            if (event.isFailed()) {
+                                Component component = io.papermc.paper.adventure.PaperAdventure.asVanilla(event.failMessage());
+                                this.connection.send(new ClientboundLoginDisconnectPacket(component));
+                                this.connection.disconnect(component);
+                                return;
+                            }
 
-                        if (event.getServerHostname() != null) packet.hostName = event.getServerHostname();
-                        if (event.getSocketAddressHostname() != null) this.connection.address = new java.net.InetSocketAddress(event.getSocketAddressHostname(), socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
-                        this.connection.spoofedUUID = event.getUniqueId();
-                        this.connection.spoofedProfile = gson.fromJson(event.getPropertiesJson(), com.mojang.authlib.properties.Property[].class);
-                        handledByEvent = true; // Hooray, we did it!
+                            if (event.getServerHostname() != null) packet.hostName = event.getServerHostname();
+                            if (event.getSocketAddressHostname() != null)
+                                this.connection.address = new java.net.InetSocketAddress(event.getSocketAddressHostname(), socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
+                            this.connection.spoofedUUID = event.getUniqueId();
+                            this.connection.spoofedProfile = gson.fromJson(event.getPropertiesJson(), com.mojang.authlib.properties.Property[].class);
+                            handledByEvent = true; // Hooray, we did it!
+                        }
                     }
-                }
                     // Spigot Start
                     String[] split = packet.hostName.split("\00");
                     // Don't try and handle default logic if it's been handled by the event.
                     if (!handledByEvent && proxyLogicEnabled) {
                         // Paper end
-                    // if (org.spigotmc.SpigotConfig.bungee) { // Paper - comment out, we check above!
-                        if ( ( split.length == 3 || split.length == 4 ) && ( ServerHandshakePacketListenerImpl.BYPASS_HOSTCHECK || ServerHandshakePacketListenerImpl.HOST_PATTERN.matcher( split[1] ).matches() ) ) { // Paper
+                        // if (org.spigotmc.SpigotConfig.bungee) { // Paper - comment out, we check above!
+                        if ((split.length == 3 || split.length == 4) && (ServerHandshakePacketListenerImpl.BYPASS_HOSTCHECK || ServerHandshakePacketListenerImpl.HOST_PATTERN.matcher(split[1])
+                                .matches())) { // Paper
                             // Paper start - Unix domain socket support
                             java.net.SocketAddress socketAddress = connection.getRemoteAddress();
                             packet.hostName = split[0];
                             connection.address = new java.net.InetSocketAddress(split[1], socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
                             // Paper end
-                            connection.spoofedUUID = com.mojang.util.UUIDTypeAdapter.fromString( split[2] );
-                        } else
-                        {
+                            connection.spoofedUUID = com.mojang.util.UUIDTypeAdapter.fromString(split[2]);
+                        } else {
                             Component chatmessage = Component.literal("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
                             this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
                             this.connection.disconnect(chatmessage);
                             return;
                         }
-                        if ( split.length == 4 )
-                        {
+                        if (split.length == 4) {
                             connection.spoofedProfile = ServerHandshakePacketListenerImpl.gson.fromJson(split[3], com.mojang.authlib.properties.Property[].class);
                         }
-                    } else if ( ( split.length == 3 || split.length == 4 ) && ( ServerHandshakePacketListenerImpl.HOST_PATTERN.matcher( split[1] ).matches() ) ) {
+                    } else if ((split.length == 3 || split.length == 4) && (ServerHandshakePacketListenerImpl.HOST_PATTERN.matcher(split[1])
+                            .matches())) {
                         Component chatmessage = Component.literal("Unknown data in login hostname, did you forget to enable BungeeCord in spigot.yml?");
                         this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
                         this.connection.disconnect(chatmessage);
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 6487990372c19cc2f31b9fc524ea178d38c3b12c..323d556e5050f06aa03dad03f38d73be8dcfe042 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -4,17 +4,7 @@ import com.google.common.primitives.Ints;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
 import com.mojang.logging.LogUtils;
-import java.math.BigInteger;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.security.PrivateKey;
-import java.util.UUID;
-import java.util.concurrent.atomic.AtomicInteger;
-import javax.annotation.Nullable;
-import javax.crypto.Cipher;
-import javax.crypto.SecretKey;
-
+import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
 import net.kissenpvp.core.user.KissenUserImplementation;
 import net.kissenpvp.paper.user.KissenPaperPublicUser;
 import net.minecraft.DefaultUncaughtExceptionHandler;
@@ -25,14 +15,7 @@ import net.minecraft.network.TickablePacketListener;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
-import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
-import net.minecraft.network.protocol.login.ClientboundHelloPacket;
-import net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket;
-import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
-import net.minecraft.network.protocol.login.ServerLoginPacketListener;
-import net.minecraft.network.protocol.login.ServerboundCustomQueryPacket;
-import net.minecraft.network.protocol.login.ServerboundHelloPacket;
-import net.minecraft.network.protocol.login.ServerboundKeyPacket;
+import net.minecraft.network.protocol.login.*;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.Crypt;
@@ -40,12 +23,20 @@ import net.minecraft.util.CryptException;
 import net.minecraft.util.RandomSource;
 import org.apache.commons.lang3.Validate;
 import org.bukkit.Bukkit;
-import org.slf4j.Logger;
-
-// CraftBukkit start
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
 import org.bukkit.event.player.PlayerPreLoginEvent;
+import org.slf4j.Logger;
+
+import javax.annotation.Nullable;
+import javax.crypto.SecretKey;
+import java.math.BigInteger;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.security.PrivateKey;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicInteger;
 // CraftBukkit end
 
 public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener, TickablePacketListener {
@@ -79,7 +70,12 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
     public void tick() {
         // Paper start - Do not allow logins while the server is shutting down
         if (!MinecraftServer.getServer().isRunning()) {
-            this.disconnect(org.bukkit.craftbukkit.util.CraftChatMessage.fromString(org.spigotmc.SpigotConfig.restartMessage)[0]);
+            // KissenPaper start
+            KissenLocalizationImplementation kissenLocalizationImplementation = Bukkit.getKissen()
+                    .getImplementation(KissenLocalizationImplementation.class);
+            Component shutdownMessage = io.papermc.paper.adventure.PaperAdventure.asVanilla(kissenLocalizationImplementation.translate("bukkit.shutdown-message", kissenLocalizationImplementation.getDefaultLocale()));
+            this.disconnect(/* KissenPaper */ shutdownMessage /* org.bukkit.craftbukkit.util.CraftChatMessage.fromString(org.spigotmc.SpigotConfig.restartMessage)[0] */);
+            // KissenPaper end
             return;
         }
         // Paper end
@@ -128,28 +124,25 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
 
     }
 
-    private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat("User Authenticator #%d").setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER)).build()); // Paper - Cache authenticator threads
+    private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat("User Authenticator #%d")
+            .setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER))
+            .build()); // Paper - Cache authenticator threads
 
     // Spigot start
-    public void initUUID()
-    {
+    public void initUUID() {
         UUID uuid;
-        if ( connection.spoofedUUID != null )
-        {
+        if (connection.spoofedUUID != null) {
             uuid = connection.spoofedUUID;
-        } else
-        {
-            uuid = UUIDUtil.createOfflinePlayerUUID( this.gameProfile.getName() );
+        } else {
+            uuid = UUIDUtil.createOfflinePlayerUUID(this.gameProfile.getName());
         }
 
-        this.gameProfile = new GameProfile( uuid, this.gameProfile.getName() );
+        this.gameProfile = new GameProfile(uuid, this.gameProfile.getName());
 
-        if (connection.spoofedProfile != null)
-        {
-            for ( com.mojang.authlib.properties.Property property : connection.spoofedProfile )
-            {
-                if ( !ServerHandshakePacketListenerImpl.PROP_PATTERN.matcher( property.getName() ).matches() ) continue;
-                this.gameProfile.getProperties().put( property.getName(), property );
+        if (connection.spoofedProfile != null) {
+            for (com.mojang.authlib.properties.Property property : connection.spoofedProfile) {
+                if (!ServerHandshakePacketListenerImpl.PROP_PATTERN.matcher(property.getName()).matches()) continue;
+                this.gameProfile.getProperties().put(property.getName(), property);
             }
         }
     }
@@ -178,7 +171,8 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
             ServerPlayer entityplayer = this.server.getPlayerList().getPlayer(this.gameProfile.getId());
 
             try {
-                ServerPlayer entityplayer1 = this.server.getPlayerList().getPlayerForLogin(this.gameProfile, s); // CraftBukkit - add player reference
+                ServerPlayer entityplayer1 = this.server.getPlayerList()
+                        .getPlayerForLogin(this.gameProfile, s); // CraftBukkit - add player reference
 
                 if (entityplayer != null) {
                     this.state = ServerLoginPacketListenerImpl.State.DELAY_ACCEPT;
@@ -259,7 +253,9 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
             this.gameProfile = new GameProfile((UUID) null, packet.name());
             if (this.server.usesAuthentication() && !this.connection.isMemoryConnection()) {
                 this.state = ServerLoginPacketListenerImpl.State.KEY;
-                this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.challenge));
+                this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair()
+                        .getPublic()
+                        .getEncoded(), this.challenge));
             } else {
                 // Paper start - Velocity support
                 if (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled) {
@@ -272,8 +268,8 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                 }
                 // Paper end
                 // Spigot start
-            // Paper start - Cache authenticator threads
-            authenticatorPool.execute(new Runnable() {
+                // Paper start - Cache authenticator threads
+                authenticatorPool.execute(new Runnable() {
                     @Override
                     public void run() {
                         try {
@@ -281,11 +277,12 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                             new LoginHandler().fireEvents();
                         } catch (Exception ex) {
                             ServerLoginPacketListenerImpl.this.disconnect("Failed to verify username!");
-                            server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + ServerLoginPacketListenerImpl.this.gameProfile.getName(), ex);
+                            server.server.getLogger()
+                                    .log(java.util.logging.Level.WARNING, "Exception verifying " + ServerLoginPacketListenerImpl.this.gameProfile.getName(), ex);
                         }
                     }
-            });
-            // Paper end
+                });
+                // Paper end
                 // Spigot end
             }
 
@@ -330,7 +327,8 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                 GameProfile gameprofile = ServerLoginPacketListenerImpl.this.gameProfile;
 
                 try {
-                    ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s, this.getAddress());
+                    ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.server.getSessionService()
+                            .hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s, this.getAddress());
                     if (ServerLoginPacketListenerImpl.this.gameProfile != null) {
                         // CraftBukkit start - fire PlayerPreLoginEvent
                         if (!ServerLoginPacketListenerImpl.this.connection.isConnected()) {
@@ -358,7 +356,8 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                     // CraftBukkit start - catch all exceptions
                 } catch (Exception exception) {
                     ServerLoginPacketListenerImpl.this.disconnect("Failed to verify username!");
-                    server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
+                    server.server.getLogger()
+                            .log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
                     // CraftBukkit end
                 }
 
@@ -378,61 +377,62 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
     public class LoginHandler {
 
         public void fireEvents() throws Exception {
-                        // Paper start - Velocity support
-                        if (ServerLoginPacketListenerImpl.this.velocityLoginMessageId == -1 && io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled) {
-                            disconnect("This server requires you to connect with Velocity.");
-                            return;
-                        }
-                        // Paper end
-                        String playerName = ServerLoginPacketListenerImpl.this.gameProfile.getName();
-                        java.net.InetAddress address = ((java.net.InetSocketAddress) ServerLoginPacketListenerImpl.this.connection.getRemoteAddress()).getAddress();
-                        java.net.InetAddress rawAddress = ((java.net.InetSocketAddress) connection.channel.remoteAddress()).getAddress(); // Paper
-                        java.util.UUID uniqueId = ServerLoginPacketListenerImpl.this.gameProfile.getId();
-                        final org.bukkit.craftbukkit.CraftServer server = ServerLoginPacketListenerImpl.this.server.server;
-
-                        // Paper start
-                        com.destroystokyo.paper.profile.PlayerProfile profile = com.destroystokyo.paper.profile.CraftPlayerProfile.asBukkitMirror(ServerLoginPacketListenerImpl.this.gameProfile);
-
-                        // KissenPaper start
-                        KissenPaperPublicUser kissenPaperPublicUser = new KissenPaperPublicUser(gameProfile.getId(), gameProfile.getName());
-                        Bukkit.getKissen().getImplementation(KissenUserImplementation.class).loadUser(kissenPaperPublicUser);
-                        // KissenPaper end
-
-                        AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, rawAddress, uniqueId, profile, ServerLoginPacketListenerImpl.this.connection.hostname); // Paper - add rawAddress & hostname
-                        server.getPluginManager().callEvent(asyncEvent);
-                        profile = asyncEvent.getPlayerProfile();
-                        profile.complete(true); // Paper - setPlayerProfileAPI
-                        gameProfile = com.destroystokyo.paper.profile.CraftPlayerProfile.asAuthlibCopy(profile);
-                        playerName = gameProfile.getName();
-                        uniqueId = gameProfile.getId();
-                        // Paper end
-
-                        if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
-                            final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
-                            if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
-                                event.disallow(asyncEvent.getResult(), asyncEvent.kickMessage()); // Paper - Adventure
-                            }
-                            Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
-                                @Override
-                                protected PlayerPreLoginEvent.Result evaluate() {
-                                    server.getPluginManager().callEvent(event);
-                                    return event.getResult();
-                                }};
-
-                            ServerLoginPacketListenerImpl.this.server.processQueue.add(waitable);
-                            if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
-                                ServerLoginPacketListenerImpl.this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage())); // Paper - Adventure
-                                return;
-                            }
-                        } else {
-                            if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
-                                ServerLoginPacketListenerImpl.this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(asyncEvent.kickMessage())); // Paper - Adventure
-                                return;
-                            }
-                        }
-                        // CraftBukkit end
-                        ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.gameProfile.getName(), ServerLoginPacketListenerImpl.this.gameProfile.getId());
-                        ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+            // Paper start - Velocity support
+            if (ServerLoginPacketListenerImpl.this.velocityLoginMessageId == -1 && io.papermc.paper.configuration.GlobalConfiguration.get().proxies.velocity.enabled) {
+                disconnect("This server requires you to connect with Velocity.");
+                return;
+            }
+            // Paper end
+            String playerName = ServerLoginPacketListenerImpl.this.gameProfile.getName();
+            java.net.InetAddress address = ((java.net.InetSocketAddress) ServerLoginPacketListenerImpl.this.connection.getRemoteAddress()).getAddress();
+            java.net.InetAddress rawAddress = ((java.net.InetSocketAddress) connection.channel.remoteAddress()).getAddress(); // Paper
+            java.util.UUID uniqueId = ServerLoginPacketListenerImpl.this.gameProfile.getId();
+            final org.bukkit.craftbukkit.CraftServer server = ServerLoginPacketListenerImpl.this.server.server;
+
+            // Paper start
+            com.destroystokyo.paper.profile.PlayerProfile profile = com.destroystokyo.paper.profile.CraftPlayerProfile.asBukkitMirror(ServerLoginPacketListenerImpl.this.gameProfile);
+
+            // KissenPaper start
+            KissenPaperPublicUser kissenPaperPublicUser = new KissenPaperPublicUser(gameProfile.getId(), gameProfile.getName());
+            Bukkit.getKissen().getImplementation(KissenUserImplementation.class).loadUser(kissenPaperPublicUser);
+            // KissenPaper end
+
+            AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, rawAddress, uniqueId, profile, ServerLoginPacketListenerImpl.this.connection.hostname); // Paper - add rawAddress & hostname
+            server.getPluginManager().callEvent(asyncEvent);
+            profile = asyncEvent.getPlayerProfile();
+            profile.complete(true); // Paper - setPlayerProfileAPI
+            gameProfile = com.destroystokyo.paper.profile.CraftPlayerProfile.asAuthlibCopy(profile);
+            playerName = gameProfile.getName();
+            uniqueId = gameProfile.getId();
+            // Paper end
+
+            if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+                if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+                    event.disallow(asyncEvent.getResult(), asyncEvent.kickMessage()); // Paper - Adventure
+                }
+                Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+                    @Override
+                    protected PlayerPreLoginEvent.Result evaluate() {
+                        server.getPluginManager().callEvent(event);
+                        return event.getResult();
+                    }
+                };
+
+                ServerLoginPacketListenerImpl.this.server.processQueue.add(waitable);
+                if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+                    ServerLoginPacketListenerImpl.this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage())); // Paper - Adventure
+                    return;
+                }
+            } else {
+                if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                    ServerLoginPacketListenerImpl.this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(asyncEvent.kickMessage())); // Paper - Adventure
+                    return;
+                }
+            }
+            // CraftBukkit end
+            ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.gameProfile.getName(), ServerLoginPacketListenerImpl.this.gameProfile.getId());
+            ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
         }
     }
     // Spigot end
@@ -473,7 +473,8 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                     new LoginHandler().fireEvents();
                 } catch (Exception ex) {
                     disconnect("Failed to verify username!");
-                    server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameProfile.getName(), ex);
+                    server.server.getLogger()
+                            .log(java.util.logging.Level.WARNING, "Exception verifying " + gameProfile.getName(), ex);
                 }
             });
             return;
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 7c22284d351e30a1d33a862750dc61406d47140c..d2871f3011949da5f2b970300aa06033ee0b7a8f 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -10,24 +10,6 @@ import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import io.netty.buffer.Unpooled;
 import io.papermc.paper.adventure.PaperAdventure;
-import java.io.File;
-import java.net.SocketAddress;
-import java.nio.file.Path;
-import java.text.SimpleDateFormat;
-import java.time.Instant;
-import java.util.Collection;
-import java.util.EnumSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
-import java.util.function.Function;
-import java.util.function.Predicate;
-import javax.annotation.Nullable;
-
 import net.kissenpvp.core.base.KissenCore;
 import net.kissenpvp.core.message.KissenComponentSerializer;
 import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
@@ -35,54 +17,29 @@ import net.kissenpvp.core.user.KissenUserImplementation;
 import net.minecraft.ChatFormatting;
 import net.minecraft.FileUtil;
 import net.minecraft.commands.CommandSourceStack;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.LayeredRegistryAccess;
-import net.minecraft.core.RegistryAccess;
-import net.minecraft.core.RegistrySynchronization;
-import net.minecraft.core.UUIDUtil;
+import net.minecraft.core.*;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.chat.ChatType;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.MutableComponent;
-import net.minecraft.network.chat.OutgoingChatMessage;
-import net.minecraft.network.chat.PlayerChatMessage;
+import net.minecraft.network.chat.*;
 import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket;
-import net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket;
-import net.minecraft.network.protocol.game.ClientboundEntityEventPacket;
-import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
-import net.minecraft.network.protocol.game.ClientboundInitializeBorderPacket;
-import net.minecraft.network.protocol.game.ClientboundLoginPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoRemovePacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundRespawnPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket;
-import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
-import net.minecraft.network.protocol.game.ClientboundSetChunkCacheRadiusPacket;
-import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
-import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
-import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket;
-import net.minecraft.network.protocol.game.ClientboundSetSimulationDistancePacket;
-import net.minecraft.network.protocol.game.ClientboundSetTimePacket;
-import net.minecraft.network.protocol.game.ClientboundSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateEnabledFeaturesPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.PlayerAdvancements;
 import net.minecraft.server.RegistryLayer;
 import net.minecraft.server.ServerScoreboard;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import net.minecraft.server.network.ServerLoginPacketListenerImpl;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.stats.ServerStatsCounter;
+import net.minecraft.stats.Stats;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.TagNetworkSerialization;
 import net.minecraft.util.Mth;
@@ -104,36 +61,29 @@ import net.minecraft.world.level.storage.PlayerDataStorage;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.PlayerTeam;
-import net.minecraft.world.scores.Scoreboard; // Paper
+import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.Team;
 import org.bukkit.Bukkit;
-import org.slf4j.Logger;
-
-// CraftBukkit start
-import java.util.stream.Collectors;
-import net.minecraft.server.dedicated.DedicatedServer;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.network.ServerGamePacketListenerImpl;
-import net.minecraft.server.network.ServerLoginPacketListenerImpl;
-import net.minecraft.sounds.SoundEvents;
-import net.minecraft.sounds.SoundSource;
-import net.minecraft.stats.ServerStatsCounter;
-import net.minecraft.stats.Stats;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.entity.Player;
-import org.bukkit.event.player.PlayerChangedWorldEvent;
-import org.bukkit.event.player.PlayerJoinEvent;
-import org.bukkit.event.player.PlayerLoginEvent;
-import org.bukkit.event.player.PlayerQuitEvent;
-import org.bukkit.event.player.PlayerRespawnEvent;
+import org.bukkit.event.player.*;
 import org.bukkit.event.player.PlayerRespawnEvent.RespawnReason;
-import org.bukkit.event.player.PlayerSpawnChangeEvent;
+import org.slf4j.Logger;
+
+import javax.annotation.Nullable;
+import java.io.File;
+import java.net.SocketAddress;
+import java.nio.file.Path;
+import java.text.SimpleDateFormat;
+import java.time.Instant;
+import java.util.*;
+import java.util.function.Function;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
 // CraftBukkit end
 
 public abstract class PlayerList {
@@ -170,7 +120,7 @@ public abstract class PlayerList {
 
     // CraftBukkit start
     private CraftServer cserver;
-    private final Map<String,ServerPlayer> playersByName = new java.util.HashMap<>();
+    private final Map<String, ServerPlayer> playersByName = new java.util.HashMap<>();
     public @Nullable String collideRuleTeamName; // Paper - Team name used for collideRule
 
     public PlayerList(MinecraftServer server, LayeredRegistryAccess<RegistryLayer> registryManager, PlayerDataStorage saveHandler, int maxPlayers) {
@@ -192,6 +142,7 @@ public abstract class PlayerList {
         this.maxPlayers = maxPlayers;
         this.playerIo = saveHandler;
     }
+
     abstract public void loadAndSaveFiles(); // Paper - moved from DedicatedPlayerList constructor
 
     public void placeNewPlayer(Connection connection, ServerPlayer player) {
@@ -261,7 +212,8 @@ public abstract class PlayerList {
         String s1 = "local";
 
         if (connection.getRemoteAddress() != null) {
-            s1 = io.papermc.paper.configuration.GlobalConfiguration.get().logging.logPlayerIpAddresses ? connection.getRemoteAddress().toString() : "<ip address withheld>"; // Paper
+            s1 = io.papermc.paper.configuration.GlobalConfiguration.get().logging.logPlayerIpAddresses ? connection.getRemoteAddress()
+                    .toString() : "<ip address withheld>"; // Paper
         }
 
         // Spigot start - spawn location event
@@ -291,10 +243,13 @@ public abstract class PlayerList {
         boolean flag1 = gamerules.getBoolean(GameRules.RULE_REDUCEDDEBUGINFO);
 
         // Spigot - view distance
-        playerconnection.send(new ClientboundLoginPacket(player.getId(), worlddata.isHardcore(), player.gameMode.getGameModeForPlayer(), player.gameMode.getPreviousGameModeForPlayer(), this.server.levelKeys(), this.synchronizedRegistries, worldserver1.dimensionTypeId(), worldserver1.dimension(), BiomeManager.obfuscateSeed(worldserver1.getSeed()), this.getMaxPlayers(), worldserver1.getWorld().getSendViewDistance(), worldserver1.getWorld().getSimulationDistance(), flag1, !flag, worldserver1.isDebug(), worldserver1.isFlat(), player.getLastDeathLocation(), player.getPortalCooldown())); // Paper - replace old player chunk management
+        playerconnection.send(new ClientboundLoginPacket(player.getId(), worlddata.isHardcore(), player.gameMode.getGameModeForPlayer(), player.gameMode.getPreviousGameModeForPlayer(), this.server.levelKeys(), this.synchronizedRegistries, worldserver1.dimensionTypeId(), worldserver1.dimension(), BiomeManager.obfuscateSeed(worldserver1.getSeed()), this.getMaxPlayers(), worldserver1.getWorld()
+                .getSendViewDistance(), worldserver1.getWorld()
+                .getSimulationDistance(), flag1, !flag, worldserver1.isDebug(), worldserver1.isFlat(), player.getLastDeathLocation(), player.getPortalCooldown())); // Paper - replace old player chunk management
         player.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
         playerconnection.send(new ClientboundUpdateEnabledFeaturesPacket(FeatureFlags.REGISTRY.toNames(worldserver1.enabledFeatures())));
-        playerconnection.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(this.getServer().getServerModName())));
+        playerconnection.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(this.getServer()
+                .getServerModName())));
         playerconnection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
         playerconnection.send(new ClientboundPlayerAbilitiesPacket(player.getAbilities()));
         playerconnection.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
@@ -332,7 +287,8 @@ public abstract class PlayerList {
         // Paper start - correctly register player BEFORE PlayerJoinEvent, so the entity is valid and doesn't require tick delay hacks
         player.supressTrackerForLogin = true;
         worldserver1.addNewPlayer(player);
-        this.server.getCustomBossEvents().onPlayerConnect(player); // see commented out section below worldserver.addPlayerJoin(entityplayer);
+        this.server.getCustomBossEvents()
+                .onPlayerConnect(player); // see commented out section below worldserver.addPlayerJoin(entityplayer);
         mountSavedVehicle(player, worldserver1, nbttagcompound);
         // Paper end
         // CraftBukkit start
@@ -384,7 +340,7 @@ public abstract class PlayerList {
         // Paper end
         player.sentListPacket = true;
         player.supressTrackerForLogin = false; // Paper
-        ((ServerLevel)player.level()).getChunkSource().chunkMap.addEntity(player); // Paper - track entity now
+        ((ServerLevel) player.level()).getChunkSource().chunkMap.addEntity(player); // Paper - track entity now
         // CraftBukkit end
 
         //player.getEntityData().refresh(player); // CraftBukkit - BungeeCord#2321, send complete data to self on spawn Paper - THIS IS NOT NEEDED ANYMORE
@@ -414,15 +370,17 @@ public abstract class PlayerList {
         onPlayerJoinFinish(player, worldserver1, s1);
         // Paper start - Send empty chunk, so players aren't stuck in the world loading screen with our chunk system not sending chunks when dead
         if (player.isDeadOrDying()) {
-            net.minecraft.core.Holder<net.minecraft.world.level.biome.Biome> plains = worldserver1.registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.BIOME)
-                .getHolderOrThrow(net.minecraft.world.level.biome.Biomes.PLAINS);
+            net.minecraft.core.Holder<net.minecraft.world.level.biome.Biome> plains = worldserver1.registryAccess()
+                    .registryOrThrow(net.minecraft.core.registries.Registries.BIOME)
+                    .getHolderOrThrow(net.minecraft.world.level.biome.Biomes.PLAINS);
             player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket(
-                new net.minecraft.world.level.chunk.EmptyLevelChunk(worldserver1, player.chunkPosition(), plains),
-                worldserver1.getLightEngine(), null, null, false)
+                    new net.minecraft.world.level.chunk.EmptyLevelChunk(worldserver1, player.chunkPosition(), plains),
+                    worldserver1.getLightEngine(), null, null, false)
             );
         }
         // Paper end
     }
+
     private void mountSavedVehicle(ServerPlayer player, ServerLevel worldserver1, CompoundTag nbttagcompound) {
         // Paper end
         if (nbttagcompound != null && nbttagcompound.contains("RootVehicle", 10)) {
@@ -475,6 +433,7 @@ public abstract class PlayerList {
 
         // Paper start
     }
+
     public void onPlayerJoinFinish(ServerPlayer player, ServerLevel worldserver1, String s1) {
         // Paper end
         player.initInventoryMenu();
@@ -487,7 +446,8 @@ public abstract class PlayerList {
         }
         // Paper end
         // CraftBukkit - Moved from above, added world
-        PlayerList.LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", player.getName().getString(), s1, player.getId(), worldserver1.serverLevelData.getLevelName(), player.getX(), player.getY(), player.getZ());
+        PlayerList.LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", player.getName()
+                .getString(), s1, player.getId(), worldserver1.serverLevelData.getLevelName(), player.getX(), player.getY(), player.getZ());
     }
 
     public void updateEntireScoreboard(ServerScoreboard scoreboard, ServerPlayer player) {
@@ -591,8 +551,10 @@ public abstract class PlayerList {
 
     public net.kyori.adventure.text.Component remove(ServerPlayer entityplayer) { // CraftBukkit - return string // Paper - return Component
         // Paper start
-        return this.remove(entityplayer, net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? entityplayer.getBukkitEntity().displayName() : PaperAdventure.asAdventure(entityplayer.getDisplayName())));
+        return this.remove(entityplayer, net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? entityplayer.getBukkitEntity()
+                .displayName() : PaperAdventure.asAdventure(entityplayer.getDisplayName())));
     }
+
     public net.kyori.adventure.text.Component remove(ServerPlayer entityplayer, net.kyori.adventure.text.Component leaveMessage) {
         // Paper end
         ServerLevel worldserver = entityplayer.serverLevel();
@@ -609,7 +571,8 @@ public abstract class PlayerList {
         this.cserver.getPluginManager().callEvent(playerQuitEvent);
         entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
 
-        if (server.isSameThread()) entityplayer.doTick(); // SPIGOT-924 // Paper - don't tick during emergency shutdowns (Watchdog)
+        if (server.isSameThread())
+            entityplayer.doTick(); // SPIGOT-924 // Paper - don't tick during emergency shutdowns (Watchdog)
         // CraftBukkit end
 
         // Paper start - Remove from collideRule team if needed
@@ -700,7 +663,10 @@ public abstract class PlayerList {
 
         for (int i = 0; i < this.players.size(); ++i) {
             entityplayer = (ServerPlayer) this.players.get(i);
-            if (entityplayer.getUUID().equals(uuid) || (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode() && entityplayer.getGameProfile().getName().equalsIgnoreCase(gameprofile.getName()))) { // Paper - validate usernames
+            if (entityplayer.getUUID()
+                    .equals(uuid) || (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode() && entityplayer.getGameProfile()
+                    .getName()
+                    .equalsIgnoreCase(gameprofile.getName()))) { // Paper - validate usernames
                 list.add(entityplayer);
             }
         }
@@ -737,7 +703,10 @@ public abstract class PlayerList {
         } else if (!this.isWhiteListed(gameprofile, event)) { // Paper
             //ichatmutablecomponent = Component.translatable("multiplayer.disconnect.not_whitelisted"); // Paper
             //event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(org.spigotmc.SpigotConfig.whitelistMessage)); // Spigot // Paper - Adventure - moved to isWhitelisted
-        } else if (this.getIpBans().isBanned(socketaddress) && getIpBans().get(socketaddress) != null && !this.getIpBans().get(socketaddress).hasExpired()) { // Paper - fix NPE with temp ip bans
+        } else if (this.getIpBans()
+                .isBanned(socketaddress) && getIpBans().get(socketaddress) != null && !this.getIpBans()
+                .get(socketaddress)
+                .hasExpired()) { // Paper - fix NPE with temp ip bans
             IpBanListEntry ipbanentry = this.ipBans.get(socketaddress);
 
             ichatmutablecomponent = Component.translatable("multiplayer.disconnect.banned_ip.reason", ipbanentry.getReason());
@@ -756,7 +725,7 @@ public abstract class PlayerList {
                         .getLegacySerializer()
                         .serialize(KissenCore.getInstance()
                                 .getImplementation(KissenLocalizationImplementation.class)
-                                .translate("messages.server-full", entityplayer.getBukkitEntity().getCurrentLocale()));
+                                .translate("spigot.server-full", entityplayer.getBukkitEntity().getCurrentLocale()));
                 // KissenPaper end
 
                 event.disallow(PlayerLoginEvent.Result.KICK_FULL, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
@@ -817,7 +786,7 @@ public abstract class PlayerList {
         return respawn(entityplayer, worldserver, flag, location, avoidSuffocation, reason, new org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag[0]);
     }
 
-    public ServerPlayer respawn(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, RespawnReason reason, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
+    public ServerPlayer respawn(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, RespawnReason reason, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag... respawnFlags) {
         // Paper end
         entityplayer.stopRiding(); // CraftBukkit
         this.players.remove(entityplayer);
@@ -906,11 +875,13 @@ public abstract class PlayerList {
             if (location == null) {
                 worldserver1 = this.server.getLevel(Level.OVERWORLD);
                 blockposition = entityplayer1.getSpawnPoint(worldserver1);
-                location = CraftLocation.toBukkit(blockposition, worldserver1.getWorld(), worldserver1.levelData.getSpawnAngle(), 0.0F).add(0.5F, 0.1F, 0.5F); // Paper - use world spawn angle
+                location = CraftLocation.toBukkit(blockposition, worldserver1.getWorld(), worldserver1.levelData.getSpawnAngle(), 0.0F)
+                        .add(0.5F, 0.1F, 0.5F); // Paper - use world spawn angle
             }
 
             Player respawnPlayer = entityplayer1.getBukkitEntity();
-            PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn && !isAnchorSpawn, isAnchorSpawn, reason, com.google.common.collect.ImmutableSet.<org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag>builder().add(respawnFlags)); // Paper - Fix anchor respawn acting as a bed respawn from the end portal
+            PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn && !isAnchorSpawn, isAnchorSpawn, reason, com.google.common.collect.ImmutableSet.<org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag>builder()
+                    .add(respawnFlags)); // Paper - Fix anchor respawn acting as a bed respawn from the end portal
             this.cserver.getPluginManager().callEvent(respawnEvent);
             // Spigot Start
             if (entityplayer.connection.isDisconnected()) {
@@ -919,7 +890,7 @@ public abstract class PlayerList {
             // Spigot End
 
             // Paper start - Fix SPIGOT-5989
-            if (!location.equals(respawnEvent.getRespawnLocation()) ) {
+            if (!location.equals(respawnEvent.getRespawnLocation())) {
                 location = respawnEvent.getRespawnLocation();
                 isLocAltered = true;
             }
@@ -933,7 +904,8 @@ public abstract class PlayerList {
         entityplayer1.forceSetPositionRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         // CraftBukkit end
 
-        worldserver1.getChunkSource().addRegionTicket(net.minecraft.server.level.TicketType.POST_TELEPORT, new net.minecraft.world.level.ChunkPos(location.getBlockX() >> 4, location.getBlockZ() >> 4), 1, entityplayer.getId()); // Paper
+        worldserver1.getChunkSource()
+                .addRegionTicket(net.minecraft.server.level.TicketType.POST_TELEPORT, new net.minecraft.world.level.ChunkPos(location.getBlockX() >> 4, location.getBlockZ() >> 4), 1, entityplayer.getId()); // Paper
         while (avoidSuffocation && !worldserver1.noCollision(entityplayer1, entityplayer1.getBoundingBox(), true) && entityplayer1.getY() < (double) worldserver1.getMaxBuildHeight()) { // Paper - make sure this loads chunks, we default to NOT loading now
             entityplayer1.setPos(entityplayer1.getX(), entityplayer1.getY() + 1.0D, entityplayer1.getZ());
         }
@@ -942,8 +914,10 @@ public abstract class PlayerList {
         // CraftBukkit start
         LevelData worlddata = worldserver1.getLevelData();
         entityplayer1.connection.send(new ClientboundRespawnPacket(worldserver1.dimensionTypeId(), worldserver1.dimension(), BiomeManager.obfuscateSeed(worldserver1.getSeed()), entityplayer1.gameMode.getGameModeForPlayer(), entityplayer1.gameMode.getPreviousGameModeForPlayer(), worldserver1.isDebug(), worldserver1.isFlat(), (byte) i, entityplayer1.getLastDeathLocation(), entityplayer1.getPortalCooldown()));
-        entityplayer1.connection.send(new ClientboundSetChunkCacheRadiusPacket(worldserver1.getWorld().getSendViewDistance())); // Spigot // Paper - replace old player chunk management
-        entityplayer1.connection.send(new ClientboundSetSimulationDistancePacket(worldserver1.getWorld().getSimulationDistance())); // Spigot // Paper - replace old player chunk management
+        entityplayer1.connection.send(new ClientboundSetChunkCacheRadiusPacket(worldserver1.getWorld()
+                .getSendViewDistance())); // Spigot // Paper - replace old player chunk management
+        entityplayer1.connection.send(new ClientboundSetSimulationDistancePacket(worldserver1.getWorld()
+                .getSimulationDistance())); // Spigot // Paper - replace old player chunk management
         entityplayer1.spawnIn(worldserver1);
         entityplayer1.unsetRemoved();
         entityplayer1.connection.teleport(CraftLocation.toBukkit(entityplayer1.position(), worldserver1.getWorld(), entityplayer1.getYRot(), entityplayer1.getXRot()));
@@ -958,7 +932,8 @@ public abstract class PlayerList {
         if (!entityplayer.connection.isDisconnected()) {
             worldserver1.addRespawnedPlayer(entityplayer1);
             this.players.add(entityplayer1);
-            this.playersByName.put(entityplayer1.getScoreboardName().toLowerCase(java.util.Locale.ROOT), entityplayer1); // Spigot
+            this.playersByName.put(entityplayer1.getScoreboardName()
+                    .toLowerCase(java.util.Locale.ROOT), entityplayer1); // Spigot
             this.playersByUUID.put(entityplayer1.getUUID(), entityplayer1);
         }
         // entityplayer1.initInventoryMenu();
@@ -969,8 +944,9 @@ public abstract class PlayerList {
                 BlockState data = worldserver1.getBlockState(blockposition);
                 worldserver1.setBlock(blockposition, data.setValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE, data.getValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE) - 1), 3);
             }
-            entityplayer1.connection.send(new ClientboundSoundPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundSource.BLOCKS, (double) location.getX(), (double) location.getY(), (double) location.getZ(), 1.0F, 1.0F, worldserver1.getRandom().nextLong()));
-        // Paper end
+            entityplayer1.connection.send(new ClientboundSoundPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundSource.BLOCKS, (double) location.getX(), (double) location.getY(), (double) location.getZ(), 1.0F, 1.0F, worldserver1.getRandom()
+                    .nextLong()));
+            // Paper end
         }
         // Added from changeDimension
         this.sendAllPlayerInfo(entityplayer); // Update health, etc...
@@ -995,7 +971,8 @@ public abstract class PlayerList {
 
         // Paper start
         if (isRespawn) {
-            cserver.getPluginManager().callEvent(new com.destroystokyo.paper.event.player.PlayerPostRespawnEvent(entityplayer.getBukkitEntity(), location, isBedSpawn));
+            cserver.getPluginManager()
+                    .callEvent(new com.destroystokyo.paper.event.player.PlayerPostRespawnEvent(entityplayer.getBukkitEntity(), location, isBedSpawn));
         }
         // Paper end
 
@@ -1016,12 +993,14 @@ public abstract class PlayerList {
             for (int i = 0; i < this.players.size(); ++i) {
                 final ServerPlayer target = (ServerPlayer) this.players.get(i);
 
-                target.connection.send(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY), this.players.stream().filter(new Predicate<ServerPlayer>() {
-                    @Override
-                    public boolean test(ServerPlayer input) {
-                        return target.getBukkitEntity().canSee(input.getBukkitEntity());
-                    }
-                }).collect(Collectors.toList())));
+                target.connection.send(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY), this.players.stream()
+                        .filter(new Predicate<ServerPlayer>() {
+                            @Override
+                            public boolean test(ServerPlayer input) {
+                                return target.getBukkitEntity().canSee(input.getBukkitEntity());
+                            }
+                        })
+                        .collect(Collectors.toList())));
             }
             // CraftBukkit end
             this.sendAllPlayerInfoIn = 0;
@@ -1043,7 +1022,7 @@ public abstract class PlayerList {
     // CraftBukkit start - add a world/entity limited version
     public void broadcastAll(Packet packet, net.minecraft.world.entity.player.Player entityhuman) {
         for (int i = 0; i < this.players.size(); ++i) {
-            ServerPlayer entityplayer =  this.players.get(i);
+            ServerPlayer entityplayer = this.players.get(i);
             if (entityhuman != null && !entityplayer.getBukkitEntity().canSee(entityhuman.getBukkitEntity())) {
                 continue;
             }
@@ -1150,6 +1129,7 @@ public abstract class PlayerList {
         // Paper start - add recalculatePermissions parameter
         this.sendPlayerPermissionLevel(player, permissionLevel, true);
     }
+
     public void sendPlayerPermissionLevel(ServerPlayer player, int permissionLevel, boolean recalculatePermissions) {
         // Paper end
         if (player.connection != null) {
@@ -1167,8 +1147,8 @@ public abstract class PlayerList {
         }
 
         if (recalculatePermissions) { // Paper
-        player.getBukkitEntity().recalculatePermissions(); // CraftBukkit
-        this.server.getCommands().sendCommands(player);
+            player.getBukkitEntity().recalculatePermissions(); // CraftBukkit
+            this.server.getCommands().sendCommands(player);
         } // Paper
     }
 
@@ -1176,6 +1156,7 @@ public abstract class PlayerList {
         // Paper start
         return isWhiteListed(profile, null);
     }
+
     public boolean isWhiteListed(GameProfile gameprofile, org.bukkit.event.player.PlayerLoginEvent loginEvent) {
         boolean isOp = this.ops.contains(gameprofile);
         // KissenPaper start
@@ -1183,7 +1164,7 @@ public abstract class PlayerList {
                 .getImplementation(KissenLocalizationImplementation.class);
         String whitelistMessage = KissenComponentSerializer.getInstance()
                 .getLegacySerializer()
-                .serialize(kissenLocalizationImplementation.translate("messages.whitelist", loginEvent.getPlayer()
+                .serialize(kissenLocalizationImplementation.translate("spigot.whitelist", loginEvent.getPlayer()
                         .locale()));
         // KissenPaper end
         boolean isWhitelisted = !this.doWhiteList || isOp || this.whitelist.contains(gameprofile);
@@ -1192,7 +1173,8 @@ public abstract class PlayerList {
         event.callEvent();
         if (!event.isWhitelisted()) {
             if (loginEvent != null) {
-                loginEvent.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(event.getKickMessage() == null ? /* KissenPaper */ whitelistMessage /* org.spigotmc.SpigotConfig.whitelistMessage */ : event.getKickMessage()));
+                loginEvent.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                        .deserialize(event.getKickMessage() == null ? /* KissenPaper */ whitelistMessage /* org.spigotmc.SpigotConfig.whitelistMessage */ : event.getKickMessage()));
             }
             return false;
         }
@@ -1201,7 +1183,8 @@ public abstract class PlayerList {
     }
 
     public boolean isOp(GameProfile profile) {
-        return this.ops.contains(profile) || this.server.isSingleplayerOwner(profile) && this.server.getWorldData().getAllowCommands() || this.allowCheatsForAllPlayers;
+        return this.ops.contains(profile) || this.server.isSingleplayerOwner(profile) && this.server.getWorldData()
+                .getAllowCommands() || this.allowCheatsForAllPlayers;
     }
 
     @Nullable
@@ -1215,7 +1198,7 @@ public abstract class PlayerList {
 
             // CraftBukkit start - Test if player receiving packet can see the source of the packet
             if (player != null && !entityplayer.getBukkitEntity().canSee(player.getBukkitEntity())) {
-               continue;
+                continue;
             }
             // CraftBukkit end
 
@@ -1238,20 +1221,23 @@ public abstract class PlayerList {
     }
 
     public void saveAll(int interval) {
-        io.papermc.paper.util.MCUtil.ensureMain("Save Players" , () -> { // Paper - Ensure main
-        MinecraftTimings.savePlayers.startTiming(); // Paper
-        int numSaved = 0;
-        long now = MinecraftServer.currentTick;
-        for (int i = 0; i < this.players.size(); ++i) {
-            ServerPlayer entityplayer = this.players.get(i);
-            if (interval == -1 || now - entityplayer.lastSave >= interval) {
-                this.save(entityplayer);
-                if (interval != -1 && ++numSaved >= io.papermc.paper.configuration.GlobalConfiguration.get().playerAutoSave.maxPerTick()) { break; }
+        io.papermc.paper.util.MCUtil.ensureMain("Save Players", () -> { // Paper - Ensure main
+            MinecraftTimings.savePlayers.startTiming(); // Paper
+            int numSaved = 0;
+            long now = MinecraftServer.currentTick;
+            for (int i = 0; i < this.players.size(); ++i) {
+                ServerPlayer entityplayer = this.players.get(i);
+                if (interval == -1 || now - entityplayer.lastSave >= interval) {
+                    this.save(entityplayer);
+                    if (interval != -1 && ++numSaved >= io.papermc.paper.configuration.GlobalConfiguration.get().playerAutoSave.maxPerTick()) {
+                        break;
+                    }
+                }
+                // Paper end
             }
-            // Paper end
-        }
-        MinecraftTimings.savePlayers.stopTiming(); // Paper
-        return null; }); // Paper - ensure main
+            MinecraftTimings.savePlayers.stopTiming(); // Paper
+            return null;
+        }); // Paper - ensure main
     }
 
     public UserWhiteList getWhiteList() {
@@ -1276,7 +1262,8 @@ public abstract class PlayerList {
         WorldBorder worldborder = player.level().getWorldBorder(); // CraftBukkit
 
         player.connection.send(new ClientboundInitializeBorderPacket(worldborder));
-        player.connection.send(new ClientboundSetTimePacket(world.getGameTime(), world.getDayTime(), world.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)));
+        player.connection.send(new ClientboundSetTimePacket(world.getGameTime(), world.getDayTime(), world.getGameRules()
+                .getBoolean(GameRules.RULE_DAYLIGHT)));
         player.connection.send(new ClientboundSetDefaultSpawnPositionPacket(world.getSharedSpawnPos(), world.getSharedSpawnAngle()));
         if (world.isRaining()) {
             // CraftBukkit start - handle player weather
@@ -1299,7 +1286,9 @@ public abstract class PlayerList {
         // CraftBukkit start - from GameRules
         int i = player.level().getGameRules().getBoolean(GameRules.RULE_REDUCEDDEBUGINFO) ? 22 : 23;
         player.connection.send(new ClientboundEntityEventPacket(player, (byte) i));
-        float immediateRespawn = player.level().getGameRules().getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN) ? 1.0F: 0.0F;
+        float immediateRespawn = player.level()
+                .getGameRules()
+                .getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN) ? 1.0F : 0.0F;
         player.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.IMMEDIATE_RESPAWN, immediateRespawn));
         // CraftBukkit end
     }
@@ -1363,13 +1352,27 @@ public abstract class PlayerList {
     }
 
     public void removeAll(boolean isRestarting) {
+
+        // KissenPaper start
+        KissenLocalizationImplementation kissenLocalizationImplementation = Bukkit.getKissen()
+                .getImplementation(KissenLocalizationImplementation.class);
         // Paper end
         // CraftBukkit start - disconnect safely
         for (ServerPlayer player : this.players) {
-            if (isRestarting) player.connection.disconnect(org.spigotmc.SpigotConfig.restartMessage, org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN); else // Paper - kick event cause (cause is never used here)
-            player.connection.disconnect(this.server.server.shutdownMessage(), org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN); // CraftBukkit - add custom shutdown message // Paper - Adventure & KickEventCause (cause is never used here)
+            if (isRestarting) {
+                // Kissenpaper start
+                net.kyori.adventure.text.Component restartMessage = kissenLocalizationImplementation.translate("spigot.restart", player.getBukkitEntity()
+                        .locale());
+                player.connection.disconnect(/* KissenPaper */ restartMessage /* org.spigotmc.SpigotConfig.restartMessage */, org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN);
+            } else // Paper - kick event cause (cause is never used here)
+            {
+                net.kyori.adventure.text.Component shutdownMessage = kissenLocalizationImplementation.translate("bukkit.shutdown-message", player.getBukkitEntity()
+                        .locale());
+                player.connection.disconnect(/* KissenPaper */  shutdownMessage /* this.server.server.shutdownMessage() */, org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN); // CraftBukkit - add custom shutdown message // Paper - Adventure & KickEventCause (cause is never used here)
+            }
         }
         // CraftBukkit end
+        // KissenPaper end
 
         // Paper start - Remove collideRule team if it exists
         if (this.collideRuleTeamName != null) {
@@ -1418,6 +1421,7 @@ public abstract class PlayerList {
         // Paper start
         this.broadcastChatMessage(message, sender, params, null);
     }
+
     public void broadcastChatMessage(PlayerChatMessage message, ServerPlayer sender, ChatType.Bound params, @Nullable Function<net.kyori.adventure.audience.Audience, Component> unsignedFunction) {
         // Paper end
         Objects.requireNonNull(sender);
@@ -1428,6 +1432,7 @@ public abstract class PlayerList {
         // Paper start
         this.broadcastChatMessage(message, shouldSendFiltered, sender, params, null);
     }
+
     public void broadcastChatMessage(PlayerChatMessage message, Predicate<ServerPlayer> shouldSendFiltered, @Nullable ServerPlayer sender, ChatType.Bound params, @Nullable Function<net.kyori.adventure.audience.Audience, Component> unsignedFunction) {
         // Paper end
         boolean flag = this.verifyChatTrusted(message);
@@ -1437,7 +1442,8 @@ public abstract class PlayerList {
         boolean flag1 = false;
 
         boolean flag2;
-        Packet<?> disguised = sender != null && unsignedFunction == null ? new net.minecraft.network.protocol.game.ClientboundDisguisedChatPacket(outgoingchatmessage.content(), params.toNetwork(sender.level().registryAccess())) : null; // Paper - don't send player chat packets from vanished players
+        Packet<?> disguised = sender != null && unsignedFunction == null ? new net.minecraft.network.protocol.game.ClientboundDisguisedChatPacket(outgoingchatmessage.content(), params.toNetwork(sender.level()
+                .registryAccess())) : null; // Paper - don't send player chat packets from vanished players
 
         for (Iterator iterator = this.players.iterator(); iterator.hasNext(); flag1 |= flag2 && message.isFullyFiltered()) {
             ServerPlayer entityplayer1 = (ServerPlayer) iterator.next();
@@ -1446,8 +1452,9 @@ public abstract class PlayerList {
             // Paper start - don't send player chat packets from vanished players
             if (sender != null && !entityplayer1.getBukkitEntity().canSee(sender.getBukkitEntity())) {
                 entityplayer1.connection.send(unsignedFunction != null
-                    ? new net.minecraft.network.protocol.game.ClientboundDisguisedChatPacket(unsignedFunction.apply(entityplayer1.getBukkitEntity()), params.toNetwork(sender.level().registryAccess()))
-                    : disguised);
+                        ? new net.minecraft.network.protocol.game.ClientboundDisguisedChatPacket(unsignedFunction.apply(entityplayer1.getBukkitEntity()), params.toNetwork(sender.level()
+                        .registryAccess()))
+                        : disguised);
                 continue;
             }
             // Paper end
@@ -1467,7 +1474,8 @@ public abstract class PlayerList {
     // CraftBukkit start
     public ServerStatsCounter getPlayerStats(ServerPlayer entityhuman) {
         ServerStatsCounter serverstatisticmanager = entityhuman.getStats();
-        return serverstatisticmanager == null ? this.getPlayerStats(entityhuman.getUUID(), entityhuman.getGameProfile().getName()) : serverstatisticmanager; // Paper - use username and not display name
+        return serverstatisticmanager == null ? this.getPlayerStats(entityhuman.getUUID(), entityhuman.getGameProfile()
+                .getName()) : serverstatisticmanager; // Paper - use username and not display name
     }
 
     public ServerStatsCounter getPlayerStats(UUID uuid, String displayName) {
@@ -1559,6 +1567,7 @@ public abstract class PlayerList {
         this.reloadTagData();
         this.reloadRecipeData();
     }
+
     public void reloadAdvancementData() {
         // Paper end
         // CraftBukkit start
@@ -1578,14 +1587,17 @@ public abstract class PlayerList {
 
         // Paper start
     }
+
     public void reloadTagData() {
         // Paper end
         this.broadcastAll(new ClientboundUpdateTagsPacket(TagNetworkSerialization.serializeTagsToNetwork(this.registries)));
         // Paper start
     }
+
     public void reloadRecipeData() {
         // Paper end
-        ClientboundUpdateRecipesPacket packetplayoutrecipeupdate = new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes());
+        ClientboundUpdateRecipesPacket packetplayoutrecipeupdate = new ClientboundUpdateRecipesPacket(this.server.getRecipeManager()
+                .getRecipes());
         Iterator iterator1 = this.players.iterator();
 
         while (iterator1.hasNext()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 333738bac1b9b6625937e54909e12f12123e1d0b..be9c4d7ee2ef8a321884eb75a88543822629ce0d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -16,39 +16,11 @@ import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.Lifecycle;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
-import java.awt.image.BufferedImage;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
-import java.util.function.Consumer;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import java.util.stream.Collectors;
-import javax.imageio.ImageIO;
-
 import net.kissenpvp.core.base.KissenCore;
 import net.kissenpvp.core.message.KissenComponentSerializer;
 import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
 import net.kyori.adventure.text.Component;
+import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
@@ -74,11 +46,7 @@ import net.minecraft.server.dedicated.DedicatedServerSettings;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.TicketType;
-import net.minecraft.server.players.IpBanListEntry;
-import net.minecraft.server.players.PlayerList;
-import net.minecraft.server.players.ServerOpListEntry;
-import net.minecraft.server.players.UserBanListEntry;
-import net.minecraft.server.players.UserWhiteListEntry;
+import net.minecraft.server.players.*;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.util.datafix.DataFixers;
@@ -88,11 +56,7 @@ import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.village.VillageSiege;
 import net.minecraft.world.entity.npc.CatSpawner;
 import net.minecraft.world.entity.npc.WanderingTraderSpawner;
-import net.minecraft.world.inventory.AbstractContainerMenu;
-import net.minecraft.world.inventory.CraftingContainer;
-import net.minecraft.world.inventory.CraftingMenu;
-import net.minecraft.world.inventory.ResultContainer;
-import net.minecraft.world.inventory.TransientCraftingContainer;
+import net.minecraft.world.inventory.*;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.MapItem;
 import net.minecraft.world.item.crafting.CraftingRecipe;
@@ -120,35 +84,12 @@ import net.minecraft.world.level.storage.WorldData;
 import net.minecraft.world.level.storage.loot.LootDataManager;
 import net.minecraft.world.level.validation.ContentValidationException;
 import net.minecraft.world.phys.Vec3;
-import org.bukkit.BanList;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.GameMode;
-import org.bukkit.Keyed;
-import org.bukkit.Location;
-import org.bukkit.NamespacedKey;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.Registry;
-import org.bukkit.Server;
-import org.bukkit.StructureType;
-import org.bukkit.UnsafeValues;
+import org.bukkit.*;
 import org.bukkit.Warning.WarningState;
-import org.bukkit.World;
 import org.bukkit.World.Environment;
-import org.bukkit.WorldBorder;
-import org.bukkit.WorldCreator;
 import org.bukkit.block.data.BlockData;
-import org.bukkit.boss.BarColor;
-import org.bukkit.boss.BarFlag;
-import org.bukkit.boss.BarStyle;
-import org.bukkit.boss.BossBar;
-import org.bukkit.boss.KeyedBossBar;
-import org.bukkit.command.Command;
-import org.bukkit.command.CommandException;
-import org.bukkit.command.CommandSender;
-import org.bukkit.command.ConsoleCommandSender;
-import org.bukkit.command.PluginCommand;
-import org.bukkit.command.SimpleCommandMap;
+import org.bukkit.boss.*;
+import org.bukkit.command.*;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
@@ -166,20 +107,7 @@ import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.generator.CraftWorldInfo;
 import org.bukkit.craftbukkit.generator.OldCraftChunkData;
 import org.bukkit.craftbukkit.help.SimpleHelpMap;
-import org.bukkit.craftbukkit.inventory.CraftBlastingRecipe;
-import org.bukkit.craftbukkit.inventory.CraftCampfireRecipe;
-import org.bukkit.craftbukkit.inventory.CraftFurnaceRecipe;
-import org.bukkit.craftbukkit.inventory.CraftItemFactory;
-import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.inventory.CraftMerchantCustom;
-import org.bukkit.craftbukkit.inventory.CraftRecipe;
-import org.bukkit.craftbukkit.inventory.CraftShapedRecipe;
-import org.bukkit.craftbukkit.inventory.CraftShapelessRecipe;
-import org.bukkit.craftbukkit.inventory.CraftSmithingTransformRecipe;
-import org.bukkit.craftbukkit.inventory.CraftSmithingTrimRecipe;
-import org.bukkit.craftbukkit.inventory.CraftSmokingRecipe;
-import org.bukkit.craftbukkit.inventory.CraftStonecuttingRecipe;
-import org.bukkit.craftbukkit.inventory.RecipeIterator;
+import org.bukkit.craftbukkit.inventory.*;
 import org.bukkit.craftbukkit.inventory.util.CraftInventoryCreator;
 import org.bukkit.craftbukkit.map.CraftMapColorCache;
 import org.bukkit.craftbukkit.map.CraftMapView;
@@ -197,14 +125,7 @@ import org.bukkit.craftbukkit.tag.CraftBlockTag;
 import org.bukkit.craftbukkit.tag.CraftEntityTag;
 import org.bukkit.craftbukkit.tag.CraftFluidTag;
 import org.bukkit.craftbukkit.tag.CraftItemTag;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
-import org.bukkit.craftbukkit.util.CraftIconCache;
-import org.bukkit.craftbukkit.util.CraftLocation;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
-import org.bukkit.craftbukkit.util.CraftSpawnCategory;
-import org.bukkit.craftbukkit.util.DatFileFilter;
-import org.bukkit.craftbukkit.util.Versioning;
+import org.bukkit.craftbukkit.util.*;
 import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
@@ -220,35 +141,14 @@ import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.generator.WorldInfo;
 import org.bukkit.help.HelpMap;
-import org.bukkit.inventory.BlastingRecipe;
-import org.bukkit.inventory.CampfireRecipe;
-import org.bukkit.inventory.ComplexRecipe;
-import org.bukkit.inventory.FurnaceRecipe;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.inventory.InventoryView;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.Merchant;
-import org.bukkit.inventory.Recipe;
-import org.bukkit.inventory.ShapedRecipe;
-import org.bukkit.inventory.ShapelessRecipe;
-import org.bukkit.inventory.SmithingTransformRecipe;
-import org.bukkit.inventory.SmithingTrimRecipe;
-import org.bukkit.inventory.SmokingRecipe;
-import org.bukkit.inventory.StonecuttingRecipe;
+import org.bukkit.inventory.*;
 import org.bukkit.loot.LootTable;
 import org.bukkit.map.MapPalette;
 import org.bukkit.map.MapView;
 import org.bukkit.packs.DataPackManager;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.permissions.Permission;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.PluginLoadOrder;
-import org.bukkit.plugin.PluginManager;
-import org.bukkit.plugin.ServicesManager;
-import org.bukkit.plugin.SimplePluginManager;
-import org.bukkit.plugin.SimpleServicesManager;
-import org.bukkit.plugin.java.JavaPluginLoader;
+import org.bukkit.plugin.*;
 import org.bukkit.plugin.messaging.Messenger;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.potion.Potion;
@@ -264,10 +164,17 @@ import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
-import net.md_5.bungee.api.chat.BaseComponent; // Spigot
-
-import javax.annotation.Nullable; // Paper
-import javax.annotation.Nonnull; // Paper
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.*;
+import java.net.InetAddress;
+import java.util.*;
+import java.util.function.Consumer;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import java.util.stream.Collectors;
 
 public final class CraftServer implements Server {
     private final String serverName = "Paper"; // Paper
@@ -280,7 +187,10 @@ public final class CraftServer implements Server {
     private final SimpleHelpMap helpMap = new SimpleHelpMap(this);
     private final StandardMessenger messenger = new StandardMessenger();
     private final SimplePluginManager pluginManager = new SimplePluginManager(this, commandMap);
-    public final io.papermc.paper.plugin.manager.PaperPluginManagerImpl paperPluginManager = new io.papermc.paper.plugin.manager.PaperPluginManagerImpl(this, this.commandMap, pluginManager); {this.pluginManager.paperPluginManager = this.paperPluginManager;} // Paper
+    public final io.papermc.paper.plugin.manager.PaperPluginManagerImpl paperPluginManager = new io.papermc.paper.plugin.manager.PaperPluginManagerImpl(this, this.commandMap, pluginManager);
+
+    {this.pluginManager.paperPluginManager = this.paperPluginManager;} // Paper
+
     private final StructureManager structureManager;
     protected final DedicatedServer console;
     protected final DedicatedPlayerList playerList;
@@ -334,14 +244,14 @@ public final class CraftServer implements Server {
     @Override
     public final boolean isOwnedByCurrentRegion(World world, io.papermc.paper.math.Position position) {
         return io.papermc.paper.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), position.blockX() >> 4, position.blockZ() >> 4
+                ((CraftWorld) world).getHandle(), position.blockX() >> 4, position.blockZ() >> 4
         );
     }
 
     @Override
     public final boolean isOwnedByCurrentRegion(World world, io.papermc.paper.math.Position position, int squareRadiusChunks) {
         return io.papermc.paper.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), position.blockX() >> 4, position.blockZ() >> 4, squareRadiusChunks
+                ((CraftWorld) world).getHandle(), position.blockX() >> 4, position.blockZ() >> 4, squareRadiusChunks
         );
     }
 
@@ -349,7 +259,7 @@ public final class CraftServer implements Server {
     public final boolean isOwnedByCurrentRegion(Location location) {
         World world = location.getWorld();
         return io.papermc.paper.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), location.getBlockX() >> 4, location.getBlockZ() >> 4
+                ((CraftWorld) world).getHandle(), location.getBlockX() >> 4, location.getBlockZ() >> 4
         );
     }
 
@@ -357,21 +267,21 @@ public final class CraftServer implements Server {
     public final boolean isOwnedByCurrentRegion(Location location, int squareRadiusChunks) {
         World world = location.getWorld();
         return io.papermc.paper.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), location.getBlockX() >> 4, location.getBlockZ() >> 4, squareRadiusChunks
+                ((CraftWorld) world).getHandle(), location.getBlockX() >> 4, location.getBlockZ() >> 4, squareRadiusChunks
         );
     }
 
     @Override
     public final boolean isOwnedByCurrentRegion(World world, int chunkX, int chunkZ) {
         return io.papermc.paper.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), chunkX, chunkZ
+                ((CraftWorld) world).getHandle(), chunkX, chunkZ
         );
     }
 
     @Override
     public final boolean isOwnedByCurrentRegion(World world, int chunkX, int chunkZ, int squareRadiusChunks) {
         return io.papermc.paper.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), chunkX, chunkZ, squareRadiusChunks
+                ((CraftWorld) world).getHandle(), chunkX, chunkZ, squareRadiusChunks
         );
     }
 
@@ -418,7 +328,8 @@ public final class CraftServer implements Server {
 
         this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
         this.configuration.options().copyDefaults(true);
-        this.configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
+        this.configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader()
+                .getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
         ConfigurationSection legacyAlias = null;
         if (!this.configuration.isString("aliases")) {
             legacyAlias = this.configuration.getConfigurationSection("aliases");
@@ -431,7 +342,8 @@ public final class CraftServer implements Server {
         this.commandsConfiguration = YamlConfiguration.loadConfiguration(this.getCommandsConfigFile());
         this.commandsConfiguration.options().copyDefaults(true);
         // Paper start - don't enforce icanhasbukkit default if alias block exists
-        final YamlConfiguration commandsDefaults = YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/commands.yml"), Charsets.UTF_8));
+        final YamlConfiguration commandsDefaults = YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader()
+                .getResourceAsStream("configurations/commands.yml"), Charsets.UTF_8));
         if (this.commandsConfiguration.contains("aliases")) commandsDefaults.set("aliases", null);
         this.commandsConfiguration.setDefaults(commandsDefaults);
         // Paper stop - dont enforce icanhasbukkit default if alias block exists
@@ -456,7 +368,8 @@ public final class CraftServer implements Server {
         }
 
         this.saveCommandsConfig();
-        this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
+        this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides")
+                .contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
         //this.pluginManager.useTimings(this.configuration.getBoolean("settings.plugin-profiling")); // Paper - we already moved this
         this.overrideSpawnLimits();
@@ -474,7 +387,8 @@ public final class CraftServer implements Server {
     }
 
     public boolean getCommandBlockOverride(String command) {
-        return this.overrideAllCommandBlockCommands || this.commandsConfiguration.getStringList("command-block-overrides").contains(command);
+        return this.overrideAllCommandBlockCommands || this.commandsConfiguration.getStringList("command-block-overrides")
+                .contains(command);
     }
 
     private File getConfigFile() {
@@ -497,7 +411,8 @@ public final class CraftServer implements Server {
         try {
             this.configuration.save(this.getConfigFile());
         } catch (IOException ex) {
-            Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + this.getConfigFile(), ex);
+            Logger.getLogger(CraftServer.class.getName())
+                    .log(Level.SEVERE, "Could not save " + this.getConfigFile(), ex);
         }
     }
 
@@ -505,7 +420,8 @@ public final class CraftServer implements Server {
         try {
             this.commandsConfiguration.save(this.getCommandsConfigFile());
         } catch (IOException ex) {
-            Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + this.getCommandsConfigFile(), ex);
+            Logger.getLogger(CraftServer.class.getName())
+                    .log(Level.SEVERE, "Could not save " + this.getCommandsConfigFile(), ex);
         }
     }
 
@@ -520,8 +436,7 @@ public final class CraftServer implements Server {
     }
 
     private List<File> extraPluginJars() {
-        @SuppressWarnings("unchecked")
-        final List<File> jars = (List<File>) this.console.options.valuesOf("add-plugin");
+        @SuppressWarnings("unchecked") final List<File> jars = (List<File>) this.console.options.valuesOf("add-plugin");
         final List<File> list = new ArrayList<>();
         for (final File file : jars) {
             if (!file.exists()) {
@@ -546,7 +461,8 @@ public final class CraftServer implements Server {
         if (type == PluginLoadOrder.STARTUP) {
             this.helpMap.clear();
             this.helpMap.initializeGeneralTopics();
-            if (io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins) loadCustomPermissions(); // Paper
+            if (io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins)
+                loadCustomPermissions(); // Paper
         }
 
         Plugin[] plugins = this.pluginManager.getPlugins();
@@ -576,7 +492,8 @@ public final class CraftServer implements Server {
             this.commandMap.registerServerAliases();
             DefaultPermissions.registerCorePermissions();
             CraftDefaultPermissions.registerCorePermissions();
-            if (!io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins) this.loadCustomPermissions(); // Paper
+            if (!io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins)
+                this.loadCustomPermissions(); // Paper
             this.helpMap.initializeCommands();
             this.syncCommands();
         }
@@ -593,7 +510,7 @@ public final class CraftServer implements Server {
         for (CommandNode<CommandSourceStack> cmd : dispatcher.getDispatcher().getRoot().getChildren()) {
             // Spigot start
             VanillaCommandWrapper wrapper = new VanillaCommandWrapper(dispatcher, cmd);
-            if (org.spigotmc.SpigotConfig.replaceCommands.contains( wrapper.getName() ) ) {
+            if (org.spigotmc.SpigotConfig.replaceCommands.contains(wrapper.getName())) {
                 if (first) {
                     this.commandMap.register("minecraft", wrapper);
                 }
@@ -646,15 +563,19 @@ public final class CraftServer implements Server {
                 if (this.paperPluginManager.getPermission(perm.getName()) == null) {
                     permsToLoad.add(perm);
                 } else {
-                    this.getLogger().log(Level.WARNING, "Plugin " + plugin.getDescription().getFullName() + " tried to register permission '" + perm.getName() + "' but it's already registered");
-                // Paper end
+                    this.getLogger()
+                            .log(Level.WARNING, "Plugin " + plugin.getDescription()
+                                    .getFullName() + " tried to register permission '" + perm.getName() + "' but it's already registered");
+                    // Paper end
                 }
             }
             this.paperPluginManager.addPermissions(permsToLoad); // Paper
 
             this.pluginManager.enablePlugin(plugin);
         } catch (Throwable ex) {
-            Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, ex.getMessage() + " loading " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
+            Logger.getLogger(CraftServer.class.getName())
+                    .log(Level.SEVERE, ex.getMessage() + " loading " + plugin.getDescription()
+                            .getFullName() + " (Is it up to date?)", ex);
         }
     }
 
@@ -755,7 +676,8 @@ public final class CraftServer implements Server {
                 matchedPlayers.add(iterPlayer);
                 break;
             }
-            if (iterPlayerName.toLowerCase(java.util.Locale.ENGLISH).contains(partialName.toLowerCase(java.util.Locale.ENGLISH))) {
+            if (iterPlayerName.toLowerCase(java.util.Locale.ENGLISH)
+                    .contains(partialName.toLowerCase(java.util.Locale.ENGLISH))) {
                 // Partial match
                 matchedPlayers.add(iterPlayer);
             }
@@ -853,12 +775,20 @@ public final class CraftServer implements Server {
 
     @Override
     public String getResourcePackHash() {
-        return this.getServer().getServerResourcePack().map(MinecraftServer.ServerResourcePackInfo::hash).orElse("").toUpperCase(Locale.ROOT);
+        return this.getServer()
+                .getServerResourcePack()
+                .map(MinecraftServer.ServerResourcePackInfo::hash)
+                .orElse("")
+                .toUpperCase(Locale.ROOT);
     }
 
     @Override
     public String getResourcePackPrompt() {
-        return this.getServer().getServerResourcePack().map(MinecraftServer.ServerResourcePackInfo::prompt).map(CraftChatMessage::fromComponent).orElse("");
+        return this.getServer()
+                .getServerResourcePack()
+                .map(MinecraftServer.ServerResourcePackInfo::prompt)
+                .map(CraftChatMessage::fromComponent)
+                .orElse("");
     }
 
     @Override
@@ -984,7 +914,8 @@ public final class CraftServer implements Server {
             this.playerCommandState = true;
             return this.dispatchCommand(sender, serverCommand.msg);
         } catch (Exception ex) {
-            this.getLogger().log(Level.WARNING, "Unexpected exception while parsing console command \"" + serverCommand.msg + '"', ex);
+            this.getLogger()
+                    .log(Level.WARNING, "Unexpected exception while parsing console command \"" + serverCommand.msg + '"', ex);
             return false;
         } finally {
             this.playerCommandState = false;
@@ -1002,7 +933,8 @@ public final class CraftServer implements Server {
             final CommandSender fSender = sender;
             final String fCommandLine = commandLine;
             Bukkit.getLogger().log(Level.SEVERE, "Command Dispatched Async: " + commandLine);
-            Bukkit.getLogger().log(Level.SEVERE, "Please notify author of plugin causing this execution to fix this bug! see: http://bit.ly/1oSiM6C", new Throwable());
+            Bukkit.getLogger()
+                    .log(Level.SEVERE, "Please notify author of plugin causing this execution to fix this bug! see: http://bit.ly/1oSiM6C", new Throwable());
             org.bukkit.craftbukkit.util.Waitable<Boolean> wait = new org.bukkit.craftbukkit.util.Waitable<Boolean>() {
                 @Override
                 protected Boolean evaluate() {
@@ -1013,7 +945,8 @@ public final class CraftServer implements Server {
             try {
                 return wait.get();
             } catch (InterruptedException e) {
-                Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+                Thread.currentThread()
+                        .interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
             } catch (Exception e) {
                 throw new RuntimeException("Exception processing dispatch command", e.getCause());
             }
@@ -1026,9 +959,9 @@ public final class CraftServer implements Server {
         // KissenPaper start
         KissenLocalizationImplementation localizationImplementation = KissenCore.getInstance()
                 .getImplementation(KissenLocalizationImplementation.class);
-        Component unknownCommandMessageComponent = localizationImplementation.translate("messages.unknown-command", localizationImplementation.getDefaultLocale());
+        Component unknownCommandMessageComponent = localizationImplementation.translate("spigot.unknown-command", localizationImplementation.getDefaultLocale());
         if (sender instanceof Player player) {
-            unknownCommandMessageComponent = localizationImplementation.translate("messages.unknown-command", player.getCurrentLocale());
+            unknownCommandMessageComponent = localizationImplementation.translate("spigot.unknown-command", player.getCurrentLocale());
         }
         String unknownCommandMessage = KissenComponentSerializer.getInstance()
                 .getLegacySerializer()
@@ -1037,7 +970,8 @@ public final class CraftServer implements Server {
         // Spigot start
         if (!/* KissenPaper */ unknownCommandMessage.isEmpty() /*org.spigotmc.SpigotConfig.unknownCommandMessage.isEmpty()*/) {
             // Paper start
-            org.bukkit.event.command.UnknownCommandEvent event = new org.bukkit.event.command.UnknownCommandEvent(sender, commandLine, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize( /* KissenPaper */ unknownCommandMessage /* org.spigotmc.SpigotConfig.unknownCommandMessage */));
+            org.bukkit.event.command.UnknownCommandEvent event = new org.bukkit.event.command.UnknownCommandEvent(sender, commandLine, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                    .deserialize( /* KissenPaper */ unknownCommandMessage /* org.spigotmc.SpigotConfig.unknownCommandMessage */));
             Bukkit.getServer().getPluginManager().callEvent(event);
             if (event.message() != null) {
                 sender.sendMessage(event.message());
@@ -1113,7 +1047,8 @@ public final class CraftServer implements Server {
         this.reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
-        this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
+        this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides")
+                .contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
         int pollCount = 0;
@@ -1130,12 +1065,13 @@ public final class CraftServer implements Server {
         for (BukkitWorker worker : overdueWorkers) {
             Plugin plugin = worker.getOwner();
             this.getLogger().log(Level.SEVERE, String.format(
-                "Nag author(s): '%s' of '%s' about the following: %s",
-                plugin.getDescription().getAuthors(),
-                plugin.getDescription().getFullName(),
-                "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
+                    "Nag author(s): '%s' of '%s' about the following: %s",
+                    plugin.getDescription().getAuthors(),
+                    plugin.getDescription().getFullName(),
+                    "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
             ));
-            if (console.isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread(worker.getThread(), "still running"); // Paper
+            if (console.isDebugging())
+                io.papermc.paper.util.TraceUtil.dumpTraceForThread(worker.getThread(), "still running"); // Paper
         }
         io.papermc.paper.plugin.PluginInitializerManager.reload(this.console); // Paper
         this.loadPlugins();
@@ -1150,7 +1086,7 @@ public final class CraftServer implements Server {
         int pollCount = 0;
 
         // Wait for at most 5 seconds for plugins to close their threads
-        while (pollCount < 10*5 && getScheduler().getActiveWorkers().size() > 0) {
+        while (pollCount < 10 * 5 && getScheduler().getActiveWorkers().size() > 0) {
             try {
                 Thread.sleep(100);
             } catch (InterruptedException e) {}
@@ -1161,10 +1097,10 @@ public final class CraftServer implements Server {
         for (BukkitWorker worker : overdueWorkers) {
             Plugin plugin = worker.getOwner();
             getLogger().log(Level.SEVERE, String.format(
-                "Nag author(s): '%s' of '%s' about the following: %s",
-                plugin.getPluginMeta().getAuthors(),
-                plugin.getPluginMeta().getDisplayName(),
-                "This plugin is not properly shutting down its async tasks when it is being shut down. This task may throw errors during the final shutdown logs and might not complete before process dies."
+                    "Nag author(s): '%s' of '%s' about the following: %s",
+                    plugin.getPluginMeta().getAuthors(),
+                    plugin.getPluginMeta().getDisplayName(),
+                    "This plugin is not properly shutting down its async tasks when it is being shut down. This task may throw errors during the final shutdown logs and might not complete before process dies."
             ));
         }
     }
@@ -1199,7 +1135,7 @@ public final class CraftServer implements Server {
         }
     }
 
-    @SuppressWarnings({ "unchecked", "finally" })
+    @SuppressWarnings({"unchecked", "finally"})
     private void loadCustomPermissions() {
         File file = new File(this.configuration.getString("settings.permissions-file"));
         FileInputStream stream;
@@ -1219,7 +1155,8 @@ public final class CraftServer implements Server {
         try {
             perms = (Map<String, Map<String, Object>>) this.yaml.load(stream);
         } catch (MarkedYAMLException ex) {
-            this.getLogger().log(Level.WARNING, "Server permissions file " + file + " is not valid YAML: " + ex.toString());
+            this.getLogger()
+                    .log(Level.WARNING, "Server permissions file " + file + " is not valid YAML: " + ex.toString());
             return;
         } catch (Throwable ex) {
             this.getLogger().log(Level.WARNING, "Server permissions file " + file + " is not valid YAML.", ex);
@@ -1269,7 +1206,9 @@ public final class CraftServer implements Server {
 
     @Override
     public World createWorld(WorldCreator creator) {
-        Preconditions.checkState(this.console.getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
+        Preconditions.checkState(this.console.getAllLevels()
+                .iterator()
+                .hasNext(), "Cannot create additional worlds on STARTUP");
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot create a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         Preconditions.checkArgument(creator != null, "WorldCreator cannot be null");
 
@@ -1318,7 +1257,8 @@ public final class CraftServer implements Server {
 
         LevelStorageSource.LevelStorageAccess worldSession;
         try {
-            worldSession = LevelStorageSource.createDefault(this.getWorldContainer().toPath()).validateAndCreateAccess(name, actualDimension);
+            worldSession = LevelStorageSource.createDefault(this.getWorldContainer().toPath())
+                    .validateAndCreateAccess(name, actualDimension);
         } catch (IOException | ContentValidationException ex) {
             throw new RuntimeException(ex);
         }
@@ -1327,9 +1267,11 @@ public final class CraftServer implements Server {
 
         PrimaryLevelData worlddata;
         WorldLoader.DataLoadContext worldloader_a = console.worldLoader;
-        net.minecraft.core.Registry<LevelStem> iregistry = worldloader_a.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
+        net.minecraft.core.Registry<LevelStem> iregistry = worldloader_a.datapackDimensions()
+                .registryOrThrow(Registries.LEVEL_STEM);
         DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) worldloader_a.datapackWorldgen());
-        Pair<WorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
+        Pair<WorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen()
+                .allRegistriesLifecycle());
 
         if (pair != null) {
             worlddata = (PrimaryLevelData) pair.getFirst();
@@ -1339,20 +1281,24 @@ public final class CraftServer implements Server {
             WorldOptions worldoptions = new WorldOptions(creator.seed(), creator.generateStructures(), false);
             WorldDimensions worlddimensions;
 
-            DedicatedServerProperties.WorldDimensionData properties = new DedicatedServerProperties.WorldDimensionData(GsonHelper.parse((creator.generatorSettings().isEmpty()) ? "{}" : creator.generatorSettings()), creator.type().name().toLowerCase(Locale.ROOT));
+            DedicatedServerProperties.WorldDimensionData properties = new DedicatedServerProperties.WorldDimensionData(GsonHelper.parse((creator.generatorSettings()
+                    .isEmpty()) ? "{}" : creator.generatorSettings()), creator.type().name().toLowerCase(Locale.ROOT));
 
-            worldsettings = new LevelSettings(name, GameType.byId(this.getDefaultGameMode().getValue()), hardcore, Difficulty.EASY, false, new GameRules(), worldloader_a.dataConfiguration());
+            worldsettings = new LevelSettings(name, GameType.byId(this.getDefaultGameMode()
+                    .getValue()), hardcore, Difficulty.EASY, false, new GameRules(), worldloader_a.dataConfiguration());
             worlddimensions = properties.create(worldloader_a.datapackWorldgen());
 
             WorldDimensions.Complete worlddimensions_b = worlddimensions.bake(iregistry);
-            Lifecycle lifecycle = worlddimensions_b.lifecycle().add(worldloader_a.datapackWorldgen().allRegistriesLifecycle());
+            Lifecycle lifecycle = worlddimensions_b.lifecycle()
+                    .add(worldloader_a.datapackWorldgen().allRegistriesLifecycle());
 
             worlddata = new PrimaryLevelData(worldsettings, worldoptions, worlddimensions_b.specialWorldProperty(), lifecycle);
             iregistry = worlddimensions_b.dimensions();
         }
         worlddata.customDimensions = iregistry;
         worlddata.checkName(name);
-        worlddata.setModdedInfo(this.console.getServerModName(), this.console.getModdedStatus().shouldReportAsModified());
+        worlddata.setModdedInfo(this.console.getServerModName(), this.console.getModdedStatus()
+                .shouldReportAsModified());
 
         // Paper - move down
 
@@ -1360,7 +1306,8 @@ public final class CraftServer implements Server {
         List<CustomSpawner> list = ImmutableList.of(new PhantomSpawner(), new PatrolSpawner(), new CatSpawner(), new VillageSiege(), new WanderingTraderSpawner(worlddata));
         LevelStem worlddimension = iregistry.get(actualDimension);
 
-        WorldInfo worldInfo = new CraftWorldInfo(worlddata, worldSession, creator.environment(), worlddimension.type().value(), worlddimension.generator(), this.getHandle().getServer().registryAccess()); // Paper
+        WorldInfo worldInfo = new CraftWorldInfo(worlddata, worldSession, creator.environment(), worlddimension.type()
+                .value(), worlddimension.generator(), this.getHandle().getServer().registryAccess()); // Paper
         if (biomeProvider == null && generator != null) {
             biomeProvider = generator.getDefaultBiomeProvider(worldInfo);
         }
@@ -1368,7 +1315,8 @@ public final class CraftServer implements Server {
         // Paper start - fix and optimise world upgrading
         if (console.options.has("forceUpgrade")) {
             net.minecraft.server.Main.convertWorldButItWorks(
-                actualDimension,  worldSession, DataFixers.getDataFixer(), worlddimension.generator().getTypeNameForDataFixer(), console.options.has("eraseCache")
+                    actualDimension, worldSession, DataFixers.getDataFixer(), worlddimension.generator()
+                            .getTypeNameForDataFixer(), console.options.has("eraseCache")
             );
         }
         // Paper end - fix and optimise world upgrading
@@ -1379,11 +1327,16 @@ public final class CraftServer implements Server {
         } else if (name.equals(levelName + "_the_end")) {
             worldKey = net.minecraft.world.level.Level.END;
         } else {
-            worldKey = ResourceKey.create(Registries.DIMENSION, new net.minecraft.resources.ResourceLocation(creator.key().getNamespace().toLowerCase(java.util.Locale.ENGLISH), creator.key().getKey().toLowerCase(java.util.Locale.ENGLISH))); // Paper
+            worldKey = ResourceKey.create(Registries.DIMENSION, new net.minecraft.resources.ResourceLocation(creator.key()
+                    .getNamespace()
+                    .toLowerCase(java.util.Locale.ENGLISH), creator.key()
+                    .getKey()
+                    .toLowerCase(java.util.Locale.ENGLISH))); // Paper
         }
 
         ServerLevel internal = (ServerLevel) new ServerLevel(this.console, console.executor, worldSession, worlddata, worldKey, worlddimension, this.getServer().progressListenerFactory.create(11),
-                worlddata.isDebugWorld(), j, creator.environment() == Environment.NORMAL ? list : ImmutableList.of(), true, this.console.overworld().getRandomSequences(), creator.environment(), generator, biomeProvider);
+                worlddata.isDebugWorld(), j, creator.environment() == Environment.NORMAL ? list : ImmutableList.of(), true, this.console.overworld()
+                .getRandomSequences(), creator.environment(), generator, biomeProvider);
 
         if (!(this.worlds.containsKey(name.toLowerCase(java.util.Locale.ENGLISH)))) {
             return null;
@@ -1395,7 +1348,8 @@ public final class CraftServer implements Server {
         internal.setSpawnSettings(true, true);
         // Paper - move up
 
-        internal.keepSpawnInMemory = creator.keepSpawnLoaded().toBooleanOrElse(internal.getWorld().getKeepSpawnInMemory()); // Paper
+        internal.keepSpawnInMemory = creator.keepSpawnLoaded()
+                .toBooleanOrElse(internal.getWorld().getKeepSpawnInMemory()); // Paper
         this.getServer().prepareLevels(internal.getChunkSource().chunkMap.progressListener, internal);
         //internal.entityManager.tick(); // SPIGOT-6526: Load pending entities so they are available to the API // Paper - rewrite chunk system
 
@@ -1596,7 +1550,11 @@ public final class CraftServer implements Server {
     public Recipe getRecipe(NamespacedKey recipeKey) {
         Preconditions.checkArgument(recipeKey != null, "NamespacedKey recipeKey cannot be null");
 
-        return this.getServer().getRecipeManager().byKey(CraftNamespacedKey.toMinecraft(recipeKey)).map(net.minecraft.world.item.crafting.Recipe::toBukkitRecipe).orElse(null);
+        return this.getServer()
+                .getRecipeManager()
+                .byKey(CraftNamespacedKey.toMinecraft(recipeKey))
+                .map(net.minecraft.world.item.crafting.Recipe::toBukkitRecipe)
+                .orElse(null);
     }
 
     @Override
@@ -1620,7 +1578,9 @@ public final class CraftServer implements Server {
         };
         CraftingContainer inventoryCrafting = new TransientCraftingContainer(container, 3, 3);
 
-        return this.getNMSRecipe(craftingMatrix, inventoryCrafting, (CraftWorld) world).map(net.minecraft.world.item.crafting.Recipe::toBukkitRecipe).orElse(null);
+        return this.getNMSRecipe(craftingMatrix, inventoryCrafting, (CraftWorld) world)
+                .map(net.minecraft.world.item.crafting.Recipe::toBukkitRecipe)
+                .orElse(null);
     }
 
     @Override
@@ -1669,7 +1629,9 @@ public final class CraftServer implements Server {
             inventoryCrafting.setItem(i, CraftItemStack.asNMSCopy(craftingMatrix[i]));
         }
 
-        return this.getServer().getRecipeManager().getRecipeFor(RecipeType.CRAFTING, inventoryCrafting, world.getHandle());
+        return this.getServer()
+                .getRecipeManager()
+                .getRecipeFor(RecipeType.CRAFTING, inventoryCrafting, world.getHandle());
     }
 
     @Override
@@ -1743,13 +1705,21 @@ public final class CraftServer implements Server {
     @Override
     public net.kyori.adventure.text.Component shutdownMessage() {
         String msg = getShutdownMessage();
-        return msg != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(msg) : null;
+        return msg != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .deserialize(msg) : null;
     }
+
     // Paper end
     @Override
     @Deprecated // Paper
     public String getShutdownMessage() {
-        return this.configuration.getString("settings.shutdown-message");
+        // KissenPaper start
+        //return this.configuration.getString("settings.shutdown-message");
+        KissenLocalizationImplementation kissenLocalizationImplementation = Bukkit.getKissen()
+                .getImplementation(KissenLocalizationImplementation.class);
+        return KissenComponentSerializer.getInstance()
+                .getLegacySerializer()
+                .serialize(kissenLocalizationImplementation.translate("bukkit.shutdown-message", kissenLocalizationImplementation.getDefaultLocale()));
     }
 
     @Override
@@ -1809,17 +1779,24 @@ public final class CraftServer implements Server {
                     Plugin plugin = this.pluginManager.getPlugin(split[0]);
 
                     if (plugin == null) {
-                        this.getLogger().severe("Could not set generator for default world '" + world + "': Plugin '" + split[0] + "' does not exist");
+                        this.getLogger()
+                                .severe("Could not set generator for default world '" + world + "': Plugin '" + split[0] + "' does not exist");
                     } else if (!plugin.isEnabled()) {
-                        this.getLogger().severe("Could not set generator for default world '" + world + "': Plugin '" + plugin.getDescription().getFullName() + "' is not enabled yet (is it load:STARTUP?)");
+                        this.getLogger()
+                                .severe("Could not set generator for default world '" + world + "': Plugin '" + plugin.getDescription()
+                                        .getFullName() + "' is not enabled yet (is it load:STARTUP?)");
                     } else {
                         try {
                             result = plugin.getDefaultWorldGenerator(world, id);
                             if (result == null) {
-                                this.getLogger().severe("Could not set generator for default world '" + world + "': Plugin '" + plugin.getDescription().getFullName() + "' lacks a default world generator");
+                                this.getLogger()
+                                        .severe("Could not set generator for default world '" + world + "': Plugin '" + plugin.getDescription()
+                                                .getFullName() + "' lacks a default world generator");
                             }
                         } catch (Throwable t) {
-                            plugin.getLogger().log(Level.SEVERE, "Could not set generator for default world '" + world + "': Plugin '" + plugin.getDescription().getFullName(), t);
+                            plugin.getLogger()
+                                    .log(Level.SEVERE, "Could not set generator for default world '" + world + "': Plugin '" + plugin.getDescription()
+                                            .getFullName(), t);
                         }
                     }
                 }
@@ -1845,17 +1822,24 @@ public final class CraftServer implements Server {
                     Plugin plugin = this.pluginManager.getPlugin(split[0]);
 
                     if (plugin == null) {
-                        this.getLogger().severe("Could not set biome provider for default world '" + world + "': Plugin '" + split[0] + "' does not exist");
+                        this.getLogger()
+                                .severe("Could not set biome provider for default world '" + world + "': Plugin '" + split[0] + "' does not exist");
                     } else if (!plugin.isEnabled()) {
-                        this.getLogger().severe("Could not set biome provider for default world '" + world + "': Plugin '" + plugin.getDescription().getFullName() + "' is not enabled yet (is it load:STARTUP?)");
+                        this.getLogger()
+                                .severe("Could not set biome provider for default world '" + world + "': Plugin '" + plugin.getDescription()
+                                        .getFullName() + "' is not enabled yet (is it load:STARTUP?)");
                     } else {
                         try {
                             result = plugin.getDefaultBiomeProvider(world, id);
                             if (result == null) {
-                                this.getLogger().severe("Could not set biome provider for default world '" + world + "': Plugin '" + plugin.getDescription().getFullName() + "' lacks a default world biome provider");
+                                this.getLogger()
+                                        .severe("Could not set biome provider for default world '" + world + "': Plugin '" + plugin.getDescription()
+                                                .getFullName() + "' lacks a default world biome provider");
                             }
                         } catch (Throwable t) {
-                            plugin.getLogger().log(Level.SEVERE, "Could not set biome provider for default world '" + world + "': Plugin '" + plugin.getDescription().getFullName(), t);
+                            plugin.getLogger()
+                                    .log(Level.SEVERE, "Could not set biome provider for default world '" + world + "': Plugin '" + plugin.getDescription()
+                                            .getFullName(), t);
                         }
                     }
                 }
@@ -1868,7 +1852,8 @@ public final class CraftServer implements Server {
     @Override
     @Deprecated
     public CraftMapView getMap(int id) {
-        MapItemSavedData worldmap = this.console.getLevel(net.minecraft.world.level.Level.OVERWORLD).getMapData("map_" + id);
+        MapItemSavedData worldmap = this.console.getLevel(net.minecraft.world.level.Level.OVERWORLD)
+                .getMapData("map_" + id);
         if (worldmap == null) {
             return null;
         }
@@ -1881,7 +1866,8 @@ public final class CraftServer implements Server {
 
         net.minecraft.world.level.Level minecraftWorld = ((CraftWorld) world).getHandle();
         // creates a new map at world spawn with the scale of 3, with out tracking position and unlimited tracking
-        int newId = MapItem.createNewSavedData(minecraftWorld, minecraftWorld.getLevelData().getXSpawn(), minecraftWorld.getLevelData().getZSpawn(), 3, false, false, minecraftWorld.dimension());
+        int newId = MapItem.createNewSavedData(minecraftWorld, minecraftWorld.getLevelData()
+                .getXSpawn(), minecraftWorld.getLevelData().getZSpawn(), 3, false, false, minecraftWorld.dimension());
         return minecraftWorld.getMapData(MapItem.makeKey(newId)).mapView;
     }
 
@@ -1904,7 +1890,9 @@ public final class CraftServer implements Server {
         net.minecraft.world.item.ItemStack stack = MapItem.create(worldServer, structurePosition.getX(), structurePosition.getZ(), MapView.Scale.NORMAL.getValue(), true, true);
         MapItem.renderBiomePreviewMap(worldServer, stack);
         // "+" map ID taken from EntityVillager
-        MapItem.getSavedData(stack, worldServer).addTargetDecoration(stack, structurePosition, "+", MapDecoration.Type.byIcon(structureType.getMapIcon().getValue()));
+        MapItem.getSavedData(stack, worldServer)
+                .addTargetDecoration(stack, structurePosition, "+", MapDecoration.Type.byIcon(structureType.getMapIcon()
+                        .getValue()));
 
         return CraftItemStack.asBukkitCopy(stack);
     }
@@ -1918,7 +1906,8 @@ public final class CraftServer implements Server {
     @Deprecated // Paper
     public int broadcast(String message, String permission) {
         // Paper start - Adventure
-        return this.broadcast(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message), permission);
+        return this.broadcast(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .deserialize(message), permission);
     }
 
     @Override
@@ -1982,7 +1971,7 @@ public final class CraftServer implements Server {
             // Spigot Start
             GameProfile profile = null;
             // Only fetch an online UUID in online mode
-            if ( this.getOnlineMode() || io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode() ) // Paper - Handle via setting
+            if (this.getOnlineMode() || io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode()) // Paper - Handle via setting
             {
                 profile = this.console.getProfileCache().get(name).orElse(null);
             }
@@ -2065,7 +2054,11 @@ public final class CraftServer implements Server {
     @Override
     @SuppressWarnings("unchecked")
     public Set<String> getIPBans() {
-        return this.playerList.getIpBans().getEntries().stream().map(IpBanListEntry::getUser).collect(Collectors.toSet());
+        return this.playerList.getIpBans()
+                .getEntries()
+                .stream()
+                .map(IpBanListEntry::getUser)
+                .collect(Collectors.toSet());
     }
 
     @Override
@@ -2162,7 +2155,8 @@ public final class CraftServer implements Server {
 
     @Override
     public GameMode getDefaultGameMode() {
-        return GameMode.getByValue(this.console.getLevel(net.minecraft.world.level.Level.OVERWORLD).serverLevelData.getGameType().getId());
+        return GameMode.getByValue(this.console.getLevel(net.minecraft.world.level.Level.OVERWORLD).serverLevelData.getGameType()
+                .getId());
     }
 
     @Override
@@ -2200,7 +2194,9 @@ public final class CraftServer implements Server {
 
     @Override
     public File getWorldContainer() {
-        return this.getServer().storageSource.getDimensionPath(net.minecraft.world.level.Level.OVERWORLD).getParent().toFile();
+        return this.getServer().storageSource.getDimensionPath(net.minecraft.world.level.Level.OVERWORLD)
+                .getParent()
+                .toFile();
     }
 
     @Override
@@ -2295,6 +2291,7 @@ public final class CraftServer implements Server {
     public Merchant createMerchant(net.kyori.adventure.text.Component title) {
         return new org.bukkit.craftbukkit.inventory.CraftMerchantCustom(title == null ? InventoryType.MERCHANT.defaultTitle() : title);
     }
+
     // Paper end
     @Override
     @Deprecated // Paper
@@ -2360,6 +2357,7 @@ public final class CraftServer implements Server {
         Preconditions.checkArgument(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory." + spawnCategory + " does not have a spawn limit.");
         return this.getSpawnLimitUnsafe(spawnCategory);
     }
+
     public int getSpawnLimitUnsafe(final SpawnCategory spawnCategory) {
         // Paper end
         return this.spawnCategoryLimit.getOrDefault(spawnCategory, -1);
@@ -2375,6 +2373,7 @@ public final class CraftServer implements Server {
     public net.kyori.adventure.text.Component motd() {
         return this.console.motd();
     }
+
     @Override
     public void motd(final net.kyori.adventure.text.Component motd) {
         this.console.motd(motd);
@@ -2417,8 +2416,7 @@ public final class CraftServer implements Server {
 
     public List<String> tabCompleteCommand(Player player, String message, ServerLevel world, Vec3 pos) {
         // Spigot Start
-        if ( (org.spigotmc.SpigotConfig.tabComplete < 0 || message.length() <= org.spigotmc.SpigotConfig.tabComplete) && !message.contains( " " ) )
-        {
+        if ((org.spigotmc.SpigotConfig.tabComplete < 0 || message.length() <= org.spigotmc.SpigotConfig.tabComplete) && !message.contains(" ")) {
             return ImmutableList.of();
         }
         // Spigot End
@@ -2432,11 +2430,13 @@ public final class CraftServer implements Server {
             if (pos == null) {
                 completions = this.getCommandMap().tabComplete(player, message);
             } else {
-                completions = this.getCommandMap().tabComplete(player, message, CraftLocation.toBukkit(pos, world.getWorld()));
+                completions = this.getCommandMap()
+                        .tabComplete(player, message, CraftLocation.toBukkit(pos, world.getWorld()));
             }
         } catch (CommandException ex) {
             player.sendMessage(ChatColor.RED + "An internal error occurred while attempting to tab-complete this command");
-            this.getLogger().log(Level.SEVERE, "Exception when " + player.getName() + " attempted to tab complete " + message, ex);
+            this.getLogger()
+                    .log(Level.SEVERE, "Exception when " + player.getName() + " attempted to tab complete " + message, ex);
         }
 
         return completions == null ? ImmutableList.<String>of() : completions;
@@ -2485,7 +2485,8 @@ public final class CraftServer implements Server {
             return;
         }
         this.printSaveWarning = true;
-        this.getLogger().log(Level.WARNING, "A manual (plugin-induced) save has been detected while server is configured to auto-save. This may affect performance.", this.warningState == WarningState.ON ? new Throwable() : null);
+        this.getLogger()
+                .log(Level.WARNING, "A manual (plugin-induced) save has been detected while server is configured to auto-save. This may affect performance.", this.warningState == WarningState.ON ? new Throwable() : null);
     }
 
     @Override
@@ -2534,21 +2535,22 @@ public final class CraftServer implements Server {
     public ChunkGenerator.ChunkData createChunkData(World world) {
         Preconditions.checkArgument(world != null, "World cannot be null");
         ServerLevel handle = ((CraftWorld) world).getHandle();
-        return new OldCraftChunkData(world.getMinHeight(), world.getMaxHeight(), handle.registryAccess().registryOrThrow(Registries.BIOME), world); // Paper - Anti-Xray - Add parameters
+        return new OldCraftChunkData(world.getMinHeight(), world.getMaxHeight(), handle.registryAccess()
+                .registryOrThrow(Registries.BIOME), world); // Paper - Anti-Xray - Add parameters
     }
 
     // Paper start
     private static final List<net.minecraft.world.level.chunk.ChunkStatus> VANILLA_GEN_STATUSES = List.of(
-        net.minecraft.world.level.chunk.ChunkStatus.EMPTY,
-        net.minecraft.world.level.chunk.ChunkStatus.STRUCTURE_STARTS,
-        net.minecraft.world.level.chunk.ChunkStatus.STRUCTURE_REFERENCES,
-        net.minecraft.world.level.chunk.ChunkStatus.BIOMES,
-        net.minecraft.world.level.chunk.ChunkStatus.NOISE,
-        net.minecraft.world.level.chunk.ChunkStatus.SURFACE,
-        net.minecraft.world.level.chunk.ChunkStatus.CARVERS,
-        net.minecraft.world.level.chunk.ChunkStatus.FEATURES,
-        net.minecraft.world.level.chunk.ChunkStatus.INITIALIZE_LIGHT,
-        net.minecraft.world.level.chunk.ChunkStatus.LIGHT
+            net.minecraft.world.level.chunk.ChunkStatus.EMPTY,
+            net.minecraft.world.level.chunk.ChunkStatus.STRUCTURE_STARTS,
+            net.minecraft.world.level.chunk.ChunkStatus.STRUCTURE_REFERENCES,
+            net.minecraft.world.level.chunk.ChunkStatus.BIOMES,
+            net.minecraft.world.level.chunk.ChunkStatus.NOISE,
+            net.minecraft.world.level.chunk.ChunkStatus.SURFACE,
+            net.minecraft.world.level.chunk.ChunkStatus.CARVERS,
+            net.minecraft.world.level.chunk.ChunkStatus.FEATURES,
+            net.minecraft.world.level.chunk.ChunkStatus.INITIALIZE_LIGHT,
+            net.minecraft.world.level.chunk.ChunkStatus.LIGHT
     );
 
     @Override
@@ -2556,13 +2558,15 @@ public final class CraftServer implements Server {
     public ChunkGenerator.ChunkData createVanillaChunkData(World world, int x, int z) {
         // do bunch of vanilla shit
         final net.minecraft.server.level.ServerLevel serverLevel = ((CraftWorld) world).getHandle();
-        final net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> biomeRegistry = serverLevel.getServer().registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.BIOME);
+        final net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> biomeRegistry = serverLevel.getServer()
+                .registryAccess()
+                .registryOrThrow(net.minecraft.core.registries.Registries.BIOME);
         final net.minecraft.world.level.chunk.ProtoChunk protoChunk = new net.minecraft.world.level.chunk.ProtoChunk(
-            new net.minecraft.world.level.ChunkPos(x, z),
-            net.minecraft.world.level.chunk.UpgradeData.EMPTY,
-            serverLevel,
-            biomeRegistry,
-            null
+                new net.minecraft.world.level.ChunkPos(x, z),
+                net.minecraft.world.level.chunk.UpgradeData.EMPTY,
+                serverLevel,
+                biomeRegistry,
+                null
         );
 
         final net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator;
@@ -2574,8 +2578,8 @@ public final class CraftServer implements Server {
 
         final net.minecraft.world.level.ChunkPos chunkPos = new net.minecraft.world.level.ChunkPos(x, z);
         final net.minecraft.util.thread.ProcessorMailbox<Runnable> mailbox = net.minecraft.util.thread.ProcessorMailbox.create(
-            net.minecraft.Util.backgroundExecutor(),
-            "CraftServer#createVanillaChunkData(worldName='" + world.getName() + "', x='" + x + "', z='" + z + "')"
+                net.minecraft.Util.backgroundExecutor(),
+                "CraftServer#createVanillaChunkData(worldName='" + world.getName() + "', x='" + x + "', z='" + z + "')"
         );
         for (final net.minecraft.world.level.chunk.ChunkStatus chunkStatus : VANILLA_GEN_STATUSES) {
             final List<net.minecraft.world.level.chunk.ChunkAccess> chunks = Lists.newArrayList();
@@ -2586,7 +2590,9 @@ public final class CraftServer implements Server {
                     if (xx == chunkPos.x && zz == chunkPos.z) {
                         chunks.add(protoChunk);
                     } else {
-                        final net.minecraft.core.Holder<net.minecraft.world.level.biome.Biome> biomeHolder = serverLevel.registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.BIOME).getHolderOrThrow(net.minecraft.world.level.biome.Biomes.PLAINS);
+                        final net.minecraft.core.Holder<net.minecraft.world.level.biome.Biome> biomeHolder = serverLevel.registryAccess()
+                                .registryOrThrow(net.minecraft.core.registries.Registries.BIOME)
+                                .getHolderOrThrow(net.minecraft.world.level.biome.Biomes.PLAINS);
                         final net.minecraft.world.level.chunk.ChunkAccess chunk = new net.minecraft.world.level.chunk.EmptyLevelChunk(serverLevel, new net.minecraft.world.level.ChunkPos(xx, zz), biomeHolder);
                         chunks.add(chunk);
                     }
@@ -2594,18 +2600,19 @@ public final class CraftServer implements Server {
             }
 
             chunkStatus.generate(
-                mailbox::tell,
-                serverLevel,
-                chunkGenerator,
-                serverLevel.getStructureManager(),
-                serverLevel.chunkSource.getLightEngine(),
-                chunk -> {
-                    throw new UnsupportedOperationException("Not creating full chunks here");
-                },
-                chunks
+                    mailbox::tell,
+                    serverLevel,
+                    chunkGenerator,
+                    serverLevel.getStructureManager(),
+                    serverLevel.chunkSource.getLightEngine(),
+                    chunk -> {
+                        throw new UnsupportedOperationException("Not creating full chunks here");
+                    },
+                    chunks
             ).thenAccept(either -> {
                 if (chunkStatus == net.minecraft.world.level.chunk.ChunkStatus.NOISE) {
-                    either.left().ifPresent(chunk -> net.minecraft.world.level.levelgen.Heightmap.primeHeightmaps(chunk, net.minecraft.world.level.chunk.ChunkStatus.POST_FEATURES));
+                    either.left()
+                            .ifPresent(chunk -> net.minecraft.world.level.levelgen.Heightmap.primeHeightmaps(chunk, net.minecraft.world.level.chunk.ChunkStatus.POST_FEATURES));
                 }
             }).join();
         }
@@ -2630,7 +2637,9 @@ public final class CraftServer implements Server {
         Preconditions.checkArgument(barColor != null, "BarColor key cannot be null");
         Preconditions.checkArgument(barStyle != null, "BarStyle key cannot be null");
 
-        CustomBossEvent bossBattleCustom = this.getServer().getCustomBossEvents().create(CraftNamespacedKey.toMinecraft(key), CraftChatMessage.fromString(title, true)[0]);
+        CustomBossEvent bossBattleCustom = this.getServer()
+                .getCustomBossEvents()
+                .create(CraftNamespacedKey.toMinecraft(key), CraftChatMessage.fromString(title, true)[0]);
         CraftKeyedBossbar craftKeyedBossbar = new CraftKeyedBossbar(bossBattleCustom);
         craftKeyedBossbar.setColor(barColor);
         craftKeyedBossbar.setStyle(barStyle);
@@ -2646,7 +2655,10 @@ public final class CraftServer implements Server {
 
     @Override
     public Iterator<KeyedBossBar> getBossBars() {
-        return Iterators.unmodifiableIterator(Iterators.transform(this.getServer().getCustomBossEvents().getEvents().iterator(), new Function<CustomBossEvent, org.bukkit.boss.KeyedBossBar>() {
+        return Iterators.unmodifiableIterator(Iterators.transform(this.getServer()
+                .getCustomBossEvents()
+                .getEvents()
+                .iterator(), new Function<CustomBossEvent, org.bukkit.boss.KeyedBossBar>() {
             @Override
             public org.bukkit.boss.KeyedBossBar apply(CustomBossEvent bossBattleCustom) {
                 return bossBattleCustom.getBukkitEntity();
@@ -2657,7 +2669,9 @@ public final class CraftServer implements Server {
     @Override
     public KeyedBossBar getBossBar(NamespacedKey key) {
         Preconditions.checkArgument(key != null, "key");
-        net.minecraft.server.bossevents.CustomBossEvent bossBattleCustom = this.getServer().getCustomBossEvents().get(CraftNamespacedKey.toMinecraft(key));
+        net.minecraft.server.bossevents.CustomBossEvent bossBattleCustom = this.getServer()
+                .getCustomBossEvents()
+                .get(CraftNamespacedKey.toMinecraft(key));
 
         return (bossBattleCustom == null) ? null : bossBattleCustom.getBukkitEntity();
     }
@@ -2700,7 +2714,9 @@ public final class CraftServer implements Server {
 
     @Override
     public Iterator<org.bukkit.advancement.Advancement> advancementIterator() {
-        return Iterators.unmodifiableIterator(Iterators.transform(this.console.getAdvancements().getAllAdvancements().iterator(), new Function<Advancement, org.bukkit.advancement.Advancement>() {
+        return Iterators.unmodifiableIterator(Iterators.transform(this.console.getAdvancements()
+                .getAllAdvancements()
+                .iterator(), new Function<Advancement, org.bukkit.advancement.Advancement>() {
             @Override
             public org.bukkit.advancement.Advancement apply(Advancement advancement) {
                 return advancement.bukkit;
@@ -2801,29 +2817,39 @@ public final class CraftServer implements Server {
             case org.bukkit.Tag.REGISTRY_BLOCKS -> {
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Block namespace (%s) must have material type", clazz.getName());
                 net.minecraft.core.Registry<Block> blockTags = BuiltInRegistries.BLOCK;
-                return blockTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftBlockTag(blockTags, pair.getFirst())).collect(ImmutableList.toImmutableList());
+                return blockTags.getTags()
+                        .map(pair -> (org.bukkit.Tag<T>) new CraftBlockTag(blockTags, pair.getFirst()))
+                        .collect(ImmutableList.toImmutableList());
             }
             case org.bukkit.Tag.REGISTRY_ITEMS -> {
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Item namespace (%s) must have material type", clazz.getName());
                 net.minecraft.core.Registry<Item> itemTags = BuiltInRegistries.ITEM;
-                return itemTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftItemTag(itemTags, pair.getFirst())).collect(ImmutableList.toImmutableList());
+                return itemTags.getTags()
+                        .map(pair -> (org.bukkit.Tag<T>) new CraftItemTag(itemTags, pair.getFirst()))
+                        .collect(ImmutableList.toImmutableList());
             }
             case org.bukkit.Tag.REGISTRY_FLUIDS -> {
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Fluid namespace (%s) must have fluid type", clazz.getName());
                 net.minecraft.core.Registry<Fluid> fluidTags = BuiltInRegistries.FLUID;
-                return fluidTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftFluidTag(fluidTags, pair.getFirst())).collect(ImmutableList.toImmutableList());
+                return fluidTags.getTags()
+                        .map(pair -> (org.bukkit.Tag<T>) new CraftFluidTag(fluidTags, pair.getFirst()))
+                        .collect(ImmutableList.toImmutableList());
             }
             case org.bukkit.Tag.REGISTRY_ENTITY_TYPES -> {
                 Preconditions.checkArgument(clazz == org.bukkit.entity.EntityType.class, "Entity type namespace (%s) must have entity type", clazz.getName());
                 net.minecraft.core.Registry<EntityType<?>> entityTags = BuiltInRegistries.ENTITY_TYPE;
-                return entityTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftEntityTag(entityTags, pair.getFirst())).collect(ImmutableList.toImmutableList());
+                return entityTags.getTags()
+                        .map(pair -> (org.bukkit.Tag<T>) new CraftEntityTag(entityTags, pair.getFirst()))
+                        .collect(ImmutableList.toImmutableList());
             }
             // Paper start
             case org.bukkit.Tag.REGISTRY_GAME_EVENTS -> {
                 Preconditions.checkArgument(clazz == org.bukkit.GameEvent.class);
                 net.minecraft.core.Registry<net.minecraft.world.level.gameevent.GameEvent> gameEvents = net.minecraft.core.registries.BuiltInRegistries.GAME_EVENT;
-                return gameEvents.getTags().map(pair -> (org.bukkit.Tag<T>) new io.papermc.paper.CraftGameEventTag(gameEvents, pair.getFirst())).collect(ImmutableList.toImmutableList());
-            // Paper end
+                return gameEvents.getTags()
+                        .map(pair -> (org.bukkit.Tag<T>) new io.papermc.paper.CraftGameEventTag(gameEvents, pair.getFirst()))
+                        .collect(ImmutableList.toImmutableList());
+                // Paper end
             }
             default -> throw new IllegalArgumentException();
         }
@@ -2881,7 +2907,7 @@ public final class CraftServer implements Server {
     // Paper - Add getTPS API - Further improve tick loop
     @Override
     public double[] getTPS() {
-        return new double[] {
+        return new double[]{
                 net.minecraft.server.MinecraftServer.getServer().tps1.getAverage(),
                 net.minecraft.server.MinecraftServer.getServer().tps5.getAverage(),
                 net.minecraft.server.MinecraftServer.getServer().tps15.getAverage()
@@ -2900,31 +2926,26 @@ public final class CraftServer implements Server {
     // Paper end
 
     // Spigot start
-    private final org.bukkit.Server.Spigot spigot = new org.bukkit.Server.Spigot()
-    {
+    private final org.bukkit.Server.Spigot spigot = new org.bukkit.Server.Spigot() {
 
         @Deprecated
         @Override
-        public YamlConfiguration getConfig()
-        {
+        public YamlConfiguration getConfig() {
             return org.spigotmc.SpigotConfig.config;
         }
 
         @Override
-        public YamlConfiguration getBukkitConfig()
-        {
+        public YamlConfiguration getBukkitConfig() {
             return configuration;
         }
 
         @Override
-        public YamlConfiguration getSpigotConfig()
-        {
+        public YamlConfiguration getSpigotConfig() {
             return org.spigotmc.SpigotConfig.config;
         }
 
         @Override
-        public YamlConfiguration getPaperConfig()
-        {
+        public YamlConfiguration getPaperConfig() {
             return CraftServer.this.console.paperConfigurations.createLegacyObject(CraftServer.this.console);
         }
 
@@ -2948,8 +2969,7 @@ public final class CraftServer implements Server {
         }
     };
 
-    public org.bukkit.Server.Spigot spigot()
-    {
+    public org.bukkit.Server.Spigot spigot() {
         return this.spigot;
     }
     // Spigot end
@@ -2965,7 +2985,9 @@ public final class CraftServer implements Server {
 
     @Override
     public void playSound(final net.kyori.adventure.sound.Sound sound, final double x, final double y, final double z) {
-        io.papermc.paper.adventure.PaperAdventure.asSoundPacket(sound, x, y, z, sound.seed().orElseGet(this.console.overworld().getRandom()::nextLong), this.playSound0(x, y, z, this.console.getAllLevels()));
+        io.papermc.paper.adventure.PaperAdventure.asSoundPacket(sound, x, y, z, sound.seed()
+                .orElseGet(this.console.overworld()
+                        .getRandom()::nextLong), this.playSound0(x, y, z, this.console.getAllLevels()));
     }
 
     @Override
@@ -3021,7 +3043,9 @@ public final class CraftServer implements Server {
             return null;
         }
     }
+
     private Iterable<? extends net.kyori.adventure.audience.Audience> adventure$audiences;
+
     @Override
     public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {
         if (this.adventure$audiences == null) {
@@ -3033,17 +3057,20 @@ public final class CraftServer implements Server {
     @Override
     public void reloadPermissions() {
         pluginManager.clearPermissions();
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins) loadCustomPermissions();
+        if (io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins)
+            loadCustomPermissions();
         for (Plugin plugin : pluginManager.getPlugins()) {
             for (Permission perm : plugin.getDescription().getPermissions()) {
                 try {
                     pluginManager.addPermission(perm);
                 } catch (IllegalArgumentException ex) {
-                    getLogger().log(Level.WARNING, "Plugin " + plugin.getDescription().getFullName() + " tried to register permission '" + perm.getName() + "' but it's already registered", ex);
+                    getLogger().log(Level.WARNING, "Plugin " + plugin.getDescription()
+                            .getFullName() + " tried to register permission '" + perm.getName() + "' but it's already registered", ex);
                 }
             }
         }
-        if (!io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins) loadCustomPermissions();
+        if (!io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins)
+            loadCustomPermissions();
         DefaultPermissions.registerCorePermissions();
         CraftDefaultPermissions.registerCorePermissions();
     }
@@ -3074,7 +3101,8 @@ public final class CraftServer implements Server {
 
     @Override
     public String getPermissionMessage() {
-        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacyAmpersand().serialize(io.papermc.paper.configuration.GlobalConfiguration.get().messages.noPermission);
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacyAmpersand()
+                .serialize(io.papermc.paper.configuration.GlobalConfiguration.get().messages.noPermission);
     }
 
     @Override
@@ -3110,7 +3138,7 @@ public final class CraftServer implements Server {
         }
 
         final com.mojang.authlib.GameProfile profile = new com.mojang.authlib.GameProfile(uuid, name);
-        profile.getProperties().putAll(((CraftPlayer)player).getHandle().getGameProfile().getProperties());
+        profile.getProperties().putAll(((CraftPlayer) player).getHandle().getGameProfile().getProperties());
         return new com.destroystokyo.paper.profile.CraftPlayerProfile(profile);
     }
 
@@ -3125,6 +3153,7 @@ public final class CraftServer implements Server {
     }
 
     private com.destroystokyo.paper.entity.ai.MobGoals mobGoals = new com.destroystokyo.paper.entity.ai.PaperMobGoals();
+
     @Override
     public com.destroystokyo.paper.entity.ai.MobGoals getMobGoals() {
         return mobGoals;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 27a98fb8ec63a7db6b9574a3999f942f9d38ce38..6baa25e2854d41b1ebfad62adffd78c326ace614 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -10,30 +10,6 @@ import io.netty.buffer.Unpooled;
 import io.netty.channel.Channel;
 import it.unimi.dsi.fastutil.shorts.ShortArraySet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.lang.ref.WeakReference;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.time.Duration;
-import java.time.Instant;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
-import java.util.WeakHashMap;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import javax.annotation.Nullable;
-
 import net.kissenpvp.core.api.user.User;
 import net.kissenpvp.core.api.user.UserImplementation;
 import net.kissenpvp.core.base.KissenCore;
@@ -41,7 +17,9 @@ import net.kissenpvp.core.user.KissenUserImplementation;
 import net.kissenpvp.paper.api.permission.PaperPermissible;
 import net.kissenpvp.paper.api.permission.PermissibleOverriddenException;
 import net.kissenpvp.paper.networking.client.entity.KissenPaperOnlinePlayerClient;
+import net.kissenpvp.paper.permission.KissenPaperPermissible;
 import net.kyori.adventure.audience.Audience;
+import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
@@ -52,36 +30,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.PlayerChatMessage;
 import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundClearTitlesPacket;
-import net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket;
-import net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket;
-import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
-import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
-import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
-import net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket;
-import net.minecraft.network.protocol.game.ClientboundMapItemDataPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoRemovePacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket;
-import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
-import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
-import net.minecraft.network.protocol.game.ClientboundSetHealthPacket;
-import net.minecraft.network.protocol.game.ClientboundSetSubtitleTextPacket;
-import net.minecraft.network.protocol.game.ClientboundSetTitleTextPacket;
-import net.minecraft.network.protocol.game.ClientboundSetTitlesAnimationPacket;
-import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundStopSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundTabListPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.PlayerAdvancements;
 import net.minecraft.server.level.ChunkMap;
@@ -98,30 +47,13 @@ import net.minecraft.world.food.FoodData;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.SignText;
 import net.minecraft.world.level.border.BorderChangeListener;
 import net.minecraft.world.level.saveddata.maps.MapDecoration;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.Vec3;
-import org.bukkit.BanEntry;
-import org.bukkit.BanList;
-import org.bukkit.Bukkit;
-import org.bukkit.DyeColor;
-import org.bukkit.Effect;
-import org.bukkit.GameMode;
-import org.bukkit.Instrument;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Note;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.Particle;
-import org.bukkit.Sound;
-import org.bukkit.Statistic;
-import org.bukkit.WeatherType;
-import org.bukkit.WorldBorder;
+import org.bukkit.*;
 import org.bukkit.ban.IpBanList;
 import org.bukkit.ban.ProfileBanList;
 import org.bukkit.block.Block;
@@ -134,20 +66,11 @@ import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
-import org.bukkit.craftbukkit.CraftEffect;
-import org.bukkit.craftbukkit.CraftEquipmentSlot;
-import org.bukkit.craftbukkit.CraftOfflinePlayer;
-import org.bukkit.craftbukkit.CraftParticle;
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.CraftSound;
-import org.bukkit.craftbukkit.CraftStatistic;
-import org.bukkit.craftbukkit.CraftWorld;
-import org.bukkit.craftbukkit.CraftWorldBorder;
+import org.bukkit.craftbukkit.*;
 import org.bukkit.craftbukkit.advancement.CraftAdvancement;
 import org.bukkit.craftbukkit.advancement.CraftAdvancementProgress;
 import org.bukkit.craftbukkit.block.CraftBlockEntityState;
 import org.bukkit.craftbukkit.block.CraftBlockState;
-import org.bukkit.craftbukkit.block.CraftBlockStates;
 import org.bukkit.craftbukkit.block.CraftSign;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.conversations.ConversationTracker;
@@ -155,7 +78,6 @@ import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.map.CraftMapView;
 import org.bukkit.craftbukkit.map.RenderData;
-import org.bukkit.craftbukkit.profile.CraftPlayerProfile;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftLocation;
@@ -164,13 +86,7 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
-import org.bukkit.event.player.PlayerExpCooldownChangeEvent;
-import org.bukkit.event.player.PlayerHideEntityEvent;
-import org.bukkit.event.player.PlayerRegisterChannelEvent;
-import org.bukkit.event.player.PlayerShowEntityEvent;
-import org.bukkit.event.player.PlayerSpawnChangeEvent;
-import org.bukkit.event.player.PlayerTeleportEvent;
-import org.bukkit.event.player.PlayerUnregisterChannelEvent;
+import org.bukkit.event.player.*;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView.Property;
 import org.bukkit.inventory.ItemStack;
@@ -179,11 +95,21 @@ import org.bukkit.map.MapView;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
-import org.bukkit.profile.PlayerProfile;
 import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.NotNull;
 
-import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import javax.annotation.Nullable;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.lang.ref.WeakReference;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.time.Duration;
+import java.time.Instant;
+import java.util.*;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaperOnlinePlayerClient {
@@ -394,21 +320,23 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     @Override
     public void setPlayerListHeaderFooter(BaseComponent[] header, BaseComponent[] footer) {
-         if (header != null) {
-             String headerJson = net.md_5.bungee.chat.ComponentSerializer.toString(header);
-             playerListHeader = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(headerJson);
-         } else {
-             playerListHeader = null;
-         }
+        if (header != null) {
+            String headerJson = net.md_5.bungee.chat.ComponentSerializer.toString(header);
+            playerListHeader = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson()
+                    .deserialize(headerJson);
+        } else {
+            playerListHeader = null;
+        }
 
         if (footer != null) {
-             String footerJson = net.md_5.bungee.chat.ComponentSerializer.toString(footer);
-             playerListFooter = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(footerJson);
+            String footerJson = net.md_5.bungee.chat.ComponentSerializer.toString(footer);
+            playerListFooter = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson()
+                    .deserialize(footerJson);
         } else {
-             playerListFooter = null;
-         }
+            playerListFooter = null;
+        }
 
-         updatePlayerListHeaderFooter();
+        updatePlayerListHeaderFooter();
     }
 
     @Override
@@ -487,13 +415,14 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     @Override
     public String getDisplayName() {
-        if(true) return io.papermc.paper.adventure.DisplayNames.getLegacy(this); // Paper
+        if (true) return io.papermc.paper.adventure.DisplayNames.getLegacy(this); // Paper
         return this.getHandle().displayName;
     }
 
     @Override
     public void setDisplayName(final String name) {
-        this.getHandle().adventure$displayName = name != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(name) : net.kyori.adventure.text.Component.text(this.getName()); // Paper
+        this.getHandle().adventure$displayName = name != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .deserialize(name) : net.kyori.adventure.text.Component.text(this.getName()); // Paper
         this.getHandle().displayName = name == null ? getName() : name;
     }
 
@@ -507,18 +436,22 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
             }
         }
     }
+
     @Override
     public net.kyori.adventure.text.Component playerListName() {
         return getHandle().listName == null ? net.kyori.adventure.text.Component.text(getName()) : io.papermc.paper.adventure.PaperAdventure.asAdventure(getHandle().listName);
     }
+
     @Override
     public net.kyori.adventure.text.Component playerListHeader() {
         return playerListHeader;
     }
+
     @Override
     public net.kyori.adventure.text.Component playerListFooter() {
         return playerListFooter;
     }
+
     // Paper end
     @Override
     public String getPlayerListName() {
@@ -543,30 +476,36 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     @Override
     public String getPlayerListHeader() {
-        return (this.playerListHeader == null) ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(playerListHeader);
+        return (this.playerListHeader == null) ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .serialize(playerListHeader);
     }
 
     @Override
     public String getPlayerListFooter() {
-        return (this.playerListFooter == null) ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(playerListFooter); // Paper - Adventure
+        return (this.playerListFooter == null) ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .serialize(playerListFooter); // Paper - Adventure
     }
 
     @Override
     public void setPlayerListHeader(String header) {
-        this.playerListHeader = header == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(header); // Paper - Adventure
+        this.playerListHeader = header == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .deserialize(header); // Paper - Adventure
         this.updatePlayerListHeaderFooter();
     }
 
     @Override
     public void setPlayerListFooter(String footer) {
-        this.playerListFooter = footer == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(footer); // Paper - Adventure
+        this.playerListFooter = footer == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .deserialize(footer); // Paper - Adventure
         this.updatePlayerListHeaderFooter();
     }
 
     @Override
     public void setPlayerListHeaderFooter(String header, String footer) {
-        this.playerListHeader = header == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(header); // Paper - Adventure
-        this.playerListFooter = footer == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(footer); // Paper - Adventure
+        this.playerListHeader = header == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .deserialize(header); // Paper - Adventure
+        this.playerListFooter = footer == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .deserialize(footer); // Paper - Adventure
         this.updatePlayerListHeaderFooter();
     }
 
@@ -607,6 +546,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     // Paper start
     private static final net.kyori.adventure.text.Component DEFAULT_KICK_COMPONENT = net.kyori.adventure.text.Component.translatable("multiplayer.disconnect.kicked");
+
     @Override
     public void kick() {
         this.kick(DEFAULT_KICK_COMPONENT);
@@ -641,11 +581,15 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
     @Override
     public <T> T getClientOption(com.destroystokyo.paper.ClientOption<T> type) {
         if (com.destroystokyo.paper.ClientOption.SKIN_PARTS == type) {
-            return type.getType().cast(new com.destroystokyo.paper.PaperSkinParts(getHandle().getEntityData().get(net.minecraft.world.entity.player.Player.DATA_PLAYER_MODE_CUSTOMISATION)));
+            return type.getType()
+                    .cast(new com.destroystokyo.paper.PaperSkinParts(getHandle().getEntityData()
+                            .get(net.minecraft.world.entity.player.Player.DATA_PLAYER_MODE_CUSTOMISATION)));
         } else if (com.destroystokyo.paper.ClientOption.CHAT_COLORS_ENABLED == type) {
             return type.getType().cast(getHandle().canChatInColor());
         } else if (com.destroystokyo.paper.ClientOption.CHAT_VISIBILITY == type) {
-            return type.getType().cast(getHandle().getChatVisibility() == null ? com.destroystokyo.paper.ClientOption.ChatVisibility.UNKNOWN : com.destroystokyo.paper.ClientOption.ChatVisibility.valueOf(getHandle().getChatVisibility().name()));
+            return type.getType()
+                    .cast(getHandle().getChatVisibility() == null ? com.destroystokyo.paper.ClientOption.ChatVisibility.UNKNOWN : com.destroystokyo.paper.ClientOption.ChatVisibility.valueOf(getHandle().getChatVisibility()
+                            .name()));
         } else if (com.destroystokyo.paper.ClientOption.LOCALE == type) {
             return type.getType().cast(getLocale());
         } else if (com.destroystokyo.paper.ClientOption.MAIN_HAND == type) {
@@ -670,8 +614,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         net.minecraft.world.level.Level world = ((CraftWorld) getWorld()).getHandle();
         net.minecraft.world.entity.projectile.FireworkRocketEntity entity = new net.minecraft.world.entity.projectile.FireworkRocketEntity(world, item, getHandle());
         return world.addFreshEntity(entity)
-            ? (org.bukkit.entity.Firework) entity.getBukkitEntity()
-            : null;
+                ? (org.bukkit.entity.Firework) entity.getBukkitEntity()
+                : null;
     }
 
     @Override
@@ -684,16 +628,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
     @Override
     public void addAdditionalChatCompletions(@NotNull Collection<String> completions) {
         this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket(
-            net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket.Action.ADD,
-            new ArrayList<>(completions)
+                net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket.Action.ADD,
+                new ArrayList<>(completions)
         ));
     }
 
     @Override
     public void removeAdditionalChatCompletions(@NotNull Collection<String> completions) {
         this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket(
-            net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket.Action.REMOVE,
-            new ArrayList<>(completions)
+                net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket.Action.REMOVE,
+                new ArrayList<>(completions)
         ));
     }
     // Paper end
@@ -726,7 +670,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
             if (msg.startsWith("/")) {
                 this.getHandle().connection.handleCommand(msg);
             } else {
-                final PlayerChatMessage playerChatMessage = PlayerChatMessage.system(msg).withResult(new net.minecraft.network.chat.ChatDecorator.ModernResult(Component.literal(msg), true, false));
+                final PlayerChatMessage playerChatMessage = PlayerChatMessage.system(msg)
+                        .withResult(new net.minecraft.network.chat.ChatDecorator.ModernResult(Component.literal(msg), true, false));
                 // TODO chat decorating
                 // TODO text filtering
                 this.getHandle().connection.chat(msg, playerChatMessage, false);
@@ -763,7 +708,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
             f = 1.0f;
         }
         if (!nms.hasCustomSound()) {
-            this.getHandle().connection.send(new ClientboundSoundPacket(nms.getSoundEvent(), net.minecraft.sounds.SoundSource.RECORDS, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f, this.getHandle().getRandom().nextLong()));
+            this.getHandle().connection.send(new ClientboundSoundPacket(nms.getSoundEvent(), net.minecraft.sounds.SoundSource.RECORDS, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f, this.getHandle()
+                    .getRandom()
+                    .nextLong()));
         }
         // Paper end
     }
@@ -797,7 +744,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
         if (this.getHandle().connection == null) return;
 
-        ClientboundSoundPacket packet = new ClientboundSoundPacket(soundEffectHolder, categoryNMS, loc.getX(), loc.getY(), loc.getZ(), volume, pitch, this.getHandle().getRandom().nextLong());
+        ClientboundSoundPacket packet = new ClientboundSoundPacket(soundEffectHolder, categoryNMS, loc.getX(), loc.getY(), loc.getZ(), volume, pitch, this.getHandle()
+                .getRandom()
+                .nextLong());
         this.getHandle().connection.send(packet);
     }
 
@@ -813,14 +762,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     @Override
     public void playSound(org.bukkit.entity.Entity entity, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
-        if (!(entity instanceof CraftEntity craftEntity) || sound == null || category == null || this.getHandle().connection == null) return;
+        if (!(entity instanceof CraftEntity craftEntity) || sound == null || category == null || this.getHandle().connection == null)
+            return;
 
         this.playSound0(entity, BuiltInRegistries.SOUND_EVENT.wrapAsHolder(CraftSound.getSoundEffect(sound)), net.minecraft.sounds.SoundSource.valueOf(category.name()), volume, pitch);
     }
 
     @Override
     public void playSound(org.bukkit.entity.Entity entity, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
-        if (!(entity instanceof CraftEntity craftEntity) || sound == null || category == null || this.getHandle().connection == null) return;
+        if (!(entity instanceof CraftEntity craftEntity) || sound == null || category == null || this.getHandle().connection == null)
+            return;
 
         this.playSound0(entity, Holder.direct(SoundEvent.createVariableRangeEvent(new ResourceLocation(sound))), net.minecraft.sounds.SoundSource.valueOf(category.name()), volume, pitch);
     }
@@ -833,7 +784,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         if (this.getHandle().connection == null) return;
         if (!(entity instanceof CraftEntity craftEntity)) return;
 
-        ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(soundEffectHolder, categoryNMS, craftEntity.getHandle(), volume, pitch, this.getHandle().getRandom().nextLong());
+        ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(soundEffectHolder, categoryNMS, craftEntity.getHandle(), volume, pitch, this.getHandle()
+                .getRandom()
+                .nextLong());
         this.getHandle().connection.send(packet);
     }
 
@@ -890,7 +843,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         Preconditions.checkArgument(effect != null, "Effect cannot be null");
         if (data != null) {
             Preconditions.checkArgument(effect.getData() != null, "Effect.%s does not have a valid Data", effect);
-            Preconditions.checkArgument(effect.getData().isAssignableFrom(data.getClass()), "%s data cannot be used for the %s effect", data.getClass().getName(), effect);
+            Preconditions.checkArgument(effect.getData()
+                    .isAssignableFrom(data.getClass()), "%s data cannot be used for the %s effect", data.getClass()
+                    .getName(), effect);
         } else {
             // Special case: the axis is optional for ELECTRIC_SPARK
             Preconditions.checkArgument(effect.getData() == null || effect == Effect.ELECTRIC_SPARK, "Wrong kind of data for the %s effect", effect);
@@ -976,7 +931,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         // Construct the packets using the data allocated above and send then to the players
         for (Map.Entry<SectionPos, ChunkSectionChanges> entry : changes.entrySet()) {
             ChunkSectionChanges chunkChanges = entry.getValue();
-            ClientboundSectionBlocksUpdatePacket packet = new ClientboundSectionBlocksUpdatePacket(entry.getKey(), chunkChanges.positions(), chunkChanges.blockData().toArray(net.minecraft.world.level.block.state.BlockState[]::new));
+            ClientboundSectionBlocksUpdatePacket packet = new ClientboundSectionBlocksUpdatePacket(entry.getKey(), chunkChanges.positions(), chunkChanges.blockData()
+                    .toArray(net.minecraft.world.level.block.state.BlockState[]::new));
             this.getHandle().connection.send(packet);
         }
     }
@@ -986,7 +942,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         this.sendBlockChanges(blocks);
     }
 
-    private record ChunkSectionChanges(ShortSet positions, List<net.minecraft.world.level.block.state.BlockState> blockData) {
+    private record ChunkSectionChanges(ShortSet positions,
+                                       List<net.minecraft.world.level.block.state.BlockState> blockData) {
 
         public ChunkSectionChanges() {
             this(new ShortArraySet(), new ArrayList<>());
@@ -1037,6 +994,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         Component[] components = CraftSign.sanitizeLines(lines);
         this.sendSignChange0(components, loc, dyeColor, hasGlowingText);
     }
+
     // Paper end
     @Override
     public void sendSignChange(Location loc, String[] lines) {
@@ -1203,7 +1161,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
             }
         }
 
-        ClientboundMapItemDataPacket packet = new ClientboundMapItemDataPacket(map.getId(), map.getScale().getValue(), map.isLocked(), icons, new MapItemSavedData.MapPatch(0, 0, 128, 128, data.buffer));
+        ClientboundMapItemDataPacket packet = new ClientboundMapItemDataPacket(map.getId(), map.getScale()
+                .getValue(), map.isLocked(), icons, new MapItemSavedData.MapPatch(0, 0, 128, 128, data.buffer));
         this.getHandle().connection.send(packet);
     }
 
@@ -1284,7 +1243,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     @Override
     public void lookAt(@NotNull org.bukkit.entity.Entity entity, @NotNull io.papermc.paper.entity.LookAnchor playerAnchor, @NotNull io.papermc.paper.entity.LookAnchor entityAnchor) {
-        this.getHandle().lookAt(toNmsAnchor(playerAnchor), ((CraftEntity) entity).getHandle(), toNmsAnchor(entityAnchor));
+        this.getHandle()
+                .lookAt(toNmsAnchor(playerAnchor), ((CraftEntity) entity).getHandle(), toNmsAnchor(entityAnchor));
     }
 
     @Override
@@ -1368,7 +1328,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         }
 
         if (entity.connection == null) {
-           return false;
+            return false;
         }
 
         if (entity.isVehicle() && !ignorePassengers) { // Paper - Teleport API
@@ -1414,7 +1374,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
             entity.connection.internalTeleport(to.getX(), to.getY(), to.getZ(), to.getYaw(), to.getPitch(), relativeArguments); // Paper - Teleport API
         } else {
             // The respawn reason should never be used if the passed location is non null.
-            server.getHandle().respawn(entity, toWorld, true, to, !toWorld.paperConfig().environment.disableTeleportationSuffocationCheck, null); // Paper
+            server.getHandle()
+                    .respawn(entity, toWorld, true, to, !toWorld.paperConfig().environment.disableTeleportationSuffocationCheck, null); // Paper
         }
         return true;
     }
@@ -1472,7 +1433,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         BlockPos bed = this.getHandle().getRespawnPosition();
 
         if (world != null && bed != null) {
-            Optional<Vec3> spawnLoc = net.minecraft.world.entity.player.Player.findRespawnPositionAndUseSpawnBlock(world, bed, this.getHandle().getRespawnAngle(), this.getHandle().isRespawnForced(), true);
+            Optional<Vec3> spawnLoc = net.minecraft.world.entity.player.Player.findRespawnPositionAndUseSpawnBlock(world, bed, this.getHandle()
+                    .getRespawnAngle(), this.getHandle().isRespawnForced(), true);
             if (spawnLoc.isPresent()) {
                 Vec3 vec = spawnLoc.get();
                 return CraftLocation.toBukkit(vec, world.getWorld(), this.getHandle().getRespawnAngle(), 0);
@@ -1489,9 +1451,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
     @Override
     public void setBedSpawnLocation(Location location, boolean override) {
         if (location == null) {
-            this.getHandle().setRespawnPosition(null, null, 0.0F, override, false, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLUGIN); // Paper - PlayerSetSpawnEvent
+            this.getHandle()
+                    .setRespawnPosition(null, null, 0.0F, override, false, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLUGIN); // Paper - PlayerSetSpawnEvent
         } else {
-            this.getHandle().setRespawnPosition(((CraftWorld) location.getWorld()).getHandle().dimension(), CraftLocation.toBlockPosition(location), location.getYaw(), override, false, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLUGIN); // Paper - PlayerSetSpawnEvent
+            this.getHandle()
+                    .setRespawnPosition(((CraftWorld) location.getWorld()).getHandle()
+                            .dimension(), CraftLocation.toBlockPosition(location), location.getYaw(), override, false, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLUGIN); // Paper - PlayerSetSpawnEvent
         }
     }
 
@@ -1512,7 +1477,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
     @Override
     public Set<NamespacedKey> getDiscoveredRecipes() {
         ImmutableSet.Builder<NamespacedKey> bukkitRecipeKeys = ImmutableSet.builder();
-        this.getHandle().getRecipeBook().known.forEach(key -> bukkitRecipeKeys.add(CraftNamespacedKey.fromMinecraft(key)));
+        this.getHandle()
+                .getRecipeBook().known.forEach(key -> bukkitRecipeKeys.add(CraftNamespacedKey.fromMinecraft(key)));
         return bukkitRecipeKeys.build();
     }
 
@@ -1649,7 +1615,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     @Override
     public void setExpCooldown(int ticks) {
-        this.getHandle().takeXpDelay = CraftEventFactory.callPlayerXpCooldownEvent(this.getHandle(), ticks, PlayerExpCooldownChangeEvent.ChangeReason.PLUGIN).getNewCooldown();
+        this.getHandle().takeXpDelay = CraftEventFactory.callPlayerXpCooldownEvent(this.getHandle(), ticks, PlayerExpCooldownChangeEvent.ChangeReason.PLUGIN)
+                .getNewCooldown();
     }
 
     @Override
@@ -1699,7 +1666,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
     @Override
     public BanEntry<InetAddress> banIp(String reason, Date expires, String source, boolean kickPlayer) {
         Preconditions.checkArgument(this.getAddress() != null, "The Address of this Player is null");
-        BanEntry<InetAddress> banEntry = ((IpBanList) server.getBanList(BanList.Type.IP)).addBan(this.getAddress().getAddress(), reason, expires, source);
+        BanEntry<InetAddress> banEntry = ((IpBanList) server.getBanList(BanList.Type.IP)).addBan(this.getAddress()
+                .getAddress(), reason, expires, source);
         if (kickPlayer) {
             this.kickPlayer(reason);
         }
@@ -1735,7 +1703,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         Preconditions.checkArgument(mode != null, "GameMode cannot be null");
         if (this.getHandle().connection == null) return;
 
-        this.getHandle().setGameMode(GameType.byId(mode.getValue()), org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.PLUGIN, null); // Paper
+        this.getHandle()
+                .setGameMode(GameType.byId(mode.getValue()), org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.PLUGIN, null); // Paper
     }
 
     @Override
@@ -1756,7 +1725,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         ServerPlayer handle = this.getHandle();
         // Logic copied from EntityExperienceOrb and remapped to unobfuscated methods/properties
         final var stackEntry = net.minecraft.world.item.enchantment.EnchantmentHelper
-            .getRandomItemWith(net.minecraft.world.item.enchantment.Enchantments.MENDING, handle);
+                .getRandomItemWith(net.minecraft.world.item.enchantment.Enchantments.MENDING, handle);
         final net.minecraft.world.item.ItemStack itemstack = stackEntry != null ? stackEntry.getValue() : net.minecraft.world.item.ItemStack.EMPTY;
         if (!itemstack.isEmpty() && itemstack.getItem().canBeDepleted()) {
             net.minecraft.world.entity.ExperienceOrb orb = net.minecraft.world.entity.EntityType.EXPERIENCE_ORB.create(handle.level());
@@ -1907,6 +1876,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
         server.getPluginManager().callEvent(new PlayerHideEntityEvent(this, entity));
     }
+
     private void unregisterEntity(Entity other) {
         // Paper end
         ChunkMap tracker = ((ServerLevel) this.getHandle().level()).getChunkSource().chunkMap;
@@ -2000,6 +1970,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         }
         server.getPluginManager().callEvent(new PlayerShowEntityEvent(this, entity)); // Paper
     }
+
     // Paper start
     @Override
     public void setPlayerProfile(com.destroystokyo.paper.profile.PlayerProfile profile) {
@@ -2042,6 +2013,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
             this.trackAndShowEntity(entity);
         }
     }
+
     // Paper start
     public com.destroystokyo.paper.profile.PlayerProfile getPlayerProfile() {
         return new com.destroystokyo.paper.profile.CraftPlayerProfile(this).clone();
@@ -2055,7 +2027,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
         //Respawn the player then update their position and selected slot
         ServerLevel worldserver = handle.serverLevel();
-        connection.send(new net.minecraft.network.protocol.game.ClientboundRespawnPacket(worldserver.dimensionTypeId(), worldserver.dimension(), net.minecraft.world.level.biome.BiomeManager.obfuscateSeed(worldserver.getSeed()), handle.gameMode.getGameModeForPlayer(), handle.gameMode.getPreviousGameModeForPlayer(), worldserver.isDebug(), worldserver.isFlat(), net.minecraft.network.protocol.game.ClientboundRespawnPacket.KEEP_ALL_DATA, this.getHandle().getLastDeathLocation(), handle.getPortalCooldown()));
+        connection.send(new net.minecraft.network.protocol.game.ClientboundRespawnPacket(worldserver.dimensionTypeId(), worldserver.dimension(), net.minecraft.world.level.biome.BiomeManager.obfuscateSeed(worldserver.getSeed()), handle.gameMode.getGameModeForPlayer(), handle.gameMode.getPreviousGameModeForPlayer(), worldserver.isDebug(), worldserver.isFlat(), net.minecraft.network.protocol.game.ClientboundRespawnPacket.KEEP_ALL_DATA, this.getHandle()
+                .getLastDeathLocation(), handle.getPortalCooldown()));
         handle.onUpdateAbilities();
         connection.internalTeleport(loc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), loc.getPitch(), java.util.Collections.emptySet());
         net.minecraft.server.MinecraftServer.getServer().getPlayerList().sendAllPlayerInfo(handle);
@@ -2282,7 +2255,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         if (hash != null) {
             Preconditions.checkArgument(hash.length == 20, "Resource pack hash should be 20 bytes long but was %s", hash.length);
 
-            this.getHandle().sendTexturePack(url, BaseEncoding.base16().lowerCase().encode(hash), force, CraftChatMessage.fromStringOrNull(prompt, true));
+            this.getHandle()
+                    .sendTexturePack(url, BaseEncoding.base16()
+                            .lowerCase()
+                            .encode(hash), force, CraftChatMessage.fromStringOrNull(prompt, true));
         } else {
             this.getHandle().sendTexturePack(url, "", force, CraftChatMessage.fromStringOrNull(prompt, true));
         }
@@ -2335,7 +2311,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
                     stream.write(channel.getBytes("UTF8"));
                     stream.write((byte) 0);
                 } catch (IOException ex) {
-                    Logger.getLogger(CraftPlayer.class.getName()).log(Level.SEVERE, "Could not send Plugin Channel REGISTER to " + getName(), ex);
+                    Logger.getLogger(CraftPlayer.class.getName())
+                            .log(Level.SEVERE, "Could not send Plugin Channel REGISTER to " + getName(), ex);
                 }
             }
 
@@ -2380,8 +2357,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     public void disconnect(String reason) {
         this.conversationTracker.abandonAllConversations();
-        //TODO unsubscribe
         // KissenPaper start
+        try {
+            ((KissenPaperPermissible) getPermissible()).unsubscribe();
+        } catch (PermissibleOverriddenException ignored) {}
         KissenCore.getInstance().getImplementation(KissenUserImplementation.class).logoutUser(getUser());
         // KissenPaper end
     }
@@ -2460,7 +2439,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         ServerPlayer player = this.getHandle();
         player.getAbilities().walkingSpeed = value / 2f;
         player.onUpdateAbilities();
-        this.getHandle().getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(player.getAbilities().walkingSpeed); // SPIGOT-5833: combination of the two in 1.16+
+        this.getHandle()
+                .getAttribute(Attributes.MOVEMENT_SPEED)
+                .setBaseValue(player.getAbilities().walkingSpeed); // SPIGOT-5833: combination of the two in 1.16+
     }
 
     @Override
@@ -2560,7 +2541,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
                 this.sendHealthUpdate();
             }
         }
-        this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, (float) this.getScaledHealth());
+        this.getHandle()
+                .getEntityData()
+                .set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, (float) this.getScaledHealth());
 
         this.getHandle().maxHealthCache = getMaxHealth();
     }
@@ -2593,13 +2576,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
                 break;
             }
         }
-        AttributeInstance dummy = new AttributeInstance(Attributes.MAX_HEALTH, (attribute) -> { });
+        AttributeInstance dummy = new AttributeInstance(Attributes.MAX_HEALTH, (attribute) -> {});
         // Spigot start
         double healthMod = this.scaledHealth ? this.healthScale : getMaxHealth();
-        if ( healthMod >= Float.MAX_VALUE || healthMod <= 0 )
-        {
+        if (healthMod >= Float.MAX_VALUE || healthMod <= 0) {
             healthMod = 20; // Reset health
-            getServer().getLogger().warning( getName() + " tried to crash the server with a large health attribute" );
+            getServer().getLogger().warning(getName() + " tried to crash the server with a large health attribute");
         }
         dummy.setBaseValue(healthMod);
         // Spigot end
@@ -2703,7 +2685,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
     @Override
     public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
         if (data != null) {
-            Preconditions.checkArgument(particle.getDataType().isInstance(data), "data (%s) should be %s", data.getClass(), particle.getDataType());
+            Preconditions.checkArgument(particle.getDataType()
+                    .isInstance(data), "data (%s) should be %s", data.getClass(), particle.getDataType());
         }
         ClientboundLevelParticlesPacket packetplayoutworldparticles = new ClientboundLevelParticlesPacket(CraftParticle.toNMS(particle, data), true, x, y, z, (float) offsetX, (float) offsetY, (float) offsetZ, (float) extra, count); // Paper - Fix x/y/z coordinate precision loss
         this.getHandle().connection.send(packetplayoutworldparticles);
@@ -2728,9 +2711,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     // Paper start
     @Override
-    public /* KissenPaper - NotNull */ java.util.@NotNull   Locale locale() {
+    public /* KissenPaper - NotNull */ java.util.@NotNull Locale locale() {
         return /* getHandle().adventure$locale */ getCurrentLocale(); // KissenPaper
     }
+
     // Paper end
     @Override
     public int getPing() {
@@ -2773,8 +2757,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         Preconditions.checkArgument(url != null, "Resource pack URL cannot be null");
         Preconditions.checkArgument(hash != null, "Hash cannot be null");
         net.minecraft.network.chat.Component promptComponent = resourcePackPrompt != null ?
-                            io.papermc.paper.adventure.PaperAdventure.asVanilla(resourcePackPrompt) :
-                           null;
+                io.papermc.paper.adventure.PaperAdventure.asVanilla(resourcePackPrompt) :
+                null;
         this.getHandle().sendTexturePack(url, hash, required, promptComponent);
     }
 
@@ -2812,7 +2796,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
         ItemStack hand = getInventory().getItemInMainHand();
         getInventory().setItemInMainHand(book);
-        this.getHandle().openItemGui(org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(book), net.minecraft.world.InteractionHand.MAIN_HAND);
+        this.getHandle()
+                .openItemGui(org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(book), net.minecraft.world.InteractionHand.MAIN_HAND);
         getInventory().setItemInMainHand(hand);
     }
 
@@ -2859,12 +2844,15 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
     }
 
     private net.minecraft.network.chat.ChatType.Bound toHandle(net.kyori.adventure.chat.ChatType.Bound boundChatType) {
-        net.minecraft.core.Registry<net.minecraft.network.chat.ChatType> chatTypeRegistry = this.getHandle().level().registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.CHAT_TYPE);
+        net.minecraft.core.Registry<net.minecraft.network.chat.ChatType> chatTypeRegistry = this.getHandle()
+                .level()
+                .registryAccess()
+                .registryOrThrow(net.minecraft.core.registries.Registries.CHAT_TYPE);
 
         return new net.minecraft.network.chat.ChatType.Bound(
-            chatTypeRegistry.get(io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.type().key())),
-            io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.name()),
-            io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.target())
+                chatTypeRegistry.get(io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.type().key())),
+                io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.name()),
+                io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.target())
         );
     }
 
@@ -2873,7 +2861,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         if (getHandle().connection == null) return;
 
         net.minecraft.network.chat.Component component = io.papermc.paper.adventure.PaperAdventure.asVanilla(message);
-        this.getHandle().sendChatMessage(new net.minecraft.network.chat.OutgoingChatMessage.Disguised(component), this.getHandle().isTextFilteringEnabled(), this.toHandle(boundChatType));
+        this.getHandle()
+                .sendChatMessage(new net.minecraft.network.chat.OutgoingChatMessage.Disguised(component), this.getHandle()
+                        .isTextFilteringEnabled(), this.toHandle(boundChatType));
     }
 
     @Override
@@ -2881,7 +2871,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         if (getHandle().connection == null) return;
 
         if (signedMessage instanceof PlayerChatMessage.AdventureView view) {
-            this.getHandle().sendChatMessage(net.minecraft.network.chat.OutgoingChatMessage.create(view.playerChatMessage()), this.getHandle().isTextFilteringEnabled(), this.toHandle(boundChatType));
+            this.getHandle()
+                    .sendChatMessage(net.minecraft.network.chat.OutgoingChatMessage.create(view.playerChatMessage()), this.getHandle()
+                            .isTextFilteringEnabled(), this.toHandle(boundChatType));
             return;
         }
         net.kyori.adventure.text.Component message = signedMessage.unsignedContent() == null ? net.kyori.adventure.text.Component.text(signedMessage.message()) : signedMessage.unsignedContent();
@@ -2905,7 +2897,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
     @Override
     public void sendMessage(final net.kyori.adventure.identity.Identity identity, final net.kyori.adventure.text.Component message, final net.kyori.adventure.audience.MessageType type) {
         if (getHandle().connection == null) return;
-        final net.minecraft.core.Registry<net.minecraft.network.chat.ChatType> chatTypeRegistry = this.getHandle().level().registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.CHAT_TYPE);
+        final net.minecraft.core.Registry<net.minecraft.network.chat.ChatType> chatTypeRegistry = this.getHandle()
+                .level()
+                .registryAccess()
+                .registryOrThrow(net.minecraft.core.registries.Registries.CHAT_TYPE);
         this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(message, false));
     }
 
@@ -3005,7 +3000,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     @Override
     public void showBossBar(final net.kyori.adventure.bossbar.BossBar bar) {
-        net.kyori.adventure.bossbar.BossBarImplementation.get(bar, io.papermc.paper.adventure.BossBarImplementationImpl.class).playerShow(this);
+        net.kyori.adventure.bossbar.BossBarImplementation.get(bar, io.papermc.paper.adventure.BossBarImplementationImpl.class)
+                .playerShow(this);
         if (this.activeBossBars == null) {
             this.activeBossBars = new HashSet<>();
         }
@@ -3014,7 +3010,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     @Override
     public void hideBossBar(final net.kyori.adventure.bossbar.BossBar bar) {
-        net.kyori.adventure.bossbar.BossBarImplementation.get(bar, io.papermc.paper.adventure.BossBarImplementationImpl.class).playerHide(this);
+        net.kyori.adventure.bossbar.BossBarImplementation.get(bar, io.papermc.paper.adventure.BossBarImplementationImpl.class)
+                .playerHide(this);
         if (this.activeBossBars != null) {
             this.activeBossBars.remove(bar);
             if (this.activeBossBars.isEmpty()) {
@@ -3031,7 +3028,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     @Override
     public void playSound(final net.kyori.adventure.sound.Sound sound, final double x, final double y, final double z) {
-        this.getHandle().connection.send(io.papermc.paper.adventure.PaperAdventure.asSoundPacket(sound, x, y, z, sound.seed().orElseGet(this.getHandle().getRandom()::nextLong), null));
+        this.getHandle().connection.send(io.papermc.paper.adventure.PaperAdventure.asSoundPacket(sound, x, y, z, sound.seed()
+                .orElseGet(this.getHandle().getRandom()::nextLong), null));
     }
 
     @Override
@@ -3044,14 +3042,15 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         } else {
             throw new IllegalArgumentException("Sound emitter must be an Entity or self(), but was: " + emitter);
         }
-        this.getHandle().connection.send(io.papermc.paper.adventure.PaperAdventure.asSoundPacket(sound, entity, sound.seed().orElseGet(this.getHandle().getRandom()::nextLong), null));
+        this.getHandle().connection.send(io.papermc.paper.adventure.PaperAdventure.asSoundPacket(sound, entity, sound.seed()
+                .orElseGet(this.getHandle().getRandom()::nextLong), null));
     }
 
     @Override
     public void stopSound(final net.kyori.adventure.sound.SoundStop stop) {
         this.getHandle().connection.send(new ClientboundStopSoundPacket(
-            io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.sound()),
-            io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.source())
+                io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.sound()),
+                io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.source())
         ));
     }
 
@@ -3073,12 +3072,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
     public net.kyori.adventure.pointer.Pointers pointers() {
         if (this.adventure$pointers == null) {
             this.adventure$pointers = net.kyori.adventure.pointer.Pointers.builder()
-                .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::displayName)
-                .withDynamic(net.kyori.adventure.identity.Identity.NAME, this::getName)
-                .withDynamic(net.kyori.adventure.identity.Identity.UUID, this::getUniqueId)
-                .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
-                .withDynamic(net.kyori.adventure.identity.Identity.LOCALE, this::locale)
-                .build();
+                    .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::displayName)
+                    .withDynamic(net.kyori.adventure.identity.Identity.NAME, this::getName)
+                    .withDynamic(net.kyori.adventure.identity.Identity.UUID, this::getUniqueId)
+                    .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
+                    .withDynamic(net.kyori.adventure.identity.Identity.LOCALE, this::locale)
+                    .build();
         }
 
         return this.adventure$pointers;
@@ -3107,49 +3106,45 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
             super.remove();
         }
     }
+
     // Paper end
     // Spigot start
-    private final Player.Spigot spigot = new Player.Spigot()
-    {
+    private final Player.Spigot spigot = new Player.Spigot() {
 
         @Override
-        public InetSocketAddress getRawAddress()
-        {
+        public InetSocketAddress getRawAddress() {
             return (InetSocketAddress) CraftPlayer.this.getHandle().connection.getRawAddress();
         }
 
         @Override
-        public void respawn()
-        {
-            if ( CraftPlayer.this.getHealth() <= 0 && CraftPlayer.this.isOnline() )
-            {
-                server.getServer().getPlayerList().respawn( CraftPlayer.this.getHandle(), false, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.PLUGIN );
+        public void respawn() {
+            if (CraftPlayer.this.getHealth() <= 0 && CraftPlayer.this.isOnline()) {
+                server.getServer()
+                        .getPlayerList()
+                        .respawn(CraftPlayer.this.getHandle(), false, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.PLUGIN);
             }
         }
 
         @Override
-        public Set<Player> getHiddenPlayers()
-        {
+        public Set<Player> getHiddenPlayers() {
             Set<Player> ret = new HashSet<>();
-            for ( Player p : getServer().getOnlinePlayers() )
-            {
-                if ( !CraftPlayer.this.canSee(p) )
-                {
-                    ret.add( p );
+            for (Player p : getServer().getOnlinePlayers()) {
+                if (!CraftPlayer.this.canSee(p)) {
+                    ret.add(p);
                 }
             }
 
-            return java.util.Collections.unmodifiableSet( ret );
+            return java.util.Collections.unmodifiableSet(ret);
         }
 
         @Override
         public void sendMessage(BaseComponent component) {
-          sendMessage( new BaseComponent[] { component } );
+            sendMessage(new BaseComponent[]{component});
         }
 
         @Override
         public void sendMessage(BaseComponent... components) {
-           this.sendMessage(net.md_5.bungee.api.ChatMessageType.SYSTEM, components);
+            this.sendMessage(net.md_5.bungee.api.ChatMessageType.SYSTEM, components);
         }
 
         @Override
@@ -3164,7 +3159,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
         @Override
         public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent component) {
-            sendMessage( position, new BaseComponent[] { component } );
+            sendMessage(position, new BaseComponent[]{component});
         }
 
         @Override
@@ -3174,20 +3169,19 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
         @Override
         public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent component) {
-            sendMessage( position, sender, new BaseComponent[] { component } );
+            sendMessage(position, sender, new BaseComponent[]{component});
         }
 
         @Override
         public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent... components) {
-            if ( CraftPlayer.this.getHandle().connection == null ) return;
+            if (CraftPlayer.this.getHandle().connection == null) return;
 
             CraftPlayer.this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(components, position == net.md_5.bungee.api.ChatMessageType.ACTION_BAR));
         }
 
         // Paper start
         @Override
-        public int getPing()
-        {
+        public int getPing() {
             return getHandle().latency;
         }
         // Paper end
@@ -3203,7 +3197,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
     // Paper start
     @Override
     public void showElderGuardian(boolean silent) {
-        if (getHandle().connection != null) getHandle().connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.GUARDIAN_ELDER_EFFECT, silent ? 0F : 1F));
+        if (getHandle().connection != null)
+            getHandle().connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.GUARDIAN_ELDER_EFFECT, silent ? 0F : 1F));
     }
 
     @Override
@@ -3242,8 +3237,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
     }
     // Paper end
 
-    public Player.Spigot spigot()
-    {
+    public Player.Spigot spigot() {
         return this.spigot;
     }
     // Spigot end
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index 160115bf8a153ff981ba308599d22c4c08026fb6..b25e0271365519e5941dbc24af85143f04007095 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -1,114 +1,101 @@
 package org.spigotmc;
 
-import java.io.File;
-import java.util.List;
+import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
+import net.kyori.adventure.text.Component;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.Bukkit;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
-public class RestartCommand extends Command
-{
+import java.io.File;
+
+public class RestartCommand extends Command {
 
-    public RestartCommand(String name)
-    {
-        super( name );
+    public RestartCommand(String name) {
+        super(name);
         this.description = "Restarts the server";
         this.usageMessage = "/restart";
-        this.setPermission( "bukkit.command.restart" );
+        this.setPermission("bukkit.command.restart");
     }
 
     @Override
-    public boolean execute(CommandSender sender, String currentAlias, String[] args)
-    {
-        if ( testPermission( sender ) )
-        {
-            MinecraftServer.getServer().processQueue.add( new Runnable()
-            {
+    public boolean execute(CommandSender sender, String currentAlias, String[] args) {
+        if (testPermission(sender)) {
+            MinecraftServer.getServer().processQueue.add(new Runnable() {
                 @Override
-                public void run()
-                {
+                public void run() {
                     RestartCommand.restart();
                 }
-            } );
+            });
         }
         return true;
     }
 
-    public static void restart()
-    {
-        RestartCommand.restart( SpigotConfig.restartScript );
+    public static void restart() {
+        RestartCommand.restart(SpigotConfig.restartScript);
     }
 
-    private static void restart(final String restartScript)
-    {
+    private static void restart(final String restartScript) {
         AsyncCatcher.enabled = false; // Disable async catcher incase it interferes with us
         org.spigotmc.AsyncCatcher.shuttingDown = true; // Paper
-        try
-        {
+        try {
             // Paper - extract method and cleanup
-            boolean isRestarting = addShutdownHook( restartScript );
-            if ( isRestarting )
-            {
-                System.out.println( "Attempting to restart with " + SpigotConfig.restartScript );
-            } else
-            {
-                System.out.println( "Startup script '" + SpigotConfig.restartScript + "' does not exist! Stopping server." );
+            boolean isRestarting = addShutdownHook(restartScript);
+            if (isRestarting) {
+                System.out.println("Attempting to restart with " + SpigotConfig.restartScript);
+            } else {
+                System.out.println("Startup script '" + SpigotConfig.restartScript + "' does not exist! Stopping server.");
             }
             // Stop the watchdog
             WatchdogThread.doStop();
 
-            shutdownServer( isRestarting );
+            shutdownServer(isRestarting);
             // Paper end
-        } catch ( Exception ex )
-        {
+        } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
 
     // Paper start - sync copied from above with minor changes, async added
-    private static void shutdownServer(boolean isRestarting)
-    {
-        if ( MinecraftServer.getServer().isSameThread() )
-        {
+    private static void shutdownServer(boolean isRestarting) {
+        if (MinecraftServer.getServer().isSameThread()) {
+            // KissenPaper start
+            KissenLocalizationImplementation kissenLocalizationImplementation = Bukkit.getKissen()
+                    .getImplementation(KissenLocalizationImplementation.class);
             // Kick all players
-            for ( ServerPlayer p : com.google.common.collect.ImmutableList.copyOf( MinecraftServer.getServer().getPlayerList().players ) )
-            {
-                p.connection.disconnect(SpigotConfig.restartMessage, org.bukkit.event.player.PlayerKickEvent.Cause.RESTART_COMMAND); // Paper - kick event reason (cause is never used))
+            for (ServerPlayer p : com.google.common.collect.ImmutableList.copyOf(MinecraftServer.getServer()
+                    .getPlayerList().players)) {
+                Component restartMessage = kissenLocalizationImplementation.translate("spigot.restart", p.getBukkitEntity()
+                        .getCurrentLocale());
+                p.connection.disconnect(/* KissenPaper */ restartMessage /* SpigotConfig.restartMessage */, org.bukkit.event.player.PlayerKickEvent.Cause.RESTART_COMMAND); // Paper - kick event reason (cause is never used))
             }
+            // KissenPaper end
             // Give the socket a chance to send the packets
-            try
-            {
-                Thread.sleep( 100 );
-            } catch ( InterruptedException ex )
-            {
+            try {
+                Thread.sleep(100);
+            } catch (InterruptedException ex) {
             }
 
             closeSocket();
 
             // Actually shutdown
-            try
-            {
+            try {
                 MinecraftServer.getServer().close(); // calls stop()
-            } catch ( Throwable t )
-            {
+            } catch (Throwable t) {
             }
 
             // Actually stop the JVM
-            System.exit( 0 );
+            System.exit(0);
 
-        } else
-        {
+        } else {
             // Mark the server to shutdown at the end of the tick
-            MinecraftServer.getServer().safeShutdown( false, isRestarting );
+            MinecraftServer.getServer().safeShutdown(false, isRestarting);
 
             // wait 10 seconds to see if we're actually going to try shutdown
-            try
-            {
-                Thread.sleep( 10000 );
-            }
-            catch (InterruptedException ignored)
-            {
+            try {
+                Thread.sleep(10000);
+            } catch (InterruptedException ignored) {
             }
 
             // Check if we've actually hit a state where the server is going to safely shutdown
@@ -117,60 +104,48 @@ public class RestartCommand extends Command
 
             // If the server hasn't stopped by now, assume worse case and kill
             closeSocket();
-            System.exit( 0 );
+            System.exit(0);
         }
     }
     // Paper end
 
     // Paper - Split from moved code
-    private static void closeSocket()
-    {
+    private static void closeSocket() {
         // Close the socket so we can rebind with the new process
         MinecraftServer.getServer().getConnection().stop();
 
         // Give time for it to kick in
-        try
-        {
-            Thread.sleep( 100 );
-        } catch ( InterruptedException ex )
-        {
+        try {
+            Thread.sleep(100);
+        } catch (InterruptedException ex) {
         }
     }
     // Paper end
 
     // Paper start - copied from above and modified to return if the hook registered
-    public static boolean addShutdownHook(String restartScript)
-    {
-        String[] split = restartScript.split( " " );
-        if ( split.length > 0 && new File( split[0] ).isFile() )
-        {
-            Thread shutdownHook = new Thread()
-            {
+    public static boolean addShutdownHook(String restartScript) {
+        String[] split = restartScript.split(" ");
+        if (split.length > 0 && new File(split[0]).isFile()) {
+            Thread shutdownHook = new Thread() {
                 @Override
-                public void run()
-                {
-                    try
-                    {
-                        String os = System.getProperty( "os.name" ).toLowerCase(java.util.Locale.ENGLISH);
-                        if ( os.contains( "win" ) )
-                        {
-                            Runtime.getRuntime().exec( "cmd /c start " + restartScript );
-                        } else
-                        {
-                            Runtime.getRuntime().exec( "sh " + restartScript );
+                public void run() {
+                    try {
+                        String os = System.getProperty("os.name").toLowerCase(java.util.Locale.ENGLISH);
+                        if (os.contains("win")) {
+                            Runtime.getRuntime().exec("cmd /c start " + restartScript);
+                        } else {
+                            Runtime.getRuntime().exec("sh " + restartScript);
                         }
-                    } catch ( Exception e )
-                    {
+                    } catch (Exception e) {
                         e.printStackTrace();
                     }
                 }
             };
 
-            shutdownHook.setDaemon( true );
-            Runtime.getRuntime().addShutdownHook( shutdownHook );
+            shutdownHook.setDaemon(true);
+            Runtime.getRuntime().addShutdownHook(shutdownHook);
             return true;
-        } else
-        {
+        } else {
             return false;
         }
     }
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 798627de98b71ef1e87738b02132dd8bf1135aa1..5e0c6b3b166e8d58da0773458f09530a537cfa42 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -1,22 +1,6 @@
 package org.spigotmc;
 
 import com.google.common.base.Throwables;
-import java.io.File;
-import java.io.IOException;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.text.MessageFormat;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.logging.Level;
-
-import net.kissenpvp.core.base.KissenCore;
-import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
@@ -32,8 +16,15 @@ import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 
-public class SpigotConfig
-{
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.*;
+import java.util.logging.Level;
+
+public class SpigotConfig {
 
     private static File CONFIG_FILE;
     private static final String HEADER = "This is the main configuration file for Spigot.\n"
@@ -54,37 +45,31 @@ public class SpigotConfig
     /*========================================================================*/
     private static Metrics metrics;
 
-    public static void init(File configFile)
-    {
+    public static void init(File configFile) {
         SpigotConfig.CONFIG_FILE = configFile;
         SpigotConfig.config = new YamlConfiguration();
-        try
-        {
-            SpigotConfig.config.load( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-        } catch ( InvalidConfigurationException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not load spigot.yml, please correct your syntax errors", ex );
-            throw Throwables.propagate( ex );
+        try {
+            SpigotConfig.config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load spigot.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
         }
 
-        SpigotConfig.config.options().header( HEADER );
-        SpigotConfig.config.options().copyDefaults( true );
+        SpigotConfig.config.options().header(HEADER);
+        SpigotConfig.config.options().copyDefaults(true);
 
         SpigotConfig.commands = new HashMap<String, Command>();
-        SpigotConfig.commands.put( "spigot", new SpigotCommand( "spigot" ) );
+        SpigotConfig.commands.put("spigot", new SpigotCommand("spigot"));
 
-        SpigotConfig.version = SpigotConfig.getInt( "config-version", 12 );
-        SpigotConfig.set( "config-version", 12 );
-        SpigotConfig.readConfig( SpigotConfig.class, null );
+        SpigotConfig.version = SpigotConfig.getInt("config-version", 12);
+        SpigotConfig.set("config-version", 12);
+        SpigotConfig.readConfig(SpigotConfig.class, null);
     }
 
-    public static void registerCommands()
-    {
-        for ( Map.Entry<String, Command> entry : SpigotConfig.commands.entrySet() )
-        {
-            MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "Spigot", entry.getValue() );
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : SpigotConfig.commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Spigot", entry.getValue());
         }
 
         /* // Paper - Replace with our own
@@ -104,22 +89,16 @@ public class SpigotConfig
 
     public static void readConfig(Class<?> clazz, Object instance) // Paper - package-private -> public
     {
-        for ( Method method : clazz.getDeclaredMethods() )
-        {
-            if ( Modifier.isPrivate( method.getModifiers() ) )
-            {
-                if ( method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE )
-                {
-                    try
-                    {
-                        method.setAccessible( true );
-                        method.invoke( instance );
-                    } catch ( InvocationTargetException ex )
-                    {
-                        throw Throwables.propagate( ex.getCause() );
-                    } catch ( Exception ex )
-                    {
-                        Bukkit.getLogger().log( Level.SEVERE, "Error invoking " + method, ex );
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
                     }
                 }
             }
@@ -127,276 +106,244 @@ public class SpigotConfig
         // Paper start
         SpigotConfig.save();
     }
+
     public static void save() {
         // Paper end
-        try
-        {
-            SpigotConfig.config.save( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not save " + SpigotConfig.CONFIG_FILE, ex );
+        try {
+            SpigotConfig.config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + SpigotConfig.CONFIG_FILE, ex);
         }
     }
 
-    private static void set(String path, Object val)
-    {
-        SpigotConfig.config.set( path, val );
+    private static void set(String path, Object val) {
+        SpigotConfig.config.set(path, val);
     }
 
-    private static boolean getBoolean(String path, boolean def)
-    {
-        SpigotConfig.config.addDefault( path, def );
-        return SpigotConfig.config.getBoolean( path, SpigotConfig.config.getBoolean( path ) );
+    private static boolean getBoolean(String path, boolean def) {
+        SpigotConfig.config.addDefault(path, def);
+        return SpigotConfig.config.getBoolean(path, SpigotConfig.config.getBoolean(path));
     }
 
-    private static int getInt(String path, int def)
-    {
-        SpigotConfig.config.addDefault( path, def );
-        return SpigotConfig.config.getInt( path, SpigotConfig.config.getInt( path ) );
+    private static int getInt(String path, int def) {
+        SpigotConfig.config.addDefault(path, def);
+        return SpigotConfig.config.getInt(path, SpigotConfig.config.getInt(path));
     }
 
-    private static <T> List getList(String path, T def)
-    {
-        SpigotConfig.config.addDefault( path, def );
-        return (List<T>) SpigotConfig.config.getList( path, SpigotConfig.config.getList( path ) );
+    private static <T> List getList(String path, T def) {
+        SpigotConfig.config.addDefault(path, def);
+        return (List<T>) SpigotConfig.config.getList(path, SpigotConfig.config.getList(path));
     }
 
-    private static String getString(String path, String def)
-    {
-        SpigotConfig.config.addDefault( path, def );
-        return SpigotConfig.config.getString( path, SpigotConfig.config.getString( path ) );
+    private static String getString(String path, String def) {
+        SpigotConfig.config.addDefault(path, def);
+        return SpigotConfig.config.getString(path, SpigotConfig.config.getString(path));
     }
 
-    private static double getDouble(String path, double def)
-    {
-        SpigotConfig.config.addDefault( path, def );
-        return SpigotConfig.config.getDouble( path, SpigotConfig.config.getDouble( path ) );
+    private static double getDouble(String path, double def) {
+        SpigotConfig.config.addDefault(path, def);
+        return SpigotConfig.config.getDouble(path, SpigotConfig.config.getDouble(path));
     }
 
     public static boolean logCommands;
-    private static void logCommands()
-    {
-        SpigotConfig.logCommands = SpigotConfig.getBoolean( "commands.log", true );
+
+    private static void logCommands() {
+        SpigotConfig.logCommands = SpigotConfig.getBoolean("commands.log", true);
     }
 
     public static int tabComplete;
     public static boolean sendNamespaced;
-    private static void tabComplete()
-    {
-        if ( SpigotConfig.version < 6 )
-        {
-            boolean oldValue = SpigotConfig.getBoolean( "commands.tab-complete", true );
-            if ( oldValue )
-            {
-                SpigotConfig.set( "commands.tab-complete", 0 );
-            } else
-            {
-                SpigotConfig.set( "commands.tab-complete", -1 );
+
+    private static void tabComplete() {
+        if (SpigotConfig.version < 6) {
+            boolean oldValue = SpigotConfig.getBoolean("commands.tab-complete", true);
+            if (oldValue) {
+                SpigotConfig.set("commands.tab-complete", 0);
+            } else {
+                SpigotConfig.set("commands.tab-complete", -1);
             }
         }
-        SpigotConfig.tabComplete = SpigotConfig.getInt( "commands.tab-complete", 0 );
-        SpigotConfig.sendNamespaced = SpigotConfig.getBoolean( "commands.send-namespaced", true );
+        SpigotConfig.tabComplete = SpigotConfig.getInt("commands.tab-complete", 0);
+        SpigotConfig.sendNamespaced = SpigotConfig.getBoolean("commands.send-namespaced", true);
     }
 
-    public static String outdatedClientMessage = "Outdated client! Please use {0}";
-    public static String outdatedServerMessage = "Outdated server! I\'m still on {0}";
-    private static String transform(String s)
-    {
-        return ChatColor.translateAlternateColorCodes( '&', s ).replaceAll( "\\\\n", "\n" );
-    }
-    private static void messages()
-    {
-        if (SpigotConfig.version < 8)
-        {
-            SpigotConfig.set( "messages.outdated-client", SpigotConfig.outdatedClientMessage );
-            SpigotConfig.set( "messages.outdated-server", SpigotConfig.outdatedServerMessage );
-        }
+    //public static String outdatedClientMessage = "Outdated client! Please use {0}"; // KissenPaper - localized
+    //public static String outdatedServerMessage = "Outdated server! I\'m still on {0}"; // KissenPaper - localized
 
-        // KissenPaper start
-        KissenLocalizationImplementation kissenLocalizationImplementation = KissenCore.getInstance()
-                .getImplementation(KissenLocalizationImplementation.class);
+    private static String transform(String s) {
+        return ChatColor.translateAlternateColorCodes('&', s).replaceAll("\\\\n", "\n");
+    }
 
-        kissenLocalizationImplementation.register("messages.whitelist", new MessageFormat("You are not whitelisted on this server!"));
-        kissenLocalizationImplementation.register("messages.unknown-command", new MessageFormat("Unknown command. Type \"/help\" for help."));
-        kissenLocalizationImplementation.register("messages.server-full", new MessageFormat("The server is full!"));
-        kissenLocalizationImplementation.register("messages.outdated-client", new MessageFormat(SpigotConfig.outdatedClientMessage));
-        kissenLocalizationImplementation.register("messages.outdated-server", new MessageFormat(SpigotConfig.outdatedServerMessage));
-        // KissenPaper end
+    /*private static void messages() {
+        if (SpigotConfig.version < 8) {
+            SpigotConfig.set("messages.outdated-client", SpigotConfig.outdatedClientMessage);
+            SpigotConfig.set("messages.outdated-server", SpigotConfig.outdatedServerMessage);
+        }
 
-        SpigotConfig.outdatedClientMessage = SpigotConfig.transform( SpigotConfig.getString( "messages.outdated-client", SpigotConfig.outdatedClientMessage ) );
-        SpigotConfig.outdatedServerMessage = SpigotConfig.transform( SpigotConfig.getString( "messages.outdated-server", SpigotConfig.outdatedServerMessage ) );
-    }
+        SpigotConfig.outdatedClientMessage = SpigotConfig.transform(SpigotConfig.getString("messages.outdated-client", SpigotConfig.outdatedClientMessage));
+        SpigotConfig.outdatedServerMessage = SpigotConfig.transform(SpigotConfig.getString("messages.outdated-server", SpigotConfig.outdatedServerMessage));
+    }*/ // KissenPaper - localized
 
     public static int timeoutTime = 60;
     public static boolean restartOnCrash = true;
     public static String restartScript = "./start.sh";
-    public static String restartMessage;
-    private static void watchdog()
-    {
-        SpigotConfig.timeoutTime = SpigotConfig.getInt( "settings.timeout-time", SpigotConfig.timeoutTime );
-        SpigotConfig.restartOnCrash = SpigotConfig.getBoolean( "settings.restart-on-crash", SpigotConfig.restartOnCrash );
-        SpigotConfig.restartScript = SpigotConfig.getString( "settings.restart-script", SpigotConfig.restartScript );
-        SpigotConfig.restartMessage = SpigotConfig.transform( SpigotConfig.getString( "messages.restart", "Server is restarting" ) );
-        SpigotConfig.commands.put( "restart", new RestartCommand( "restart" ) );
+    // public static String restartMessage; // KissenPaper not used anymore
+
+    private static void watchdog() {
+        SpigotConfig.timeoutTime = SpigotConfig.getInt("settings.timeout-time", SpigotConfig.timeoutTime);
+        SpigotConfig.restartOnCrash = SpigotConfig.getBoolean("settings.restart-on-crash", SpigotConfig.restartOnCrash);
+        SpigotConfig.restartScript = SpigotConfig.getString("settings.restart-script", SpigotConfig.restartScript);
+        // SpigotConfig.restartMessage = SpigotConfig.transform(SpigotConfig.getString("messages.restart", "Server is restarting"));
+        // SpigotConfig.commands.put("restart", new RestartCommand("restart")); // KissenPaper - moved into locale system
         // WatchdogThread.doStart( timeoutTime, restartOnCrash ); // Paper - moved to after paper config initialization
     }
 
     public static boolean bungee;
+
     private static void bungee() {
-        if ( SpigotConfig.version < 4 )
-        {
-            SpigotConfig.set( "settings.bungeecord", false );
-            System.out.println( "Oudated config, disabling BungeeCord support!" );
+        if (SpigotConfig.version < 4) {
+            SpigotConfig.set("settings.bungeecord", false);
+            System.out.println("Oudated config, disabling BungeeCord support!");
         }
-        SpigotConfig.bungee = SpigotConfig.getBoolean( "settings.bungeecord", false );
+        SpigotConfig.bungee = SpigotConfig.getBoolean("settings.bungeecord", false);
     }
 
-    private static void nettyThreads()
-    {
-        int count = SpigotConfig.getInt( "settings.netty-threads", 4 );
-        System.setProperty( "io.netty.eventLoopThreads", Integer.toString( count ) );
-        Bukkit.getLogger().log( Level.INFO, "Using {0} threads for Netty based IO", count );
+    private static void nettyThreads() {
+        int count = SpigotConfig.getInt("settings.netty-threads", 4);
+        System.setProperty("io.netty.eventLoopThreads", Integer.toString(count));
+        Bukkit.getLogger().log(Level.INFO, "Using {0} threads for Netty based IO", count);
     }
 
     public static boolean disableStatSaving;
     public static Map<ResourceLocation, Integer> forcedStats = new HashMap<>();
-    private static void stats()
-    {
-        SpigotConfig.disableStatSaving = SpigotConfig.getBoolean( "stats.disable-saving", false );
 
-        if ( !SpigotConfig.config.contains( "stats.forced-stats" ) ) {
-            SpigotConfig.config.createSection( "stats.forced-stats" );
+    private static void stats() {
+        SpigotConfig.disableStatSaving = SpigotConfig.getBoolean("stats.disable-saving", false);
+
+        if (!SpigotConfig.config.contains("stats.forced-stats")) {
+            SpigotConfig.config.createSection("stats.forced-stats");
         }
 
-        ConfigurationSection section = SpigotConfig.config.getConfigurationSection( "stats.forced-stats" );
-        for ( String name : section.getKeys( true ) )
-        {
-            if ( section.isInt( name ) )
-            {
-                try
-                {
-                    ResourceLocation key = new ResourceLocation( name );
-                    if ( BuiltInRegistries.CUSTOM_STAT.get( key ) == null )
-                    {
+        ConfigurationSection section = SpigotConfig.config.getConfigurationSection("stats.forced-stats");
+        for (String name : section.getKeys(true)) {
+            if (section.isInt(name)) {
+                try {
+                    ResourceLocation key = new ResourceLocation(name);
+                    if (BuiltInRegistries.CUSTOM_STAT.get(key) == null) {
                         Bukkit.getLogger().log(Level.WARNING, "Ignoring non existent stats.forced-stats " + name);
                         continue;
                     }
-                    SpigotConfig.forcedStats.put( key, section.getInt( name ) );
-                } catch (Exception ex)
-                {
+                    SpigotConfig.forcedStats.put(key, section.getInt(name));
+                } catch (Exception ex) {
                     Bukkit.getLogger().log(Level.WARNING, "Ignoring invalid stats.forced-stats " + name);
                 }
             }
         }
     }
 
-    private static void tpsCommand()
-    {
-        SpigotConfig.commands.put( "tps", new TicksPerSecondCommand( "tps" ) );
+    private static void tpsCommand() {
+        SpigotConfig.commands.put("tps", new TicksPerSecondCommand("tps"));
     }
 
     public static int playerSample;
-    private static void playerSample()
-    {
-        SpigotConfig.playerSample = Math.max( SpigotConfig.getInt( "settings.sample-count", 12 ), 0 ); // Paper - Avoid negative counts
-        Bukkit.getLogger().log( Level.INFO, "Server Ping Player Sample Count: {0}", playerSample ); // Paper - Use logger
+
+    private static void playerSample() {
+        SpigotConfig.playerSample = Math.max(SpigotConfig.getInt("settings.sample-count", 12), 0); // Paper - Avoid negative counts
+        Bukkit.getLogger().log(Level.INFO, "Server Ping Player Sample Count: {0}", playerSample); // Paper - Use logger
     }
 
     public static int playerShuffle;
-    private static void playerShuffle()
-    {
-        SpigotConfig.playerShuffle = SpigotConfig.getInt( "settings.player-shuffle", 0 );
+
+    private static void playerShuffle() {
+        SpigotConfig.playerShuffle = SpigotConfig.getInt("settings.player-shuffle", 0);
     }
 
     public static List<String> spamExclusions;
-    private static void spamExclusions()
-    {
-        SpigotConfig.spamExclusions = SpigotConfig.getList( "commands.spam-exclusions", Arrays.asList( new String[]
-        {
-                "/skill"
-        } ) );
+
+    private static void spamExclusions() {
+        SpigotConfig.spamExclusions = SpigotConfig.getList("commands.spam-exclusions", Arrays.asList(new String[]
+                {
+                        "/skill"
+                }));
     }
 
     public static boolean silentCommandBlocks;
-    private static void silentCommandBlocks()
-    {
-        SpigotConfig.silentCommandBlocks = SpigotConfig.getBoolean( "commands.silent-commandblock-console", false );
+
+    private static void silentCommandBlocks() {
+        SpigotConfig.silentCommandBlocks = SpigotConfig.getBoolean("commands.silent-commandblock-console", false);
     }
 
     public static Set<String> replaceCommands;
-    private static void replaceCommands()
-    {
-        if ( SpigotConfig.config.contains( "replace-commands" ) )
-        {
-            SpigotConfig.set( "commands.replace-commands", SpigotConfig.config.getStringList( "replace-commands" ) );
-            SpigotConfig.config.set( "replace-commands", null );
+
+    private static void replaceCommands() {
+        if (SpigotConfig.config.contains("replace-commands")) {
+            SpigotConfig.set("commands.replace-commands", SpigotConfig.config.getStringList("replace-commands"));
+            SpigotConfig.config.set("replace-commands", null);
         }
-        SpigotConfig.replaceCommands = new HashSet<String>( (List<String>) SpigotConfig.getList( "commands.replace-commands",
-                Arrays.asList( "setblock", "summon", "testforblock", "tellraw" ) ) );
+        SpigotConfig.replaceCommands = new HashSet<String>((List<String>) SpigotConfig.getList("commands.replace-commands",
+                Arrays.asList("setblock", "summon", "testforblock", "tellraw")));
     }
 
     public static int userCacheCap;
-    private static void userCacheCap()
-    {
-        SpigotConfig.userCacheCap = SpigotConfig.getInt( "settings.user-cache-size", 1000 );
+
+    private static void userCacheCap() {
+        SpigotConfig.userCacheCap = SpigotConfig.getInt("settings.user-cache-size", 1000);
     }
 
     public static boolean saveUserCacheOnStopOnly;
-    private static void saveUserCacheOnStopOnly()
-    {
-        SpigotConfig.saveUserCacheOnStopOnly = SpigotConfig.getBoolean( "settings.save-user-cache-on-stop-only", false );
+
+    private static void saveUserCacheOnStopOnly() {
+        SpigotConfig.saveUserCacheOnStopOnly = SpigotConfig.getBoolean("settings.save-user-cache-on-stop-only", false);
     }
 
     public static double movedWronglyThreshold;
-    private static void movedWronglyThreshold()
-    {
-        SpigotConfig.movedWronglyThreshold = SpigotConfig.getDouble( "settings.moved-wrongly-threshold", 0.0625D );
+
+    private static void movedWronglyThreshold() {
+        SpigotConfig.movedWronglyThreshold = SpigotConfig.getDouble("settings.moved-wrongly-threshold", 0.0625D);
     }
 
     public static double movedTooQuicklyMultiplier;
-    private static void movedTooQuicklyMultiplier()
-    {
-        SpigotConfig.movedTooQuicklyMultiplier = SpigotConfig.getDouble( "settings.moved-too-quickly-multiplier", 10.0D );
+
+    private static void movedTooQuicklyMultiplier() {
+        SpigotConfig.movedTooQuicklyMultiplier = SpigotConfig.getDouble("settings.moved-too-quickly-multiplier", 10.0D);
     }
 
     public static double maxHealth = 2048;
     public static double movementSpeed = 2048;
     public static double attackDamage = 2048;
-    private static void attributeMaxes()
-    {
-        SpigotConfig.maxHealth = SpigotConfig.getDouble( "settings.attribute.maxHealth.max", SpigotConfig.maxHealth );
-        ( (RangedAttribute) Attributes.MAX_HEALTH ).maxValue = SpigotConfig.maxHealth;
-        SpigotConfig.movementSpeed = SpigotConfig.getDouble( "settings.attribute.movementSpeed.max", SpigotConfig.movementSpeed );
-        ( (RangedAttribute) Attributes.MOVEMENT_SPEED ).maxValue = SpigotConfig.movementSpeed;
-        SpigotConfig.attackDamage = SpigotConfig.getDouble( "settings.attribute.attackDamage.max", SpigotConfig.attackDamage );
-        ( (RangedAttribute) Attributes.ATTACK_DAMAGE ).maxValue = SpigotConfig.attackDamage;
+
+    private static void attributeMaxes() {
+        SpigotConfig.maxHealth = SpigotConfig.getDouble("settings.attribute.maxHealth.max", SpigotConfig.maxHealth);
+        ((RangedAttribute) Attributes.MAX_HEALTH).maxValue = SpigotConfig.maxHealth;
+        SpigotConfig.movementSpeed = SpigotConfig.getDouble("settings.attribute.movementSpeed.max", SpigotConfig.movementSpeed);
+        ((RangedAttribute) Attributes.MOVEMENT_SPEED).maxValue = SpigotConfig.movementSpeed;
+        SpigotConfig.attackDamage = SpigotConfig.getDouble("settings.attribute.attackDamage.max", SpigotConfig.attackDamage);
+        ((RangedAttribute) Attributes.ATTACK_DAMAGE).maxValue = SpigotConfig.attackDamage;
     }
 
     public static boolean debug;
-    private static void debug()
-    {
-        SpigotConfig.debug = SpigotConfig.getBoolean( "settings.debug", false );
 
-        if ( SpigotConfig.debug && !LogManager.getRootLogger().isTraceEnabled() )
-        {
+    private static void debug() {
+        SpigotConfig.debug = SpigotConfig.getBoolean("settings.debug", false);
+
+        if (SpigotConfig.debug && !LogManager.getRootLogger().isTraceEnabled()) {
             // Enable debug logging
-            LoggerContext ctx = (LoggerContext) LogManager.getContext( false );
+            LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
             Configuration conf = ctx.getConfiguration();
-            conf.getLoggerConfig( LogManager.ROOT_LOGGER_NAME ).setLevel( org.apache.logging.log4j.Level.ALL );
-            ctx.updateLoggers( conf );
+            conf.getLoggerConfig(LogManager.ROOT_LOGGER_NAME).setLevel(org.apache.logging.log4j.Level.ALL);
+            ctx.updateLoggers(conf);
         }
 
-        if ( LogManager.getRootLogger().isTraceEnabled() )
-        {
-            Bukkit.getLogger().info( "Debug logging is enabled" );
-        } else
-        {
+        if (LogManager.getRootLogger().isTraceEnabled()) {
+            Bukkit.getLogger().info("Debug logging is enabled");
+        } else {
             // Bukkit.getLogger().info( "Debug logging is disabled" ); // Paper - Don't log if debug logging isn't enabled.
         }
     }
 
     public static boolean disableAdvancementSaving;
     public static List<String> disabledAdvancements;
+
     private static void disabledAdvancements() {
         SpigotConfig.disableAdvancementSaving = SpigotConfig.getBoolean("advancements.disable-saving", false);
         SpigotConfig.disabledAdvancements = SpigotConfig.getList("advancements.disabled", Arrays.asList(new String[]{"minecraft:story/disabled"}));
@@ -404,17 +351,20 @@ public class SpigotConfig
 
     public static boolean logVillagerDeaths;
     public static boolean logNamedDeaths;
+
     private static void logDeaths() {
         SpigotConfig.logVillagerDeaths = SpigotConfig.getBoolean("settings.log-villager-deaths", true);
         SpigotConfig.logNamedDeaths = SpigotConfig.getBoolean("settings.log-named-deaths", true);
     }
 
     public static boolean disablePlayerDataSaving;
+
     private static void disablePlayerDataSaving() {
         SpigotConfig.disablePlayerDataSaving = SpigotConfig.getBoolean("players.disable-saving", false);
     }
 
     public static boolean belowZeroGenerationInExistingChunks;
+
     private static void belowZeroGenerationInExistingChunks() {
         SpigotConfig.belowZeroGenerationInExistingChunks = SpigotConfig.getBoolean("world-settings.default.below-zero-generation-in-existing-chunks", true);
     }
diff --git a/src/main/resources/configurations/bukkit.yml b/src/main/resources/configurations/bukkit.yml
index eef7c125b2689f29cae5464659eacdf33f5695b2..b4f13ebffbcab14a6ba53e92f0df0d3e1344d984 100644
--- a/src/main/resources/configurations/bukkit.yml
+++ b/src/main/resources/configurations/bukkit.yml
@@ -12,34 +12,33 @@
 
 
 settings:
-    allow-end: true
-    warn-on-overload: true
-    permissions-file: permissions.yml
-    update-folder: update
-    plugin-profiling: false
-    connection-throttle: 4000
-    query-plugins: true
-    deprecated-verbose: default
-    shutdown-message: Server closed
-    minimum-api: none
-    use-map-color-cache: true
+  allow-end: true
+  warn-on-overload: true
+  permissions-file: permissions.yml
+  update-folder: update
+  plugin-profiling: false
+  connection-throttle: 4000
+  query-plugins: true
+  deprecated-verbose: default
+  minimum-api: none
+  use-map-color-cache: true
 spawn-limits:
-    monsters: 70
-    animals: 10
-    water-animals: 5
-    water-ambient: 20
-    water-underground-creature: 5
-    axolotls: 5
-    ambient: 15
+  monsters: 70
+  animals: 10
+  water-animals: 5
+  water-ambient: 20
+  water-underground-creature: 5
+  axolotls: 5
+  ambient: 15
 chunk-gc:
-    period-in-ticks: 600
+  period-in-ticks: 600
 ticks-per:
-    animal-spawns: 400
-    monster-spawns: 1
-    water-spawns: 1
-    water-ambient-spawns: 1
-    water-underground-creature-spawns: 1
-    axolotl-spawns: 1
-    ambient-spawns: 1
-    autosave: 6000
+  animal-spawns: 400
+  monster-spawns: 1
+  water-spawns: 1
+  water-ambient-spawns: 1
+  water-underground-creature-spawns: 1
+  axolotl-spawns: 1
+  ambient-spawns: 1
+  autosave: 6000
 aliases: now-in-commands.yml
diff --git a/src/main/resources/configurations/commands.yml b/src/main/resources/configurations/commands.yml
index 18f54571200e2eca09a39b88f170fe7b99d8618f..2ed82bd2237e64167f3d7489a915b3870482d5cc 100644
--- a/src/main/resources/configurations/commands.yml
+++ b/src/main/resources/configurations/commands.yml
@@ -9,8 +9,6 @@
 # Forums: https://www.spigotmc.org/
 # Bug tracker: https://www.spigotmc.org/go/bugs
 
-command-block-overrides: []
+command-block-overrides: [ ]
 ignore-vanilla-permissions: false
-aliases:
-    icanhasbukkit:
-      - "version $1-"
+aliases: [ ]
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index 675cd61221e807aadf28322b46c3daa1370241b5..eb9b9174a87f18ce7de35ad4e4dce802902e6bc0 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -2,30 +2,32 @@
 <Configuration status="WARN" packages="com.mojang.util" shutdownHook="disable">
     <Appenders>
         <Queue name="ServerGuiConsole">
-            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss} %level] [%thread]: %msg%n"/>
         </Queue>
         <TerminalConsole name="TerminalConsole">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%logger] %msg%n%xEx{full}}">
+                <LoggerNamePatternSelector
+                        defaultPattern="%highlightError{[%d{HH:mm:ss} %level] [%thread]: [%logger] %msg%n%xEx{full}}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
                     <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
-                                  pattern="%highlightError{[%d{HH:mm:ss} %level]: %msg%n%xEx{full}}" />
+                                  pattern="%highlightError{[%d{HH:mm:ss} %level] [%thread]: %msg%n%xEx{full}}"/>
                 </LoggerNamePatternSelector>
             </PatternLayout>
         </TerminalConsole>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %stripAnsi{%msg}%n%xEx{full}">
+                <LoggerNamePatternSelector
+                        defaultPattern="[%d{HH:mm:ss}] [%t/%level] [%thread]: [%logger] %stripAnsi{%msg}%n%xEx{full}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
                     <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
-                                  pattern="[%d{HH:mm:ss}] [%t/%level]: %stripAnsi{%msg}%n%xEx{full}" />
+                                  pattern="[%d{HH:mm:ss}] [%t/%level] [%thread]: %stripAnsi{%msg}%n%xEx{full}"/>
                 </LoggerNamePatternSelector>
             </PatternLayout>
             <Policies>
-                <TimeBasedTriggeringPolicy />
-                <OnStartupTriggeringPolicy />
+                <TimeBasedTriggeringPolicy/>
+                <OnStartupTriggeringPolicy/>
             </Policies>
             <DefaultRolloverStrategy max="1000"/>
         </RollingRandomAccessFile>
@@ -33,11 +35,11 @@
             <AppenderRef ref="rewrite"/>
         </Async>
         <Rewrite name="rewrite">
-            <StacktraceDeobfuscatingRewritePolicy />
+            <StacktraceDeobfuscatingRewritePolicy/>
             <AppenderRef ref="rewrite2"/>
         </Rewrite>
         <Rewrite name="rewrite2">
-            <ExtraClassInfoRewritePolicy />
+            <ExtraClassInfoRewritePolicy/>
             <AppenderRef ref="File"/>
             <AppenderRef ref="TerminalConsole" level="info"/>
             <AppenderRef ref="ServerGuiConsole" level="info"/>
@@ -46,7 +48,7 @@
     <Loggers>
         <Root level="info">
             <filters>
-                <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL" />
+                <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL"/>
             </filters>
             <AppenderRef ref="Async"/>
         </Root>
