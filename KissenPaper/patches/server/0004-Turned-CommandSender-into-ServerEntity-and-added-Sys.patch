From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Fri, 11 Aug 2023 02:03:11 +0200
Subject: [PATCH] Turned CommandSender into ServerEntity and added
 SystemMessageEvent

Signed-off-by: Groldi <chniucg@gmail.com>

diff --git a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
index 774fb97912f766589f3548f659618ad554e0503f..6c218f12914324a2beaedfcb82756cf2f9bcebd1 100644
--- a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
+++ b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
@@ -4,17 +4,6 @@ import io.papermc.paper.chat.ChatRenderer;
 import io.papermc.paper.event.player.AbstractChatEvent;
 import io.papermc.paper.event.player.AsyncChatEvent;
 import io.papermc.paper.event.player.ChatEvent;
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.util.BitSet;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-import java.util.concurrent.ExecutionException;
-import java.util.function.Function;
 import net.kyori.adventure.audience.Audience;
 import net.kyori.adventure.audience.ForwardingAudience;
 import net.kyori.adventure.key.Key;
@@ -44,6 +33,12 @@ import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
 
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.*;
+import java.util.concurrent.ExecutionException;
+import java.util.function.Function;
+
 import static net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection;
 
 @DefaultQualifier(NonNull.class)
@@ -110,29 +105,29 @@ public final class ChatProcessor {
                 });
                 this.readLegacyModifications(se.getMessage(), se.getFormat(), se.getPlayer());
                 this.processModern(
-                    this.modernRenderer(se.getFormat()),
-                    this.viewersFromLegacy(se.getRecipients()),
-                    this.modernMessage(se.getMessage()),
-                    se.getPlayer(),
-                    se.isCancelled()
+                        this.modernRenderer(se.getFormat()),
+                        this.viewersFromLegacy(se.getRecipients()),
+                        this.modernMessage(se.getMessage()),
+                        se.getPlayer(),
+                        se.isCancelled()
                 );
             } else {
                 this.readLegacyModifications(ae.getMessage(), ae.getFormat(), ae.getPlayer());
                 this.processModern(
-                    this.modernRenderer(ae.getFormat()),
-                    this.viewersFromLegacy(ae.getRecipients()),
-                    this.modernMessage(ae.getMessage()),
-                    ae.getPlayer(),
-                    ae.isCancelled()
+                        this.modernRenderer(ae.getFormat()),
+                        this.viewersFromLegacy(ae.getRecipients()),
+                        this.modernMessage(ae.getMessage()),
+                        ae.getPlayer(),
+                        ae.isCancelled()
                 );
             }
         } else {
             this.processModern(
-                defaultRenderer(),
-                new LazyChatAudienceSet(this.server),
-                this.paper$originalMessage,
-                this.player.getBukkitEntity(),
-                false
+                    defaultRenderer(),
+                    new LazyChatAudienceSet(this.server),
+                    this.paper$originalMessage,
+                    this.player.getBukkitEntity(),
+                    false
             );
         }
     }
@@ -198,7 +193,8 @@ public final class ChatProcessor {
 
     private void readModernModifications(final AbstractChatEvent chatEvent, final ChatRenderer originalRenderer) {
         if (this.message.unsignedContent() != null) {
-            this.flags.set(MESSAGE_CHANGED, !chatEvent.message().equals(this.message.requireResult().message().component()));
+            this.flags.set(MESSAGE_CHANGED, !chatEvent.message()
+                    .equals(this.message.requireResult().message().component()));
         } else {
             this.flags.set(MESSAGE_CHANGED, !chatEvent.message().equals(this.paper$originalMessage));
         }
@@ -220,7 +216,8 @@ public final class ChatProcessor {
 
         final Set<Audience> viewers = event.viewers();
         final ResourceKey<ChatType> chatTypeKey = renderer instanceof ChatRenderer.Default ? ChatType.CHAT : ChatType.RAW;
-        final ChatType.Bound chatType = ChatType.bind(chatTypeKey, this.player.level().registryAccess(), PaperAdventure.asVanilla(displayName(player)));
+        final ChatType.Bound chatType = ChatType.bind(chatTypeKey, this.player.level()
+                .registryAccess(), PaperAdventure.asVanilla(displayName(player)));
 
         OutgoingChat outgoingChat = viewers instanceof LazyChatAudienceSet lazyAudienceSet && lazyAudienceSet.isLazy() ? new ServerOutgoingChat() : new ViewersOutgoingChat();
         /* if (this.flags.get(FORCE_PREVIEW_USE)) { // TODO (future, maybe?)
@@ -258,17 +255,20 @@ public final class ChatProcessor {
     final class ServerOutgoingChat implements OutgoingChat {
         @Override
         public void sendFormatChangedViewerAware(CraftPlayer player, Component displayName, Component message, ChatRenderer renderer, Set<Audience> viewers, ChatType.Bound chatType) {
-            ChatProcessor.this.server.getPlayerList().broadcastChatMessage(ChatProcessor.this.message, ChatProcessor.this.player, chatType, viewer -> PaperAdventure.asVanilla(renderer.render(player, displayName, message, viewer)));
+            ChatProcessor.this.server.getPlayerList()
+                    .broadcastChatMessage(ChatProcessor.this.message, ChatProcessor.this.player, chatType, viewer -> PaperAdventure.asVanilla(renderer.render(player, displayName, message, viewer)));
         }
 
         @Override
         public void sendMessageChanged(CraftPlayer player, net.minecraft.network.chat.Component renderedMessage, Set<Audience> viewers, ChatType.Bound chatType) {
-            ChatProcessor.this.server.getPlayerList().broadcastChatMessage(ChatProcessor.this.message.withUnsignedContent(renderedMessage), ChatProcessor.this.player, chatType);
+            ChatProcessor.this.server.getPlayerList()
+                    .broadcastChatMessage(ChatProcessor.this.message.withUnsignedContent(renderedMessage), ChatProcessor.this.player, chatType);
         }
 
         @Override
         public void sendOriginal(CraftPlayer player, Set<Audience> viewers, ChatType.Bound chatType) {
-            ChatProcessor.this.server.getPlayerList().broadcastChatMessage(ChatProcessor.this.message, ChatProcessor.this.player, chatType);
+            ChatProcessor.this.server.getPlayerList()
+                    .broadcastChatMessage(ChatProcessor.this.message, ChatProcessor.this.player, chatType);
         }
     }
 
@@ -316,16 +316,18 @@ public final class ChatProcessor {
 
         private net.kyori.adventure.chat.ChatType.Bound adventure(ChatType.Bound chatType) {
             final String stringKey = Objects.requireNonNull(
-                ChatProcessor.this.server.registryAccess().registryOrThrow(Registries.CHAT_TYPE).getKey(chatType.chatType()),
-                () -> "No key for '%s' in CHAT_TYPE registry.".formatted(chatType)
+                    ChatProcessor.this.server.registryAccess()
+                            .registryOrThrow(Registries.CHAT_TYPE)
+                            .getKey(chatType.chatType()),
+                    () -> "No key for '%s' in CHAT_TYPE registry.".formatted(chatType)
             ).toString();
             net.kyori.adventure.chat.@Nullable ChatType adventure = BUILT_IN_CHAT_TYPES.get(stringKey);
             if (adventure == null) {
                 adventure = net.kyori.adventure.chat.ChatType.chatType(Key.key(stringKey));
             }
             return adventure.bind(
-                PaperAdventure.asAdventure(chatType.name()),
-                PaperAdventure.asAdventure(chatType.targetName())
+                    PaperAdventure.asAdventure(chatType.name()),
+                    PaperAdventure.asAdventure(chatType.targetName())
             );
         }
 
@@ -343,7 +345,8 @@ public final class ChatProcessor {
             if (viewer instanceof ConsoleCommandSender) {
                 this.sendToServer(chatType, msgFunction);
             } else if (viewer instanceof CraftPlayer craftPlayer) {
-                craftPlayer.getHandle().sendChatMessage(ChatProcessor.this.outgoing, ChatProcessor.this.player.shouldFilterMessageTo(craftPlayer.getHandle()), chatType, Optionull.map(msgFunction, f -> f.apply(viewer)));
+                craftPlayer.getHandle()
+                        .sendChatMessage(ChatProcessor.this.outgoing, ChatProcessor.this.player.shouldFilterMessageTo(craftPlayer.getHandle()), chatType, Optionull.map(msgFunction, f -> f.apply(viewer)));
             } else if (viewer instanceof ForwardingAudience.Single single) {
                 this.sendNative(single.audience(), chatType, msgFunction);
             } else {
@@ -353,7 +356,8 @@ public final class ChatProcessor {
 
         private void sendToServer(final ChatType.Bound chatType, final @Nullable Function<Audience, net.minecraft.network.chat.Component> msgFunction) {
             final PlayerChatMessage toConsoleMessage = msgFunction == null ? ChatProcessor.this.message : ChatProcessor.this.message.withUnsignedContent(msgFunction.apply(ChatProcessor.this.server.console));
-            ChatProcessor.this.server.logChatMessage(toConsoleMessage.decoratedContent(), chatType, ChatProcessor.this.server.getPlayerList().verifyChatTrusted(toConsoleMessage) ? null : "Not Secure");
+            ChatProcessor.this.server.logChatMessage(toConsoleMessage.decoratedContent(), chatType, ChatProcessor.this.server.getPlayerList()
+                    .verifyChatTrusted(toConsoleMessage) ? null : "Not Secure");
         }
     }
 
@@ -367,14 +371,16 @@ public final class ChatProcessor {
     }
 
     static String legacyDisplayName(final CraftPlayer player) {
-        if (((org.bukkit.craftbukkit.CraftWorld) player.getWorld()).getHandle().paperConfig().scoreboards.useVanillaWorldScoreboardNameColoring) {
+        if (((org.bukkit.craftbukkit.CraftWorld) player.getWorld()).getHandle()
+                .paperConfig().scoreboards.useVanillaWorldScoreboardNameColoring) {
             return legacySection().serialize(player.teamDisplayName()) + ChatFormatting.RESET;
         }
         return player.getDisplayName();
     }
 
     static Component displayName(final CraftPlayer player) {
-        if (((CraftWorld) player.getWorld()).getHandle().paperConfig().scoreboards.useVanillaWorldScoreboardNameColoring) {
+        if (((CraftWorld) player.getWorld()).getHandle()
+                .paperConfig().scoreboards.useVanillaWorldScoreboardNameColoring) {
             return player.teamDisplayName();
         }
         return player.displayName();
diff --git a/src/main/java/io/papermc/paper/commands/FeedbackForwardingSender.java b/src/main/java/io/papermc/paper/commands/FeedbackForwardingSender.java
index e3a5f1ec376319bdfda87fa27ae217bff3914292..4b6128174e53a2026e431352b802a7a2fe3ef029 100644
--- a/src/main/java/io/papermc/paper/commands/FeedbackForwardingSender.java
+++ b/src/main/java/io/papermc/paper/commands/FeedbackForwardingSender.java
@@ -1,8 +1,6 @@
 package io.papermc.paper.commands;
 
 import io.papermc.paper.adventure.PaperAdventure;
-import java.util.UUID;
-import java.util.function.Consumer;
 import net.kyori.adventure.audience.MessageType;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.Component;
@@ -18,6 +16,9 @@ import org.bukkit.craftbukkit.command.ServerCommandSender;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.function.Consumer;
 
 @DefaultQualifier(NonNull.class)
 public final class FeedbackForwardingSender extends ServerCommandSender {
@@ -53,7 +54,7 @@ public final class FeedbackForwardingSender extends ServerCommandSender {
     }
 
     @Override
-    public Component name() {
+    public @NotNull Component name() {
         return Component.text(this.getName());
     }
 
@@ -70,15 +71,15 @@ public final class FeedbackForwardingSender extends ServerCommandSender {
     public CommandSourceStack asVanilla() {
         final @Nullable ServerLevel overworld = this.server.getServer().overworld();
         return new CommandSourceStack(
-            new Source(this),
-            overworld == null ? Vec3.ZERO : Vec3.atLowerCornerOf(overworld.getSharedSpawnPos()),
-            Vec2.ZERO,
-            overworld,
-            4,
-            this.getName(),
-            net.minecraft.network.chat.Component.literal(this.getName()),
-            this.server.getServer(),
-            null
+                new Source(this),
+                overworld == null ? Vec3.ZERO : Vec3.atLowerCornerOf(overworld.getSharedSpawnPos()),
+                Vec2.ZERO,
+                overworld,
+                4,
+                this.getName(),
+                net.minecraft.network.chat.Component.literal(this.getName()),
+                this.server.getServer(),
+                null
         );
     }
 
diff --git a/src/main/java/net/kissenpvp/paper/command/command/KissenPaperAbstractCommand.java b/src/main/java/net/kissenpvp/paper/command/command/KissenPaperAbstractCommand.java
index 015bd3b66d2f37ce3aa8dacb97895d7d6276ba53..e0f0607a39d39f8c24308aa9a6045c22c10c9d4f 100644
--- a/src/main/java/net/kissenpvp/paper/command/command/KissenPaperAbstractCommand.java
+++ b/src/main/java/net/kissenpvp/paper/command/command/KissenPaperAbstractCommand.java
@@ -82,7 +82,7 @@ public abstract class KissenPaperAbstractCommand<C extends KissenPaperAbstractCo
 
         if (args.length > 0) {
             Boolean data = getChildCommand(args[0]).map(command -> command.execute(sender, commandLabel, Arrays.copyOfRange(args, 1, args.length)))
-                .orElse(null);
+                    .orElse(null);
             if (data != null) {
                 return data;
             }
@@ -93,7 +93,7 @@ public abstract class KissenPaperAbstractCommand<C extends KissenPaperAbstractCo
         }
 
         final KissenPaperCommandContext kissenPaperCommandContext = new KissenPaperCommandContext(commandLabel, sender, getTargetValidator().parseSender((ServerEntity) sender), //safe cast
-            args, this);
+                args, this);
         //TODO maybe async
         return commandExecutor.execute(kissenPaperCommandContext);
     }
@@ -107,7 +107,7 @@ public abstract class KissenPaperAbstractCommand<C extends KissenPaperAbstractCo
 
         if (tabExecutor != null) {
             result.addAll(tabExecutor.execute(new KissenPaperCommandContext(alias, sender, getTargetValidator().parseSender((ServerEntity) sender), //safe cast
-                args, this)));
+                    args, this)));
             return result;
         }
 
@@ -116,8 +116,8 @@ public abstract class KissenPaperAbstractCommand<C extends KissenPaperAbstractCo
 
             for (C command : getChildCommandList()) {
                 if ((command.getName()
-                    .toLowerCase()
-                    .startsWith(args[args.length - 1].toLowerCase())) && command.testPermissionSilent(sender)) {
+                        .toLowerCase()
+                        .startsWith(args[args.length - 1].toLowerCase())) && command.testPermissionSilent(sender)) {
                     matchedChildCommands.add(command.getName());
                 }
             }
@@ -218,12 +218,12 @@ public abstract class KissenPaperAbstractCommand<C extends KissenPaperAbstractCo
         }
 
         return getChildCommand(nextSubCommand).orElseGet(() ->
-            {
-                C kissenPaperChildCommand = createChildCommand(nextSubCommand, KissenPaperAbstractCommand.this);
-                children.add(kissenPaperChildCommand);
-                return kissenPaperChildCommand;
-            })
-            .createRecursive(subName);
+                {
+                    C kissenPaperChildCommand = createChildCommand(nextSubCommand, KissenPaperAbstractCommand.this);
+                    children.add(kissenPaperChildCommand);
+                    return kissenPaperChildCommand;
+                })
+                .createRecursive(subName);
     }
 
 
@@ -252,12 +252,7 @@ public abstract class KissenPaperAbstractCommand<C extends KissenPaperAbstractCo
      * @throws NullPointerException If the provided {@code commandSender} parameter is null.
      */
     public boolean validate(@NotNull CommandSender commandSender) {
-        if (!(commandSender instanceof ServerEntity serverEntity)) {
-            //TODO maybe make command sender server entity, but rn I am to lazy
-            return false;
-        }
-
-        return getTargetValidator().validate(getCommandInfo().getTarget(), serverEntity);
+        return getTargetValidator().validate(getCommandInfo().getTarget(), commandSender);
     }
 
     /**
@@ -270,7 +265,7 @@ public abstract class KissenPaperAbstractCommand<C extends KissenPaperAbstractCo
      */
     public @NotNull KissenPaperTargetValidator getTargetValidator() {
         return Bukkit.getKissen()
-            .getImplementation(KissenPaperCommandImplementation.class)
-            .getKissenPaperTargetValidator();
+                .getImplementation(KissenPaperCommandImplementation.class)
+                .getKissenPaperTargetValidator();
     }
 }
diff --git a/src/main/java/net/kissenpvp/paper/permission/KissenPaperPermissible.java b/src/main/java/net/kissenpvp/paper/permission/KissenPaperPermissible.java
index 82dcf477f21b551d2e2e064b4f67c4e576a7fbb7..768cac091136d1991e09d5a4956d403843e8eb51 100644
--- a/src/main/java/net/kissenpvp/paper/permission/KissenPaperPermissible.java
+++ b/src/main/java/net/kissenpvp/paper/permission/KissenPaperPermissible.java
@@ -3,6 +3,7 @@ package net.kissenpvp.paper.permission;
 import net.kissenpvp.core.api.message.ComponentSerializer;
 import net.kissenpvp.paper.api.permission.PaperPermission;
 import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
 import org.bukkit.permissions.*;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
@@ -32,10 +33,9 @@ public abstract class KissenPaperPermissible implements KissenPaperGroupablePerm
 
     @Override
     public void permissionUpdate() {
-        unsubscribe();
+        if (parent instanceof OfflinePlayer) return;
 
-        Bukkit.getServer().getPluginManager().unsubscribeFromDefaultPerms(false, parent);
-        Bukkit.getServer().getPluginManager().unsubscribeFromDefaultPerms(true, parent);
+        unsubscribe();
 
         Bukkit.getServer().getPluginManager().subscribeToDefaultPerms(isOp() || hasPermission("*"), parent);
         for (PaperPermission permission : getPermissionList()) {
@@ -170,5 +170,8 @@ public abstract class KissenPaperPermissible implements KissenPaperGroupablePerm
                 .collect(Collectors.toSet())) {
             Bukkit.getServer().getPluginManager().unsubscribeFromPermission(name, parent);
         }
+
+        Bukkit.getServer().getPluginManager().unsubscribeFromDefaultPerms(false, parent);
+        Bukkit.getServer().getPluginManager().unsubscribeFromDefaultPerms(true, parent);
     }
 }
diff --git a/src/main/java/net/minecraft/network/chat/OutgoingChatMessage.java b/src/main/java/net/minecraft/network/chat/OutgoingChatMessage.java
index 74cf1c043beef03cfd5adf481414a5ee78bef2a6..13f294de29bea9b81763301861649d940a5b3e1d 100644
--- a/src/main/java/net/minecraft/network/chat/OutgoingChatMessage.java
+++ b/src/main/java/net/minecraft/network/chat/OutgoingChatMessage.java
@@ -14,15 +14,16 @@ public interface OutgoingChatMessage {
     // Paper end
 
     static OutgoingChatMessage create(PlayerChatMessage message) {
-        return (OutgoingChatMessage)(message.isSystem() ? new OutgoingChatMessage.Disguised(message.decoratedContent()) : new OutgoingChatMessage.Player(message));
+        return (OutgoingChatMessage) (message.isSystem() ? new OutgoingChatMessage.Disguised(message.decoratedContent()) : new OutgoingChatMessage.Player(message));
     }
 
     public static record Disguised(Component content) implements OutgoingChatMessage {
         @Override
         public void sendToPlayer(ServerPlayer sender, boolean filterMaskEnabled, ChatType.Bound params) {
-           // Paper start
+            // Paper start
             this.sendToPlayer(sender, filterMaskEnabled, params, null);
         }
+
         public void sendToPlayer(ServerPlayer sender, boolean filterMaskEnabled, ChatType.Bound params, @javax.annotation.Nullable Component unsigned) {
             sender.connection.sendDisguisedChatMessage(unsigned != null ? unsigned : this.content, params);
             // Paper end
@@ -30,6 +31,7 @@ public interface OutgoingChatMessage {
     }
 
     public static record Player(PlayerChatMessage message) implements OutgoingChatMessage {
+
         @Override
         public Component content() {
             return this.message.decoratedContent();
@@ -40,6 +42,7 @@ public interface OutgoingChatMessage {
             // Paper start
             this.sendToPlayer(sender, filterMaskEnabled, params, null);
         }
+
         public void sendToPlayer(ServerPlayer sender, boolean filterMaskEnabled, ChatType.Bound params, @javax.annotation.Nullable Component unsigned) {
             // Paper end
             PlayerChatMessage playerChatMessage = this.message.filter(filterMaskEnabled);
diff --git a/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java b/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java
index ed92592e4d9e3d88b7300ea7a315541bfb430231..098dc98c4713d16ba320f4dc328dc1bc72fdd7e5 100644
--- a/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java
+++ b/src/main/java/net/minecraft/network/chat/PlayerChatMessage.java
@@ -3,73 +3,96 @@ package net.minecraft.network.chat;
 import com.google.common.primitives.Ints;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import net.minecraft.Util;
+import net.minecraft.util.ExtraCodecs;
+import net.minecraft.util.SignatureUpdater;
+import net.minecraft.util.SignatureValidator;
+
+import javax.annotation.Nullable;
 import java.security.SignatureException;
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.UUID;
-import javax.annotation.Nullable;
-import net.minecraft.Util;
-import net.minecraft.util.ExtraCodecs;
-import net.minecraft.util.SignatureUpdater;
-import net.minecraft.util.SignatureValidator;
 
 // Paper start
-public record PlayerChatMessage(SignedMessageLink link, @Nullable MessageSignature signature, SignedMessageBody signedBody, @Nullable Component unsignedContent, FilterMask filterMask, @Nullable net.minecraft.network.chat.ChatDecorator.Result result) {
+public record PlayerChatMessage(SignedMessageLink link, @Nullable MessageSignature signature,
+                                SignedMessageBody signedBody, @Nullable Component unsignedContent,
+                                FilterMask filterMask,
+                                @Nullable net.minecraft.network.chat.ChatDecorator.Result result) {
+
+
     public PlayerChatMessage(SignedMessageLink link, @Nullable MessageSignature signature, SignedMessageBody signedBody, @Nullable Component unsignedContent, FilterMask filterMask) {
         this(link, signature, signedBody, unsignedContent, filterMask, null);
     }
+
     public PlayerChatMessage withResult(net.minecraft.network.chat.ChatDecorator.Result result) {
         final PlayerChatMessage msg = this.withUnsignedContent(result.component());
         return new PlayerChatMessage(msg.link, msg.signature, msg.signedBody, msg.unsignedContent, msg.filterMask, result);
     }
+
     public net.minecraft.network.chat.ChatDecorator.Result requireResult() {
         return Objects.requireNonNull(this.result, "Requires a decoration result to be set here");
     }
+
     public final class AdventureView implements net.kyori.adventure.chat.SignedMessage {
         private AdventureView() {
         }
+
         @Override
         public @org.jetbrains.annotations.NotNull Instant timestamp() {
             return PlayerChatMessage.this.timeStamp();
         }
+
         @Override
         public long salt() {
             return PlayerChatMessage.this.salt();
         }
+
         @Override
         public @org.jetbrains.annotations.Nullable Signature signature() {
             return PlayerChatMessage.this.signature == null ? null : PlayerChatMessage.this.signature.adventure();
         }
+
         @Override
         public net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component unsignedContent() {
             return PlayerChatMessage.this.unsignedContent() == null ? null : io.papermc.paper.adventure.PaperAdventure.asAdventure(PlayerChatMessage.this.unsignedContent());
         }
+
         @Override
         public @org.jetbrains.annotations.NotNull String message() {
             return PlayerChatMessage.this.signedContent();
         }
+
         @Override
         public @org.jetbrains.annotations.NotNull net.kyori.adventure.identity.Identity identity() {
             return net.kyori.adventure.identity.Identity.identity(PlayerChatMessage.this.sender());
         }
+
         public PlayerChatMessage playerChatMessage() {
             return PlayerChatMessage.this;
         }
     }
+
     public AdventureView adventureView() {
         return new AdventureView();
     }
+
     // Paper end
     public static final MapCodec<PlayerChatMessage> MAP_CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-        return instance.group(SignedMessageLink.CODEC.fieldOf("link").forGetter(PlayerChatMessage::link), MessageSignature.CODEC.optionalFieldOf("signature").forGetter((message) -> {
-            return Optional.ofNullable(message.signature);
-        }), SignedMessageBody.MAP_CODEC.forGetter(PlayerChatMessage::signedBody), ExtraCodecs.COMPONENT.optionalFieldOf("unsigned_content").forGetter((message) -> {
-            return Optional.ofNullable(message.unsignedContent);
-        }), FilterMask.CODEC.optionalFieldOf("filter_mask", FilterMask.PASS_THROUGH).forGetter(PlayerChatMessage::filterMask)).apply(instance, (link, signature, signedBody, unsignedContent, filterMask) -> {
-            return new PlayerChatMessage(link, signature.orElse((MessageSignature)null), signedBody, unsignedContent.orElse((Component)null), filterMask);
-        });
+        return instance.group(SignedMessageLink.CODEC.fieldOf("link")
+                        .forGetter(PlayerChatMessage::link), MessageSignature.CODEC.optionalFieldOf("signature")
+                        .forGetter((message) -> {
+                            return Optional.ofNullable(message.signature);
+                        }), SignedMessageBody.MAP_CODEC.forGetter(PlayerChatMessage::signedBody), ExtraCodecs.COMPONENT.optionalFieldOf("unsigned_content")
+                        .forGetter((message) -> {
+                            return Optional.ofNullable(message.unsignedContent);
+                        }), FilterMask.CODEC.optionalFieldOf("filter_mask", FilterMask.PASS_THROUGH)
+                        .forGetter(PlayerChatMessage::filterMask))
+                .apply(instance, (link, signature, signedBody, unsignedContent, filterMask) -> {
+                    return new PlayerChatMessage(link, signature.orElse((MessageSignature) null), signedBody, unsignedContent.orElse((Component) null), filterMask);
+                });
     });
     private static final UUID SYSTEM_SENDER = Util.NIL_UUID;
     public static final Duration MESSAGE_EXPIRES_AFTER_SERVER = Duration.ofMinutes(5L);
@@ -82,7 +105,7 @@ public record PlayerChatMessage(SignedMessageLink link, @Nullable MessageSignatu
     public static PlayerChatMessage unsigned(UUID sender, String content) {
         SignedMessageBody signedMessageBody = SignedMessageBody.unsigned(content);
         SignedMessageLink signedMessageLink = SignedMessageLink.unsigned(sender);
-        return new PlayerChatMessage(signedMessageLink, (MessageSignature)null, signedMessageBody, (Component)null, FilterMask.PASS_THROUGH);
+        return new PlayerChatMessage(signedMessageLink, (MessageSignature) null, signedMessageBody, (Component) null, FilterMask.PASS_THROUGH);
     }
 
     public PlayerChatMessage withUnsignedContent(Component unsignedContent) {
@@ -91,7 +114,7 @@ public record PlayerChatMessage(SignedMessageLink link, @Nullable MessageSignatu
     }
 
     public PlayerChatMessage removeUnsignedContent() {
-        return this.unsignedContent != null ? new PlayerChatMessage(this.link, this.signature, this.signedBody, (Component)null, this.filterMask) : this;
+        return this.unsignedContent != null ? new PlayerChatMessage(this.link, this.signature, this.signedBody, (Component) null, this.filterMask) : this;
     }
 
     public PlayerChatMessage filter(FilterMask filterMask) {
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 8aff989d6df5813824605f52e47c19795105649f..4335ef32bd459f7110e8c1958c5378b10a5fb117 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -8,79 +8,21 @@ import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.OptionalInt;
-import java.util.Set;
-import javax.annotation.Nullable;
-import net.minecraft.BlockUtil;
-import net.minecraft.ChatFormatting;
-import net.minecraft.CrashReport;
-import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
-import net.minecraft.Util;
+import io.papermc.paper.adventure.PaperAdventure;
+import net.kissenpvp.core.message.DefaultTheme;
+import net.kissenpvp.paper.api.message.SystemMessageEvent;
+import net.minecraft.*;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
-import net.minecraft.core.GlobalPos;
-import net.minecraft.core.NonNullList;
-import net.minecraft.core.PositionImpl;
-import net.minecraft.core.SectionPos;
+import net.minecraft.core.*;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.PacketSendListener;
-import net.minecraft.network.chat.ChatType;
-import net.minecraft.network.chat.CommonComponents;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.HoverEvent;
-import net.minecraft.network.chat.MutableComponent;
-import net.minecraft.network.chat.OutgoingChatMessage;
-import net.minecraft.network.chat.RemoteChatSession;
+import net.minecraft.network.chat.*;
 import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.protocol.game.ClientGamePacketListener;
-import net.minecraft.network.protocol.game.ClientboundAddPlayerPacket;
-import net.minecraft.network.protocol.game.ClientboundAnimatePacket;
-import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket;
-import net.minecraft.network.protocol.game.ClientboundContainerClosePacket;
-import net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket;
-import net.minecraft.network.protocol.game.ClientboundContainerSetDataPacket;
-import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
-import net.minecraft.network.protocol.game.ClientboundEntityEventPacket;
-import net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket;
-import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
-import net.minecraft.network.protocol.game.ClientboundHorseScreenOpenPacket;
-import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
-import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
-import net.minecraft.network.protocol.game.ClientboundMerchantOffersPacket;
-import net.minecraft.network.protocol.game.ClientboundOpenBookPacket;
-import net.minecraft.network.protocol.game.ClientboundOpenScreenPacket;
-import net.minecraft.network.protocol.game.ClientboundOpenSignEditorPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerCombatEndPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerCombatEnterPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerCombatKillPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerLookAtPacket;
-import net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket;
-import net.minecraft.network.protocol.game.ClientboundResourcePackPacket;
-import net.minecraft.network.protocol.game.ClientboundRespawnPacket;
-import net.minecraft.network.protocol.game.ClientboundServerDataPacket;
-import net.minecraft.network.protocol.game.ClientboundSetCameraPacket;
-import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
-import net.minecraft.network.protocol.game.ClientboundSetHealthPacket;
-import net.minecraft.network.protocol.game.ClientboundSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundSystemChatPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
-import net.minecraft.network.protocol.game.ServerboundClientInformationPacket;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
@@ -99,17 +41,14 @@ import net.minecraft.tags.DamageTypeTags;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.Unit;
+import net.minecraft.world.Container;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.MenuProvider;
+import net.minecraft.world.damagesource.CombatTracker;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.EntitySelector;
-import net.minecraft.world.entity.HumanoidArm;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.NeutralMob;
-import net.minecraft.world.entity.RelativeMovement;
+import net.minecraft.world.entity.*;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.monster.Monster;
@@ -119,18 +58,8 @@ import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.food.FoodData;
-import net.minecraft.world.inventory.AbstractContainerMenu;
-import net.minecraft.world.inventory.ContainerListener;
-import net.minecraft.world.inventory.ContainerSynchronizer;
-import net.minecraft.world.inventory.HorseInventoryMenu;
-import net.minecraft.world.inventory.ResultSlot;
-import net.minecraft.world.inventory.Slot;
-import net.minecraft.world.item.ComplexItem;
-import net.minecraft.world.item.ItemCooldowns;
-import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.Items;
-import net.minecraft.world.item.ServerItemCooldowns;
-import net.minecraft.world.item.WrittenBookItem;
+import net.minecraft.world.inventory.*;
+import net.minecraft.world.item.*;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.trading.MerchantOffers;
@@ -153,17 +82,11 @@ import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.portal.PortalInfo;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
-import org.slf4j.Logger;
-import net.minecraft.world.Container;
-import net.minecraft.world.InteractionHand;
-import net.minecraft.world.MenuProvider;
-import net.minecraft.world.damagesource.CombatTracker;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Score;
 import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.Team;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
-import io.papermc.paper.adventure.PaperAdventure; // Paper
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.WeatherType;
@@ -175,16 +98,15 @@ import org.bukkit.craftbukkit.event.CraftPortalEvent;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftDimensionUtil;
 import org.bukkit.craftbukkit.util.CraftLocation;
-import org.bukkit.event.player.PlayerBedLeaveEvent;
-import org.bukkit.event.player.PlayerChangedMainHandEvent;
-import org.bukkit.event.player.PlayerChangedWorldEvent;
-import org.bukkit.event.player.PlayerLocaleChangeEvent;
-import org.bukkit.event.player.PlayerPortalEvent;
-import org.bukkit.event.player.PlayerSpawnChangeEvent;
-import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.player.*;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
-import org.bukkit.event.player.PlayerToggleSneakEvent;
 import org.bukkit.inventory.MainHand;
+import org.slf4j.Logger;
+
+import javax.annotation.Nullable;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.*;
 // CraftBukkit end
 
 public class ServerPlayer extends Player {
@@ -286,7 +208,7 @@ public class ServerPlayer extends Player {
     }
 
     private void updateViewDistance(final java.util.function.Function<io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances, io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances> update) {
-        for (io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances curr = this.viewDistances.get();;) {
+        for (io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances curr = this.viewDistances.get(); ; ) {
             if (this.viewDistances.compareAndSet(curr, update.apply(curr))) {
                 return;
             }
@@ -343,7 +265,9 @@ public class ServerPlayer extends Player {
             // Paper start
             @Override
             public void sendOffHandSlotChange() {
-                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(ServerPlayer.this.inventoryMenu.containerId, ServerPlayer.this.inventoryMenu.incrementStateId(), net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT, ServerPlayer.this.inventoryMenu.getSlot(net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT).getItem().copy()));
+                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(ServerPlayer.this.inventoryMenu.containerId, ServerPlayer.this.inventoryMenu.incrementStateId(), net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT, ServerPlayer.this.inventoryMenu.getSlot(net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT)
+                        .getItem()
+                        .copy()));
             }
             // Paper end
 
@@ -378,13 +302,15 @@ public class ServerPlayer extends Player {
 
                 }
             }
+
             // Paper start
             @Override
             public void slotChanged(AbstractContainerMenu handler, int slotId, ItemStack oldStack, ItemStack stack) {
                 Slot slot = handler.getSlot(slotId);
                 if (!(slot instanceof ResultSlot)) {
                     if (slot.container == ServerPlayer.this.getInventory()) {
-                        if (io.papermc.paper.event.player.PlayerInventorySlotChangeEvent.getHandlerList().getRegisteredListeners().length == 0) {
+                        if (io.papermc.paper.event.player.PlayerInventorySlotChangeEvent.getHandlerList()
+                                .getRegisteredListeners().length == 0) {
                             CriteriaTriggers.INVENTORY_CHANGED.trigger(ServerPlayer.this, ServerPlayer.this.getInventory(), stack);
                             return;
                         }
@@ -424,9 +350,11 @@ public class ServerPlayer extends Player {
     public final BlockPos getSpawnPoint(ServerLevel worldserver) {
         BlockPos blockposition = worldserver.getSharedSpawnPos();
 
-        if (worldserver.dimensionType().hasSkyLight() && worldserver.serverLevelData.getGameType() != GameType.ADVENTURE) {
+        if (worldserver.dimensionType()
+                .hasSkyLight() && worldserver.serverLevelData.getGameType() != GameType.ADVENTURE) {
             int i = Math.max(0, this.server.getSpawnRadius(worldserver));
-            int j = Mth.floor(worldserver.getWorldBorder().getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
+            int j = Mth.floor(worldserver.getWorldBorder()
+                    .getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
 
             if (j < i) {
                 i = j;
@@ -461,9 +389,11 @@ public class ServerPlayer extends Player {
     public void fudgeSpawnLocation(ServerLevel world) {
         BlockPos blockposition = world.getSharedSpawnPos();
 
-        if (world.dimensionType().hasSkyLight() && world.serverLevelData.getGameType() != GameType.ADVENTURE) { // CraftBukkit
+        if (world.dimensionType()
+                .hasSkyLight() && world.serverLevelData.getGameType() != GameType.ADVENTURE) { // CraftBukkit
             int i = Math.max(0, this.server.getSpawnRadius(world));
-            int j = Mth.floor(world.getWorldBorder().getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
+            int j = Mth.floor(world.getWorldBorder()
+                    .getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
 
             if (j < i) {
                 i = j;
@@ -552,7 +482,8 @@ public class ServerPlayer extends Player {
                 Logger logger1 = ServerPlayer.LOGGER;
 
                 Objects.requireNonNull(logger1);
-                this.respawnDimension = (ResourceKey) dataresult1.resultOrPartial(logger1::error).orElse(Level.OVERWORLD);
+                this.respawnDimension = (ResourceKey) dataresult1.resultOrPartial(logger1::error)
+                        .orElse(Level.OVERWORLD);
             }
         }
 
@@ -633,7 +564,8 @@ public class ServerPlayer extends Player {
             if (this.respawnDimension != null) {
                 world = this.server.getLevel(this.respawnDimension);
                 if (world != null && this.getRespawnPosition() != null) {
-                    position = Player.findRespawnPositionAndUseSpawnBlock((ServerLevel) world, this.getRespawnPosition(), this.getRespawnAngle(), false, false).orElse(null);
+                    position = Player.findRespawnPositionAndUseSpawnBlock((ServerLevel) world, this.getRespawnPosition(), this.getRespawnAngle(), false, false)
+                            .orElse(null);
                 }
             }
             if (world == null || position == null) {
@@ -771,7 +703,8 @@ public class ServerPlayer extends Player {
             }
 
             if (this.getHealth() != this.lastSentHealth || this.lastSentFood != this.foodData.getFoodLevel() || this.foodData.getSaturationLevel() == 0.0F != this.lastFoodSaturationZero) {
-                this.connection.send(new ClientboundSetHealthPacket(this.getBukkitEntity().getScaledHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel())); // CraftBukkit
+                this.connection.send(new ClientboundSetHealthPacket(this.getBukkitEntity()
+                        .getScaledHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel())); // CraftBukkit
                 this.lastSentHealth = this.getHealth();
                 this.lastSentFood = this.foodData.getFoodLevel();
                 this.lastFoodSaturationZero = this.foodData.getSaturationLevel() == 0.0F;
@@ -879,9 +812,12 @@ public class ServerPlayer extends Player {
 
     private void updateScoreForCriteria(ObjectiveCriteria criterion, int score) {
         // CraftBukkit - Use our scores instead
-        this.level().getCraftServer().getScoreboardManager().getScoreboardScores(criterion, this.getScoreboardName(), (scoreboardscore) -> {
-            scoreboardscore.setScore(score);
-        });
+        this.level()
+                .getCraftServer()
+                .getScoreboardManager()
+                .getScoreboardScores(criterion, this.getScoreboardName(), (scoreboardscore) -> {
+                    scoreboardscore.setScore(score);
+                });
     }
 
     // Paper start - process inventory
@@ -932,8 +868,11 @@ public class ServerPlayer extends Player {
         if (this.isRemoved()) {
             return;
         }
-        java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<org.bukkit.inventory.ItemStack>(this.getInventory().getContainerSize());
-        boolean keepInventory = this.level().getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) || this.isSpectator();
+        java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<org.bukkit.inventory.ItemStack>(this.getInventory()
+                .getContainerSize());
+        boolean keepInventory = this.level()
+                .getGameRules()
+                .getBoolean(GameRules.RULE_KEEPINVENTORY) || this.isSpectator();
 
         if (!keepInventory) {
             for (ItemStack item : this.getInventory().getContents()) {
@@ -942,13 +881,15 @@ public class ServerPlayer extends Player {
                 }
             }
         }
-        if (this.shouldDropLoot() && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) { // Paper - preserve this check from vanilla
-        // SPIGOT-5071: manually add player loot tables (SPIGOT-5195 - ignores keepInventory rule)
-        this.dropFromLootTable(damageSource, this.lastHurtByPlayerTime > 0);
-        for (org.bukkit.inventory.ItemStack item : this.drops) {
-            loot.add(item);
-        }
-        this.drops.clear(); // SPIGOT-5188: make sure to clear
+        if (this.shouldDropLoot() && this.level()
+                .getGameRules()
+                .getBoolean(GameRules.RULE_DOMOBLOOT)) { // Paper - preserve this check from vanilla
+            // SPIGOT-5071: manually add player loot tables (SPIGOT-5195 - ignores keepInventory rule)
+            this.dropFromLootTable(damageSource, this.lastHurtByPlayerTime > 0);
+            for (org.bukkit.inventory.ItemStack item : this.drops) {
+                loot.add(item);
+            }
+            this.drops.clear(); // SPIGOT-5188: make sure to clear
         } // Paper
 
         Component defaultMessage = this.getCombatTracker().getDeathMessage();
@@ -979,10 +920,12 @@ public class ServerPlayer extends Player {
             this.connection.send(new ClientboundPlayerCombatKillPacket(this.getId(), ichatbasecomponent), PacketSendListener.exceptionallySend(() -> {
                 boolean flag1 = true;
                 String s = ichatbasecomponent.getString(256);
-                MutableComponent ichatmutablecomponent = Component.translatable("death.attack.message_too_long", Component.literal(s).withStyle(ChatFormatting.YELLOW));
-                MutableComponent ichatmutablecomponent1 = Component.translatable("death.attack.even_more_magic", this.getDisplayName()).withStyle((chatmodifier) -> {
-                    return chatmodifier.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, ichatmutablecomponent));
-                });
+                MutableComponent ichatmutablecomponent = Component.translatable("death.attack.message_too_long", Component.literal(s)
+                        .withStyle(ChatFormatting.YELLOW));
+                MutableComponent ichatmutablecomponent1 = Component.translatable("death.attack.even_more_magic", this.getDisplayName())
+                        .withStyle((chatmodifier) -> {
+                            return chatmodifier.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, ichatmutablecomponent));
+                        });
 
                 return new ClientboundPlayerCombatKillPacket(this.getId(), ichatmutablecomponent1);
             }));
@@ -1021,7 +964,10 @@ public class ServerPlayer extends Player {
         // CraftBukkit end
 
         // CraftBukkit - Get our scores instead
-        this.level().getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
+        this.level()
+                .getCraftServer()
+                .getScoreboardManager()
+                .getScoreboardScores(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
         LivingEntity entityliving = this.getKillCredit();
 
         if (entityliving != null) {
@@ -1044,11 +990,15 @@ public class ServerPlayer extends Player {
     private void tellNeutralMobsThatIDied() {
         AABB axisalignedbb = (new AABB(this.blockPosition())).inflate(32.0D, 10.0D, 32.0D);
 
-        this.level().getEntitiesOfClass(Mob.class, axisalignedbb, EntitySelector.NO_SPECTATORS).stream().filter((entityinsentient) -> {
-            return entityinsentient instanceof NeutralMob;
-        }).forEach((entityinsentient) -> {
-            ((NeutralMob) entityinsentient).playerDied(this);
-        });
+        this.level()
+                .getEntitiesOfClass(Mob.class, axisalignedbb, EntitySelector.NO_SPECTATORS)
+                .stream()
+                .filter((entityinsentient) -> {
+                    return entityinsentient instanceof NeutralMob;
+                })
+                .forEach((entityinsentient) -> {
+                    ((NeutralMob) entityinsentient).playerDied(this);
+                });
     }
 
     @Override
@@ -1060,11 +1010,17 @@ public class ServerPlayer extends Player {
             String s1 = entityKilled.getScoreboardName();
 
             // CraftBukkit - Get our scores instead
-            this.level().getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.KILL_COUNT_ALL, s, Score::increment);
+            this.level()
+                    .getCraftServer()
+                    .getScoreboardManager()
+                    .getScoreboardScores(ObjectiveCriteria.KILL_COUNT_ALL, s, Score::increment);
             if (entityKilled instanceof Player) {
                 this.awardStat(Stats.PLAYER_KILLS);
                 // CraftBukkit - Get our scores instead
-                this.level().getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.KILL_COUNT_PLAYERS, s, Score::increment);
+                this.level()
+                        .getCraftServer()
+                        .getScoreboardManager()
+                        .getScoreboardScores(ObjectiveCriteria.KILL_COUNT_PLAYERS, s, Score::increment);
             } else {
                 this.awardStat(Stats.MOB_KILLS);
             }
@@ -1083,7 +1039,10 @@ public class ServerPlayer extends Player {
 
             if (i >= 0 && i < criterions.length) {
                 // CraftBukkit - Get our scores instead
-                this.level().getCraftServer().getScoreboardManager().getScoreboardScores(criterions[i], playerName, Score::increment);
+                this.level()
+                        .getCraftServer()
+                        .getScoreboardManager()
+                        .getScoreboardScores(criterions[i], playerName, Score::increment);
             }
         }
 
@@ -1152,7 +1111,8 @@ public class ServerPlayer extends Player {
         PortalInfo shapedetectorshape = super.findDimensionEntryPoint(destination);
         destination = (shapedetectorshape == null) ? destination : shapedetectorshape.world; // CraftBukkit
 
-        if (shapedetectorshape != null && this.level().getTypeKey() == LevelStem.OVERWORLD && destination != null && destination.getTypeKey() == LevelStem.END) { // CraftBukkit
+        if (shapedetectorshape != null && this.level()
+                .getTypeKey() == LevelStem.OVERWORLD && destination != null && destination.getTypeKey() == LevelStem.END) { // CraftBukkit
             Vec3 vec3d = shapedetectorshape.pos.add(0.0D, -1.0D, 0.0D);
 
             return new PortalInfo(vec3d, Vec3.ZERO, 90.0F, 0.0F, destination, shapedetectorshape.portalEventInfo); // CraftBukkit
@@ -1181,7 +1141,8 @@ public class ServerPlayer extends Player {
             this.unRide();
             this.serverLevel().removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
             if (!this.wonGame) {
-                if (this.level().paperConfig().misc.disableEndCredits) this.seenCredits = true; // Paper - Toggle to always disable end credits
+                if (this.level().paperConfig().misc.disableEndCredits)
+                    this.seenCredits = true; // Paper - Toggle to always disable end credits
                 this.wonGame = true;
                 this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.WIN_GAME, this.seenCredits ? 0.0F : 1.0F));
                 this.seenCredits = true;
@@ -1207,12 +1168,12 @@ public class ServerPlayer extends Player {
             if (shapedetectorshape != null) {
                 worldserver1.getProfiler().push("moving");
                 worldserver = shapedetectorshape.world; // CraftBukkit
-                if (worldserver == null) { } else // CraftBukkit - empty to fall through to null to event
-                if (resourcekey == LevelStem.OVERWORLD && worldserver.getTypeKey() == LevelStem.NETHER) { // CraftBukkit
-                    this.enteredNetherPosition = this.position();
-                } else if (worldserver.getTypeKey() == LevelStem.END && shapedetectorshape.portalEventInfo != null && shapedetectorshape.portalEventInfo.getCanCreatePortal()) { // CraftBukkit
-                    this.createEndPlatform(worldserver, BlockPos.containing(shapedetectorshape.pos));
-                }
+                if (worldserver == null) {} else // CraftBukkit - empty to fall through to null to event
+                    if (resourcekey == LevelStem.OVERWORLD && worldserver.getTypeKey() == LevelStem.NETHER) { // CraftBukkit
+                        this.enteredNetherPosition = this.position();
+                    } else if (worldserver.getTypeKey() == LevelStem.END && shapedetectorshape.portalEventInfo != null && shapedetectorshape.portalEventInfo.getCanCreatePortal()) { // CraftBukkit
+                        this.createEndPlatform(worldserver, BlockPos.containing(shapedetectorshape.pos));
+                    }
                 // CraftBukkit start
             } else {
                 return null;
@@ -1234,7 +1195,9 @@ public class ServerPlayer extends Player {
                 this.isChangingDimension = true; // CraftBukkit - Set teleport invulnerability only if player changing worlds
 
                 this.connection.send(new ClientboundRespawnPacket(worldserver.dimensionTypeId(), worldserver.dimension(), BiomeManager.obfuscateSeed(worldserver.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), worldserver.isDebug(), worldserver.isFlat(), (byte) 3, this.getLastDeathLocation(), this.getPortalCooldown()));
-                this.connection.send(new ClientboundChangeDifficultyPacket(worldserver.getDifficulty(), this.level().getLevelData().isDifficultyLocked())); // Paper - fix difficulty sync issue
+                this.connection.send(new ClientboundChangeDifficultyPacket(worldserver.getDifficulty(), this.level()
+                        .getLevelData()
+                        .isDifficultyLocked())); // Paper - fix difficulty sync issue
                 PlayerList playerlist = this.server.getPlayerList();
 
                 playerlist.sendPlayerPermissionLevel(this);
@@ -1302,7 +1265,8 @@ public class ServerPlayer extends Player {
                 for (int k = -1; k < 3; ++k) {
                     BlockState iblockdata = k == -1 ? Blocks.OBSIDIAN.defaultBlockState() : Blocks.AIR.defaultBlockState();
 
-                    blockList.setBlock(blockposition_mutableblockposition.set(centerPos).move(j, k, i), iblockdata, 3); // CraftBukkit
+                    blockList.setBlock(blockposition_mutableblockposition.set(centerPos)
+                            .move(j, k, i), iblockdata, 3); // CraftBukkit
                 }
             }
         }
@@ -1323,8 +1287,12 @@ public class ServerPlayer extends Player {
         if (optional.isPresent() || !canCreatePortal) { // CraftBukkit
             return optional;
         } else {
-            Direction.Axis enumdirection_enumaxis = (Direction.Axis) this.level().getBlockState(this.portalEntrancePos).getOptionalValue(NetherPortalBlock.AXIS).orElse(Direction.Axis.X);
-            Optional<BlockUtil.FoundRectangle> optional1 = worldserver.getPortalForcer().createPortal(blockposition, enumdirection_enumaxis, this, createRadius); // CraftBukkit
+            Direction.Axis enumdirection_enumaxis = (Direction.Axis) this.level()
+                    .getBlockState(this.portalEntrancePos)
+                    .getOptionalValue(NetherPortalBlock.AXIS)
+                    .orElse(Direction.Axis.X);
+            Optional<BlockUtil.FoundRectangle> optional1 = worldserver.getPortalForcer()
+                    .createPortal(blockposition, enumdirection_enumaxis, this, createRadius); // CraftBukkit
 
             if (!optional1.isPresent()) {
                 // EntityPlayer.LOGGER.error("Unable to create a portal, likely target out of worldborder"); // CraftBukkit
@@ -1384,7 +1352,8 @@ public class ServerPlayer extends Player {
             } else if (this.bedBlocked(blockposition, enumdirection)) {
                 return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
             } else {
-                this.setRespawnPosition(this.level().dimension(), blockposition, this.getYRot(), false, true, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.BED); // Paper - PlayerSetSpawnEvent
+                this.setRespawnPosition(this.level()
+                        .dimension(), blockposition, this.getYRot(), false, true, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.BED); // Paper - PlayerSetSpawnEvent
                 if (this.level().isDay()) {
                     return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
                 } else {
@@ -1392,9 +1361,10 @@ public class ServerPlayer extends Player {
                         double d0 = 8.0D;
                         double d1 = 5.0D;
                         Vec3 vec3d = Vec3.atBottomCenterOf(blockposition);
-                        List<Monster> list = this.level().getEntitiesOfClass(Monster.class, new AABB(vec3d.x() - 8.0D, vec3d.y() - 5.0D, vec3d.z() - 8.0D, vec3d.x() + 8.0D, vec3d.y() + 5.0D, vec3d.z() + 8.0D), (entitymonster) -> {
-                            return entitymonster.isPreventingPlayerRest(this);
-                        });
+                        List<Monster> list = this.level()
+                                .getEntitiesOfClass(Monster.class, new AABB(vec3d.x() - 8.0D, vec3d.y() - 5.0D, vec3d.z() - 8.0D, vec3d.x() + 8.0D, vec3d.y() + 5.0D, vec3d.z() + 8.0D), (entitymonster) -> {
+                                    return entitymonster.isPreventingPlayerRest(this);
+                                });
 
                         if (!list.isEmpty()) {
                             return Either.left(Player.BedSleepingProblem.NOT_SAFE);
@@ -1411,7 +1381,9 @@ public class ServerPlayer extends Player {
 
     @Override
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos blockposition, boolean force) {
-        Direction enumdirection = (Direction) this.level().getBlockState(blockposition).getValue(HorizontalDirectionalBlock.FACING);
+        Direction enumdirection = (Direction) this.level()
+                .getBlockState(blockposition)
+                .getValue(HorizontalDirectionalBlock.FACING);
         Either<Player.BedSleepingProblem, Unit> bedResult = this.getBedResult(blockposition, enumdirection);
 
         if (bedResult.left().orElse(null) == Player.BedSleepingProblem.OTHER_PROBLEM) {
@@ -1430,10 +1402,11 @@ public class ServerPlayer extends Player {
         {
             {
                 {
-                    Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(blockposition, force).ifRight((unit) -> {
-                        this.awardStat(Stats.SLEEP_IN_BED);
-                        CriteriaTriggers.SLEPT_IN_BED.trigger(this);
-                    });
+                    Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(blockposition, force)
+                            .ifRight((unit) -> {
+                                this.awardStat(Stats.SLEEP_IN_BED);
+                                CriteriaTriggers.SLEPT_IN_BED.trigger(this);
+                            });
 
                     if (!this.serverLevel().canSleepThroughNights()) {
                         this.displayClientMessage(Component.translatable("sleep.not_possible"), true);
@@ -1508,7 +1481,8 @@ public class ServerPlayer extends Player {
 
     @Override
     public boolean isInvulnerableTo(DamageSource damageSource) {
-        return super.isInvulnerableTo(damageSource) || this.isChangingDimension()  || !this.level().paperConfig().collisions.allowPlayerCrammingDamage && damageSource == damageSources().cramming(); // Paper - disable player cramming
+        return super.isInvulnerableTo(damageSource) || this.isChangingDimension() || !this.level()
+                .paperConfig().collisions.allowPlayerCrammingDamage && damageSource == damageSources().cramming(); // Paper - disable player cramming
     }
 
     @Override
@@ -1578,14 +1552,16 @@ public class ServerPlayer extends Player {
             // CraftBukkit end
             if (container == null) {
                 if (this.isSpectator()) {
-                    this.displayClientMessage(Component.translatable("container.spectatorCantOpen").withStyle(ChatFormatting.RED), true);
+                    this.displayClientMessage(Component.translatable("container.spectatorCantOpen")
+                            .withStyle(ChatFormatting.RED), true);
                 }
 
                 return OptionalInt.empty();
             } else {
                 // CraftBukkit start
                 this.containerMenu = container;
-                if (!this.isImmobile()) this.connection.send(new ClientboundOpenScreenPacket(container.containerId, container.getType(), container.getTitle())); // Paper
+                if (!this.isImmobile())
+                    this.connection.send(new ClientboundOpenScreenPacket(container.containerId, container.getType(), container.getTitle())); // Paper
                 // CraftBukkit end
                 this.initMenu(container);
                 return OptionalInt.of(this.containerCounter);
@@ -1643,6 +1619,7 @@ public class ServerPlayer extends Player {
         // Paper start
         this.closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.UNKNOWN);
     }
+
     @Override
     public void closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
         CraftEventFactory.handleInventoryCloseEvent(this, reason); // CraftBukkit
@@ -1650,6 +1627,7 @@ public class ServerPlayer extends Player {
         this.connection.send(new ClientboundContainerClosePacket(this.containerMenu.containerId));
         this.doCloseContainer();
     }
+
     // Paper start - special close for unloaded inventory
     @Override
     public void closeUnloadedInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
@@ -1699,15 +1677,21 @@ public class ServerPlayer extends Player {
     @Override
     public void awardStat(Stat<?> stat, int amount) {
         this.stats.increment(this, stat, amount);
-        this.level().getCraftServer().getScoreboardManager().getScoreboardScores(stat, this.getScoreboardName(), (scoreboardscore) -> { // CraftBukkit - Get our scores instead
-            scoreboardscore.add(amount);
-        });
+        this.level()
+                .getCraftServer()
+                .getScoreboardManager()
+                .getScoreboardScores(stat, this.getScoreboardName(), (scoreboardscore) -> { // CraftBukkit - Get our scores instead
+                    scoreboardscore.add(amount);
+                });
     }
 
     @Override
     public void resetStat(Stat<?> stat) {
         this.stats.setValue(this, stat, 0);
-        this.level().getCraftServer().getScoreboardManager().getScoreboardScores(stat, this.getScoreboardName(), Score::reset); // CraftBukkit - Get our scores instead
+        this.level()
+                .getCraftServer()
+                .getScoreboardManager()
+                .getScoreboardScores(stat, this.getScoreboardName(), Score::reset); // CraftBukkit - Get our scores instead
     }
 
     @Override
@@ -1728,7 +1712,8 @@ public class ServerPlayer extends Player {
 
         for (int j = 0; j < i; ++j) {
             ResourceLocation minecraftkey = aminecraftkey1[j];
-            Optional<? extends Recipe<?>> optional = this.server.getRecipeManager().byKey(minecraftkey); // CraftBukkit - decompile error
+            Optional<? extends Recipe<?>> optional = this.server.getRecipeManager()
+                    .byKey(minecraftkey); // CraftBukkit - decompile error
 
             Objects.requireNonNull(list);
             optional.ifPresent(list::add);
@@ -1825,7 +1810,9 @@ public class ServerPlayer extends Player {
 
         this.enchantmentSeed = oldPlayer.enchantmentSeed;
         this.enderChestInventory = oldPlayer.enderChestInventory;
-        this.getEntityData().set(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION, (Byte) oldPlayer.getEntityData().get(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION));
+        this.getEntityData()
+                .set(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION, (Byte) oldPlayer.getEntityData()
+                        .get(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION));
         this.lastSentExp = -1;
         this.lastSentHealth = -1.0F;
         this.lastSentFood = -1;
@@ -1936,6 +1923,7 @@ public class ServerPlayer extends Player {
         org.bukkit.event.player.PlayerGameModeChangeEvent event = this.setGameMode(gameMode, org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.UNKNOWN, null);
         return event == null ? false : event.isCancelled();
     }
+
     @Nullable
     public org.bukkit.event.player.PlayerGameModeChangeEvent setGameMode(GameType gameMode, org.bukkit.event.player.PlayerGameModeChangeEvent.Cause cause, @Nullable net.kyori.adventure.text.Component message) {
         org.bukkit.event.player.PlayerGameModeChangeEvent event = this.gameMode.changeGameModeForPlayer(gameMode, cause, message);
@@ -1974,17 +1962,24 @@ public class ServerPlayer extends Player {
 
     public void sendSystemMessage(Component message, boolean overlay) {
         if (this.acceptsSystemMessages(overlay)) {
-            this.connection.send(new ClientboundSystemChatPacket(PaperAdventure.asAdventure(message), overlay), PacketSendListener.exceptionallySend(() -> { // Paper - Adventure
-                if (this.acceptsSystemMessages(false)) {
-                    boolean flag1 = true;
-                    String s = message.getString(256);
-                    MutableComponent ichatmutablecomponent = Component.literal(s).withStyle(ChatFormatting.YELLOW);
-
-                    return new ClientboundSystemChatPacket(PaperAdventure.asAdventure(Component.translatable("multiplayer.message_not_delivered", ichatmutablecomponent).withStyle(ChatFormatting.RED)), false); // Paper - Adventure
-                } else {
-                    return null;
-                }
-            }));
+            // KissenPaper start
+            SystemMessageEvent systemMessageEvent = new SystemMessageEvent(this.getBukkitEntity(), ((DefaultTheme) getBukkitEntity().getTheme()).replaceColors(PaperAdventure.asAdventure(message)));
+            server.server.getPluginManager().callEvent(systemMessageEvent);
+            if (!systemMessageEvent.isCancelled()) {
+                this.connection.send(new ClientboundSystemChatPacket(/* Kissenpaper */ systemMessageEvent.getComponent() /* PaperAdventure.asAdventure(message) */, overlay), PacketSendListener.exceptionallySend(() -> { // Paper - Adventure
+                    if (this.acceptsSystemMessages(false)) {
+                        boolean flag1 = true;
+                        String s = message.getString(256);
+                        MutableComponent ichatmutablecomponent = Component.literal(s).withStyle(ChatFormatting.YELLOW);
+
+                        return new ClientboundSystemChatPacket(PaperAdventure.asAdventure(Component.translatable("multiplayer.message_not_delivered", ichatmutablecomponent)
+                                .withStyle(ChatFormatting.RED)), false); // Paper - Adventure
+                    } else {
+                        return null;
+                    }
+                }));
+            }
+            // KissenPaper end
         }
     }
 
@@ -1992,6 +1987,7 @@ public class ServerPlayer extends Player {
         // Paper start
         this.sendChatMessage(message, filterMaskEnabled, params, null);
     }
+
     public void sendChatMessage(OutgoingChatMessage message, boolean filterMaskEnabled, ChatType.Bound params, @Nullable Component unsigned) {
         // Paper end
         if (this.acceptsChatMessages()) {
@@ -2025,11 +2021,13 @@ public class ServerPlayer extends Player {
         map.put(com.destroystokyo.paper.ClientOption.TEXT_FILTERING_ENABLED, textFilteringEnabled);
         return map;
     }
+
     // Paper end
     //public String locale = null; // CraftBukkit - add, lowercase // Paper - default to null // KissenPaper not used anymore
     //public java.util.Locale adventure$locale = java.util.Locale.US; // Paper // KissenPaper not used anymore
     public void updateOptions(ServerboundClientInformationPacket packet) {
-        new com.destroystokyo.paper.event.player.PlayerClientOptionsChangeEvent(getBukkitEntity(), getClientOptionMap(packet.language, packet.viewDistance, com.destroystokyo.paper.ClientOption.ChatVisibility.valueOf(packet.chatVisibility().name()), packet.chatColors(), new com.destroystokyo.paper.PaperSkinParts(packet.modelCustomisation()), packet.mainHand() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT, packet.allowsListing(), packet.textFilteringEnabled())).callEvent(); // Paper - settings event
+        new com.destroystokyo.paper.event.player.PlayerClientOptionsChangeEvent(getBukkitEntity(), getClientOptionMap(packet.language, packet.viewDistance, com.destroystokyo.paper.ClientOption.ChatVisibility.valueOf(packet.chatVisibility()
+                .name()), packet.chatColors(), new com.destroystokyo.paper.PaperSkinParts(packet.modelCustomisation()), packet.mainHand() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT, packet.allowsListing(), packet.textFilteringEnabled())).callEvent(); // Paper - settings event
         // CraftBukkit start
         if (getMainArm() != packet.mainHand()) {
             PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(this.getBukkitEntity(), getMainArm() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT);
@@ -2067,7 +2065,8 @@ public class ServerPlayer extends Player {
         this.textFilteringEnabled = packet.textFilteringEnabled();
         this.allowsListing = packet.allowsListing();
         this.getEntityData().set(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION, (byte) packet.modelCustomisation());
-        this.getEntityData().set(ServerPlayer.DATA_PLAYER_MAIN_HAND, (byte) (packet.mainHand() == HumanoidArm.LEFT ? 0 : 1));
+        this.getEntityData()
+                .set(ServerPlayer.DATA_PLAYER_MAIN_HAND, (byte) (packet.mainHand() == HumanoidArm.LEFT ? 0 : 1));
     }
 
     public boolean canChatInColor() {
@@ -2091,7 +2090,8 @@ public class ServerPlayer extends Player {
     }
 
     public void sendServerStatus(ServerStatus metadata) {
-        this.connection.send(new ClientboundServerDataPacket(metadata.description(), metadata.favicon().map(ServerStatus.Favicon::iconBytes), metadata.enforcesSecureChat()));
+        this.connection.send(new ClientboundServerDataPacket(metadata.description(), metadata.favicon()
+                .map(ServerStatus.Favicon::iconBytes), metadata.enforcesSecureChat()));
     }
 
     @Override
@@ -2263,11 +2263,13 @@ public class ServerPlayer extends Player {
         // Paper start
         this.setRespawnPosition(dimension, pos, angle, forced, sendMessage, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.UNKNOWN);
     }
+
     @Deprecated
     public boolean setRespawnPosition(ResourceKey<Level> dimension, @Nullable BlockPos pos, float angle, boolean forced, boolean sendMessage, PlayerSpawnChangeEvent.Cause cause) {
         return this.setRespawnPosition(dimension, pos, angle, forced, sendMessage, cause == PlayerSpawnChangeEvent.Cause.RESET ?
-            com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLAYER_RESPAWN : com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.valueOf(cause.name()));
+                com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLAYER_RESPAWN : com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.valueOf(cause.name()));
     }
+
     public boolean setRespawnPosition(ResourceKey<Level> dimension, @Nullable BlockPos pos, float angle, boolean forced, boolean sendMessage, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause cause) {
         Location spawnLoc = null;
         boolean willNotify = false;
@@ -2279,7 +2281,7 @@ public class ServerPlayer extends Player {
         }
 
         PlayerSpawnChangeEvent dumbEvent = new PlayerSpawnChangeEvent(this.getBukkitEntity(), spawnLoc, forced,
-            cause == com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLAYER_RESPAWN ? PlayerSpawnChangeEvent.Cause.RESET : PlayerSpawnChangeEvent.Cause.valueOf(cause.name()));
+                cause == com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLAYER_RESPAWN ? PlayerSpawnChangeEvent.Cause.RESET : PlayerSpawnChangeEvent.Cause.valueOf(cause.name()));
         dumbEvent.callEvent();
 
         com.destroystokyo.paper.event.player.PlayerSetSpawnEvent event = new com.destroystokyo.paper.event.player.PlayerSetSpawnEvent(this.getBukkitEntity(), cause, dumbEvent.getNewSpawn(), dumbEvent.isForced(), willNotify, willNotify ? net.kyori.adventure.text.Component.translatable("block.minecraft.set_spawn") : null);
@@ -2288,7 +2290,8 @@ public class ServerPlayer extends Player {
             return false;
         }
         if (event.getLocation() != null) {
-            dimension = event.getLocation().getWorld() != null ? ((CraftWorld) event.getLocation().getWorld()).getHandle().dimension() : dimension;
+            dimension = event.getLocation().getWorld() != null ? ((CraftWorld) event.getLocation()
+                    .getWorld()).getHandle().dimension() : dimension;
             pos = io.papermc.paper.util.MCUtil.toBlockPosition(event.getLocation());
             angle = event.getLocation().getYaw();
             forced = event.isForced();
@@ -2315,8 +2318,10 @@ public class ServerPlayer extends Player {
     public void trackChunk(ChunkPos chunkPos, Packet<?> chunkDataPacket) {
         this.connection.send(chunkDataPacket);
         // Paper start
-        if(io.papermc.paper.event.packet.PlayerChunkLoadEvent.getHandlerList().getRegisteredListeners().length > 0){
-            new io.papermc.paper.event.packet.PlayerChunkLoadEvent(this.getBukkitEntity().getWorld().getChunkAt(chunkPos.longKey), this.getBukkitEntity()).callEvent();
+        if (io.papermc.paper.event.packet.PlayerChunkLoadEvent.getHandlerList().getRegisteredListeners().length > 0) {
+            new io.papermc.paper.event.packet.PlayerChunkLoadEvent(this.getBukkitEntity()
+                    .getWorld()
+                    .getChunkAt(chunkPos.longKey), this.getBukkitEntity()).callEvent();
         }
         // Paper end
     }
@@ -2325,8 +2330,11 @@ public class ServerPlayer extends Player {
         if (this.isAlive()) {
             this.connection.send(new ClientboundForgetLevelChunkPacket(chunkPos.x, chunkPos.z));
             // Paper start
-            if(io.papermc.paper.event.packet.PlayerChunkUnloadEvent.getHandlerList().getRegisteredListeners().length > 0){
-                new io.papermc.paper.event.packet.PlayerChunkUnloadEvent(this.getBukkitEntity().getWorld().getChunkAt(chunkPos.longKey), this.getBukkitEntity()).callEvent();
+            if (io.papermc.paper.event.packet.PlayerChunkUnloadEvent.getHandlerList()
+                    .getRegisteredListeners().length > 0) {
+                new io.papermc.paper.event.packet.PlayerChunkUnloadEvent(this.getBukkitEntity()
+                        .getWorld()
+                        .getChunkAt(chunkPos.longKey), this.getBukkitEntity()).callEvent();
             }
             // Paper end
         }
@@ -2396,10 +2404,11 @@ public class ServerPlayer extends Player {
     public void loadGameTypes(@Nullable CompoundTag nbt) {
         // Paper start
         if (this.server.getForcedGameType() != null && this.server.getForcedGameType() != ServerPlayer.readPlayerMode(nbt, "playerGameType")) {
-            if (new org.bukkit.event.player.PlayerGameModeChangeEvent(this.getBukkitEntity(), org.bukkit.GameMode.getByValue(this.server.getDefaultGameType().getId()), org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.DEFAULT_GAMEMODE, null).callEvent()) {
+            if (new org.bukkit.event.player.PlayerGameModeChangeEvent(this.getBukkitEntity(), org.bukkit.GameMode.getByValue(this.server.getDefaultGameType()
+                    .getId()), org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.DEFAULT_GAMEMODE, null).callEvent()) {
                 this.gameMode.setGameModeForPlayer(this.server.getForcedGameType(), GameType.DEFAULT_MODE);
             } else {
-                this.gameMode.setGameModeForPlayer(ServerPlayer.readPlayerMode(nbt,"playerGameType"), ServerPlayer.readPlayerMode(nbt, "previousPlayerGameType"));
+                this.gameMode.setGameModeForPlayer(ServerPlayer.readPlayerMode(nbt, "playerGameType"), ServerPlayer.readPlayerMode(nbt, "previousPlayerGameType"));
             }
             return;
         }
@@ -2598,7 +2607,9 @@ public class ServerPlayer extends Player {
 
     public void resetPlayerWeather() {
         this.weather = null;
-        this.setPlayerWeather(this.level().getLevelData().isRaining() ? WeatherType.DOWNFALL : WeatherType.CLEAR, false);
+        this.setPlayerWeather(this.level()
+                .getLevelData()
+                .isRaining() ? WeatherType.DOWNFALL : WeatherType.CLEAR, false);
     }
 
     @Override
@@ -2664,4 +2675,5 @@ public class ServerPlayer extends Player {
         return (CraftPlayer) super.getBukkitEntity();
     }
     // CraftBukkit end
+
 }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 80e050603e36134754136a8ee2bd14624f976e91..82cd6154cb0b741de77343eb760e5c2aa1ba741f 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -4,37 +4,15 @@ import com.google.common.collect.Lists;
 import com.google.common.primitives.Floats;
 import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
+import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.adventure.ChatProcessor;
+import io.papermc.paper.adventure.PaperAdventure;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import java.net.SocketAddress;
-import java.time.Duration;
-import java.time.Instant;
-import java.util.Collections;
-import java.util.EnumSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.concurrent.CancellationException;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.atomic.AtomicReference;
-import java.util.function.BiFunction;
-import java.util.function.Consumer;
-import java.util.function.UnaryOperator;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-import javax.annotation.Nullable;
-import net.minecraft.ChatFormatting;
-import net.minecraft.CrashReport;
-import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
-import net.minecraft.SharedConstants;
-import net.minecraft.Util;
+import net.minecraft.*;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.commands.CommandSigningContext;
@@ -49,87 +27,10 @@ import net.minecraft.nbt.StringTag;
 import net.minecraft.network.Connection;
 import net.minecraft.network.PacketSendListener;
 import net.minecraft.network.TickablePacketListener;
-import net.minecraft.network.chat.ChatType;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.LastSeenMessages;
-import net.minecraft.network.chat.LastSeenMessagesValidator;
-import net.minecraft.network.chat.MessageSignature;
-import net.minecraft.network.chat.MessageSignatureCache;
-import net.minecraft.network.chat.MutableComponent;
-import net.minecraft.network.chat.PlayerChatMessage;
-import net.minecraft.network.chat.RemoteChatSession;
-import net.minecraft.network.chat.SignableCommand;
-import net.minecraft.network.chat.SignedMessageBody;
-import net.minecraft.network.chat.SignedMessageChain;
+import net.minecraft.network.chat.*;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketUtils;
-import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockChangedAckPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundCommandSuggestionsPacket;
-import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
-import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
-import net.minecraft.network.protocol.game.ClientboundDisguisedChatPacket;
-import net.minecraft.network.protocol.game.ClientboundKeepAlivePacket;
-import net.minecraft.network.protocol.game.ClientboundMoveVehiclePacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerChatPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket;
-import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
-import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
-import net.minecraft.network.protocol.game.ClientboundSystemChatPacket;
-import net.minecraft.network.protocol.game.ClientboundTagQueryPacket;
-import net.minecraft.network.protocol.game.ServerGamePacketListener;
-import net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket;
-import net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery;
-import net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket;
-import net.minecraft.network.protocol.game.ServerboundChatAckPacket;
-import net.minecraft.network.protocol.game.ServerboundChatCommandPacket;
-import net.minecraft.network.protocol.game.ServerboundChatPacket;
-import net.minecraft.network.protocol.game.ServerboundChatSessionUpdatePacket;
-import net.minecraft.network.protocol.game.ServerboundClientCommandPacket;
-import net.minecraft.network.protocol.game.ServerboundClientInformationPacket;
-import net.minecraft.network.protocol.game.ServerboundCommandSuggestionPacket;
-import net.minecraft.network.protocol.game.ServerboundContainerButtonClickPacket;
-import net.minecraft.network.protocol.game.ServerboundContainerClickPacket;
-import net.minecraft.network.protocol.game.ServerboundContainerClosePacket;
-import net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket;
-import net.minecraft.network.protocol.game.ServerboundEditBookPacket;
-import net.minecraft.network.protocol.game.ServerboundEntityTagQuery;
-import net.minecraft.network.protocol.game.ServerboundInteractPacket;
-import net.minecraft.network.protocol.game.ServerboundJigsawGeneratePacket;
-import net.minecraft.network.protocol.game.ServerboundKeepAlivePacket;
-import net.minecraft.network.protocol.game.ServerboundLockDifficultyPacket;
-import net.minecraft.network.protocol.game.ServerboundMovePlayerPacket;
-import net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket;
-import net.minecraft.network.protocol.game.ServerboundPaddleBoatPacket;
-import net.minecraft.network.protocol.game.ServerboundPickItemPacket;
-import net.minecraft.network.protocol.game.ServerboundPlaceRecipePacket;
-import net.minecraft.network.protocol.game.ServerboundPlayerAbilitiesPacket;
-import net.minecraft.network.protocol.game.ServerboundPlayerActionPacket;
-import net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket;
-import net.minecraft.network.protocol.game.ServerboundPlayerInputPacket;
-import net.minecraft.network.protocol.game.ServerboundPongPacket;
-import net.minecraft.network.protocol.game.ServerboundRecipeBookChangeSettingsPacket;
-import net.minecraft.network.protocol.game.ServerboundRecipeBookSeenRecipePacket;
-import net.minecraft.network.protocol.game.ServerboundRenameItemPacket;
-import net.minecraft.network.protocol.game.ServerboundResourcePackPacket;
-import net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket;
-import net.minecraft.network.protocol.game.ServerboundSelectTradePacket;
-import net.minecraft.network.protocol.game.ServerboundSetBeaconPacket;
-import net.minecraft.network.protocol.game.ServerboundSetCarriedItemPacket;
-import net.minecraft.network.protocol.game.ServerboundSetCommandBlockPacket;
-import net.minecraft.network.protocol.game.ServerboundSetCommandMinecartPacket;
-import net.minecraft.network.protocol.game.ServerboundSetCreativeModeSlotPacket;
-import net.minecraft.network.protocol.game.ServerboundSetJigsawBlockPacket;
-import net.minecraft.network.protocol.game.ServerboundSetStructureBlockPacket;
-import net.minecraft.network.protocol.game.ServerboundSignUpdatePacket;
-import net.minecraft.network.protocol.game.ServerboundSwingPacket;
-import net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket;
-import net.minecraft.network.protocol.game.ServerboundUseItemOnPacket;
-import net.minecraft.network.protocol.game.ServerboundUseItemPacket;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
@@ -143,39 +44,22 @@ import net.minecraft.util.StringUtil;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.ExperienceOrb;
-import net.minecraft.world.entity.HasCustomInventoryScreen;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MoverType;
-import net.minecraft.world.entity.PlayerRideableJumping;
-import net.minecraft.world.entity.RelativeMovement;
+import net.minecraft.world.entity.*;
+import net.minecraft.world.entity.animal.Bucketable;
+import net.minecraft.world.entity.animal.allay.Allay;
+import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.ChatVisiblity;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.ProfilePublicKey;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.vehicle.Boat;
-import net.minecraft.world.item.BlockItem;
-import net.minecraft.world.item.BucketItem;
-import net.minecraft.world.item.Item;
-import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.Items;
+import net.minecraft.world.inventory.*;
+import net.minecraft.world.item.*;
 import net.minecraft.world.item.crafting.Recipe;
-import net.minecraft.world.level.BaseCommandBlock;
-import net.minecraft.world.level.ClipContext;
-import net.minecraft.world.level.GameRules;
-import net.minecraft.world.level.GameType;
-import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.*;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CommandBlock;
-import net.minecraft.world.level.block.entity.BlockEntity;
-import net.minecraft.world.level.block.entity.CommandBlockEntity;
-import net.minecraft.world.level.block.entity.JigsawBlockEntity;
-import net.minecraft.world.level.block.entity.SignBlockEntity;
-import net.minecraft.world.level.block.entity.StructureBlockEntity;
-import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.entity.*;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
@@ -184,69 +68,41 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
-import org.slf4j.Logger;
-
-// CraftBukkit start
-import io.papermc.paper.adventure.ChatProcessor; // Paper
-import io.papermc.paper.adventure.PaperAdventure; // Paper
-import com.mojang.datafixers.util.Pair;
-import java.util.Arrays;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.atomic.AtomicInteger;
-import net.minecraft.network.chat.OutgoingChatMessage;
-import net.minecraft.world.entity.animal.Bucketable;
-import net.minecraft.world.entity.animal.allay.Allay;
-import net.minecraft.world.entity.item.ItemEntity;
-import net.minecraft.world.inventory.AbstractContainerMenu;
-import net.minecraft.world.inventory.AnvilMenu;
-import net.minecraft.world.inventory.BeaconMenu;
-import net.minecraft.world.inventory.MerchantMenu;
-import net.minecraft.world.inventory.RecipeBookMenu;
-import net.minecraft.world.inventory.Slot;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
-import org.bukkit.craftbukkit.util.CraftLocation;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
-import org.bukkit.craftbukkit.util.LazyPlayerSet;
-import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.craftbukkit.util.*;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.Action;
-import org.bukkit.event.block.SignChangeEvent;
 import org.bukkit.event.inventory.ClickType;
-import org.bukkit.event.inventory.CraftItemEvent;
-import org.bukkit.event.inventory.InventoryAction;
-import org.bukkit.event.inventory.InventoryClickEvent;
-import org.bukkit.event.inventory.InventoryCloseEvent; // Paper
-import org.bukkit.event.inventory.InventoryCreativeEvent;
+import org.bukkit.event.inventory.*;
 import org.bukkit.event.inventory.InventoryType.SlotType;
-import org.bukkit.event.inventory.SmithItemEvent;
-import org.bukkit.event.player.AsyncPlayerChatEvent;
-import org.bukkit.event.player.PlayerAnimationEvent;
-import org.bukkit.event.player.PlayerAnimationType;
-import org.bukkit.event.player.PlayerChatEvent;
-import org.bukkit.event.player.PlayerCommandPreprocessEvent;
-import org.bukkit.event.player.PlayerInteractAtEntityEvent;
-import org.bukkit.event.player.PlayerInteractEntityEvent;
-import org.bukkit.event.player.PlayerItemHeldEvent;
-import org.bukkit.event.player.PlayerKickEvent;
-import org.bukkit.event.player.PlayerMoveEvent;
-import org.bukkit.event.player.PlayerResourcePackStatusEvent;
+import org.bukkit.event.player.*;
 import org.bukkit.event.player.PlayerRespawnEvent.RespawnReason;
-import org.bukkit.event.player.PlayerSwapHandItemsEvent;
-import org.bukkit.event.player.PlayerTeleportEvent;
-import org.bukkit.event.player.PlayerToggleFlightEvent;
-import org.bukkit.event.player.PlayerToggleSneakEvent;
-import org.bukkit.event.player.PlayerToggleSprintEvent;
 import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.SmithingInventory;
+import org.slf4j.Logger;
+
+import javax.annotation.Nullable;
+import java.net.SocketAddress;
+import java.time.Duration;
+import java.time.Instant;
+import java.util.*;
+import java.util.concurrent.CancellationException;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.BiFunction;
+import java.util.function.Consumer;
+import java.util.function.UnaryOperator;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 // CraftBukkit end
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, TickablePacketListener, ServerGamePacketListener {
@@ -268,7 +124,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     // CraftBukkit start - multithreaded fields
     private final AtomicInteger chatSpamTickCount = new AtomicInteger();
     private final java.util.concurrent.atomic.AtomicInteger tabSpamLimiter = new java.util.concurrent.atomic.AtomicInteger(); // Paper - configurable tab spam limits
-    private final java.util.concurrent.atomic.AtomicInteger recipeSpamPackets =  new java.util.concurrent.atomic.AtomicInteger(); // Paper - auto recipe limit
+    private final java.util.concurrent.atomic.AtomicInteger recipeSpamPackets = new java.util.concurrent.atomic.AtomicInteger(); // Paper - auto recipe limit
     // CraftBukkit end
     private int dropSpamTickCount;
     private double firstGoodX;
@@ -330,7 +186,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     private int lastTick = MinecraftServer.currentTick;
     private int allowedPlayerTicks = 1;
     private int lastDropTick = MinecraftServer.currentTick;
-    private int lastBookTick  = MinecraftServer.currentTick;
+    private int lastBookTick = MinecraftServer.currentTick;
     private int dropCount = 0;
 
     // Get position of last block hit for BlockDamageLevel.STOPPED
@@ -364,7 +220,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         this.knownMovePacketCount = this.receivedMovePacketCount;
         if (this.clientIsFloating && !this.player.isSleeping() && !this.player.isPassenger() && !this.player.isDeadOrDying()) {
             if (++this.aboveGroundTickCount > 80) {
-                ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked for floating too long!", this.player.getName().getString());
+                ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked for floating too long!", this.player.getName()
+                        .getString());
                 this.disconnect(io.papermc.paper.configuration.GlobalConfiguration.get().messages.kick.flyingPlayer, org.bukkit.event.player.PlayerKickEvent.Cause.FLYING_PLAYER); // Paper - use configurable kick message & kick event cause
                 return;
             }
@@ -383,7 +240,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             this.vehicleLastGoodZ = this.lastVehicle.getZ();
             if (this.clientVehicleIsFloating && this.player.getRootVehicle().getControllingPassenger() == this.player) {
                 if (++this.aboveGroundVehicleTickCount > 80) {
-                    ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getName().getString());
+                    ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getName()
+                            .getString());
                     this.disconnect(io.papermc.paper.configuration.GlobalConfiguration.get().messages.kick.flyingVehicle, org.bukkit.event.player.PlayerKickEvent.Cause.FLYING_VEHICLE); // Paper - use configurable kick message & kick event cause
                     return;
                 }
@@ -420,7 +278,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
         this.server.getProfiler().pop();
         // CraftBukkit start
-        for (int spam; (spam = this.chatSpamTickCount.get()) > 0 && !this.chatSpamTickCount.compareAndSet(spam, spam - 1); ) ;
+        for (int spam; (spam = this.chatSpamTickCount.get()) > 0 && !this.chatSpamTickCount.compareAndSet(spam, spam - 1); )
+            ;
         if (tabSpamLimiter.get() > 0) tabSpamLimiter.getAndDecrement(); // Paper - split to seperate variable
         if (recipeSpamPackets.get() > 0) recipeSpamPackets.getAndDecrement(); // Paper
         /* Use thread-safe field access instead
@@ -469,11 +328,13 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @io.papermc.paper.annotation.DoNotUse // Paper
     public void disconnect(String s) {
         // Paper start
-        this.disconnect(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(s), org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN);
+        this.disconnect(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .deserialize(s), org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN);
     }
 
     public void disconnect(String s, PlayerKickEvent.Cause cause) {
-        this.disconnect(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(s), cause);
+        this.disconnect(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .deserialize(s), cause);
     }
 
     @io.papermc.paper.annotation.DoNotUse // Paper
@@ -512,7 +373,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             return;
         }
 
-        net.kyori.adventure.text.Component leaveMessage = net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? this.player.getBukkitEntity().displayName() : net.kyori.adventure.text.Component.text(this.player.getScoreboardName())); // Paper - Adventure
+        net.kyori.adventure.text.Component leaveMessage = net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? this.player.getBukkitEntity()
+                .displayName() : net.kyori.adventure.text.Component.text(this.player.getScoreboardName())); // Paper - Adventure
 
         PlayerKickEvent event = new PlayerKickEvent(this.player.getBukkitEntity(), reason, leaveMessage, cause); // Paper - Adventure & kick event reason
 
@@ -594,12 +456,18 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
             if (entity != this.player && entity.getControllingPassenger() == this.player && entity == this.lastVehicle) {
                 ServerLevel worldserver = this.player.serverLevel();
-                double d0 = entity.getX();final double fromX = d0; // Paper - OBFHELPER
-                double d1 = entity.getY();final double fromY = d1; // Paper - OBFHELPER
-                double d2 = entity.getZ();final double fromZ = d2; // Paper - OBFHELPER
-                double d3 = ServerGamePacketListenerImpl.clampHorizontal(packet.getX()); final double toX = d3; // Paper - OBFHELPER
-                double d4 = ServerGamePacketListenerImpl.clampVertical(packet.getY()); final double toY = d4; // Paper - OBFHELPER
-                double d5 = ServerGamePacketListenerImpl.clampHorizontal(packet.getZ()); final double toZ = d5; // Paper - OBFHELPER
+                double d0 = entity.getX();
+                final double fromX = d0; // Paper - OBFHELPER
+                double d1 = entity.getY();
+                final double fromY = d1; // Paper - OBFHELPER
+                double d2 = entity.getZ();
+                final double fromZ = d2; // Paper - OBFHELPER
+                double d3 = ServerGamePacketListenerImpl.clampHorizontal(packet.getX());
+                final double toX = d3; // Paper - OBFHELPER
+                double d4 = ServerGamePacketListenerImpl.clampVertical(packet.getY());
+                final double toY = d4; // Paper - OBFHELPER
+                double d5 = ServerGamePacketListenerImpl.clampHorizontal(packet.getZ());
+                final double toZ = d5; // Paper - OBFHELPER
                 float f = Mth.wrapDegrees(packet.getYRot());
                 float f1 = Mth.wrapDegrees(packet.getXRot());
                 double d6 = d3 - this.vehicleFirstGoodX;
@@ -647,16 +515,18 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
                 // Paper start - Prevent moving into unloaded chunks
                 if (this.player.level().paperConfig().chunks.preventMovingIntoUnloadedChunks && (
-                    !worldserver.areChunksLoadedForMove(this.player.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(this.player.position()))) ||
-                        !worldserver.areChunksLoadedForMove(entity.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(entity.position())))
-                    )) {
+                        !worldserver.areChunksLoadedForMove(this.player.getBoundingBox()
+                                .expandTowards(new Vec3(toX, toY, toZ).subtract(this.player.position()))) ||
+                                !worldserver.areChunksLoadedForMove(entity.getBoundingBox()
+                                        .expandTowards(new Vec3(toX, toY, toZ).subtract(entity.position())))
+                )) {
                     this.connection.send(new ClientboundMoveVehiclePacket(entity));
                     return;
                 }
                 // Paper end
 
                 if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isSingleplayerOwner()) {
-                // CraftBukkit end
+                    // CraftBukkit end
                     ServerGamePacketListenerImpl.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", new Object[]{entity.getName().getString(), this.player.getName().getString(), d6, d7, d8});
                     this.connection.send(new ClientboundMoveVehiclePacket(entity));
                     return;
@@ -719,8 +589,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 // CraftBukkit start - fire PlayerMoveEvent
                 Player player = this.getCraftPlayer();
                 // Spigot Start
-                if ( !this.hasMoved )
-                {
+                if (!this.hasMoved) {
                     this.lastPosX = curPos.getX();
                     this.lastPosY = curPos.getY();
                     this.lastPosZ = curPos.getZ();
@@ -730,7 +599,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 }
                 // Spigot End
                 Location from = new Location(player.getWorld(), this.lastPosX, this.lastPosY, this.lastPosZ, this.lastYaw, this.lastPitch); // Get the Players previous Event location.
-                Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+                Location to = player.getLocation()
+                        .clone(); // Start off the To location as the Players current location.
 
                 // If the packet contains movement information then we update the To location with the correct XYZ.
                 to.setX(packet.getX());
@@ -769,7 +639,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                         // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
                         // We only do this if the Event was not cancelled.
                         if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
-                            this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
+                            this.player.getBukkitEntity()
+                                    .teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
                             return;
                         }
 
@@ -849,7 +720,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @Override
     public void handleRecipeBookSeenRecipePacket(ServerboundRecipeBookSeenRecipePacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
-        Optional<? extends Recipe<?>> optional = this.server.getRecipeManager().byKey(packet.getRecipe()); // CraftBukkit - decompile error
+        Optional<? extends Recipe<?>> optional = this.server.getRecipeManager()
+                .byKey(packet.getRecipe()); // CraftBukkit - decompile error
         ServerRecipeBook recipebookserver = this.player.getRecipeBook();
 
         Objects.requireNonNull(recipebookserver);
@@ -878,18 +750,24 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
     // Paper start
     private static final java.util.concurrent.ExecutorService TAB_COMPLETE_EXECUTOR = java.util.concurrent.Executors.newFixedThreadPool(4,
-        new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async Tab Complete Thread - #%d").setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(net.minecraft.server.MinecraftServer.LOGGER)).build());
+            new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true)
+                    .setNameFormat("Async Tab Complete Thread - #%d")
+                    .setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(net.minecraft.server.MinecraftServer.LOGGER))
+                    .build());
+
     // Paper end
     @Override
     public void handleCustomCommandSuggestions(ServerboundCommandSuggestionPacket packet) {
         // PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel()); // Paper - run this async
         // CraftBukkit start
-        if (this.chatSpamTickCount.addAndGet(io.papermc.paper.configuration.GlobalConfiguration.get().spamLimiter.tabSpamIncrement) > io.papermc.paper.configuration.GlobalConfiguration.get().spamLimiter.tabSpamLimit && !this.server.getPlayerList().isOp(this.player.getGameProfile())) { // Paper start - split and make configurable
+        if (this.chatSpamTickCount.addAndGet(io.papermc.paper.configuration.GlobalConfiguration.get().spamLimiter.tabSpamIncrement) > io.papermc.paper.configuration.GlobalConfiguration.get().spamLimiter.tabSpamLimit && !this.server.getPlayerList()
+                .isOp(this.player.getGameProfile())) { // Paper start - split and make configurable
             server.scheduleOnMain(() -> this.disconnect(Component.translatable("disconnect.spam", new Object[0]), org.bukkit.event.player.PlayerKickEvent.Cause.SPAM)); // Paper - kick event cause
             return;
         }
         // Paper start
-        String str = packet.getCommand(); int index = -1;
+        String str = packet.getCommand();
+        int index = -1;
         if (str.length() > 64 && ((index = str.indexOf(' ')) == -1 || index >= 64)) {
             server.scheduleOnMain(() -> this.disconnect(Component.translatable("disconnect.spam", new Object[0]), org.bukkit.event.player.PlayerKickEvent.Cause.SPAM)); // Paper
             return;
@@ -903,11 +781,11 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         // Paper end - Don't suggest if tab-complete is disabled
         // Paper start - async tab completion
         TAB_COMPLETE_EXECUTOR.execute(() -> {
-        StringReader stringreader = new StringReader(packet.getCommand());
+            StringReader stringreader = new StringReader(packet.getCommand());
 
-        if (stringreader.canRead() && stringreader.peek() == '/') {
-            stringreader.skip();
-        }
+            if (stringreader.canRead() && stringreader.peek() == '/') {
+                stringreader.skip();
+            }
             final String command = packet.getCommand();
             final com.destroystokyo.paper.event.server.AsyncTabCompleteEvent event = new com.destroystokyo.paper.event.server.AsyncTabCompleteEvent(this.getCraftPlayer(), command, true, null);
             event.callEvent();
@@ -917,21 +795,27 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 if (!event.isCancelled()) {
 
                     this.server.scheduleOnMain(() -> { // This needs to be on main
-                        ParseResults<CommandSourceStack> parseresults = this.server.getCommands().getDispatcher().parse(stringreader, this.player.createCommandSourceStack());
-
-                        this.server.getCommands().getDispatcher().getCompletionSuggestions(parseresults).thenAccept((suggestions) -> {
-                            // Paper start - Brigadier API
-                            com.destroystokyo.paper.event.brigadier.AsyncPlayerSendSuggestionsEvent suggestEvent = new com.destroystokyo.paper.event.brigadier.AsyncPlayerSendSuggestionsEvent(this.getCraftPlayer(), suggestions, command);
-                            suggestEvent.setCancelled(suggestions.isEmpty());
-                            if (!suggestEvent.callEvent()) return;
-                            this.connection.send(new ClientboundCommandSuggestionsPacket(packet.getId(), suggestEvent.getSuggestions()));
-                            // Paper end - Brigadier API
-                        });
+                        ParseResults<CommandSourceStack> parseresults = this.server.getCommands()
+                                .getDispatcher()
+                                .parse(stringreader, this.player.createCommandSourceStack());
+
+                        this.server.getCommands()
+                                .getDispatcher()
+                                .getCompletionSuggestions(parseresults)
+                                .thenAccept((suggestions) -> {
+                                    // Paper start - Brigadier API
+                                    com.destroystokyo.paper.event.brigadier.AsyncPlayerSendSuggestionsEvent suggestEvent = new com.destroystokyo.paper.event.brigadier.AsyncPlayerSendSuggestionsEvent(this.getCraftPlayer(), suggestions, command);
+                                    suggestEvent.setCancelled(suggestions.isEmpty());
+                                    if (!suggestEvent.callEvent()) return;
+                                    this.connection.send(new ClientboundCommandSuggestionsPacket(packet.getId(), suggestEvent.getSuggestions()));
+                                    // Paper end - Brigadier API
+                                });
                     });
                 }
             } else if (!completions.isEmpty()) {
                 final com.mojang.brigadier.suggestion.SuggestionsBuilder builder0 = new com.mojang.brigadier.suggestion.SuggestionsBuilder(command, stringreader.getTotalLength());
-                final com.mojang.brigadier.suggestion.SuggestionsBuilder builder = builder0.createOffset(builder0.getInput().lastIndexOf(' ') + 1);
+                final com.mojang.brigadier.suggestion.SuggestionsBuilder builder = builder0.createOffset(builder0.getInput()
+                        .lastIndexOf(' ') + 1);
                 completions.forEach(completion -> {
                     final Integer intSuggestion = com.google.common.primitives.Ints.tryParse(completion.suggestion());
                     if (intSuggestion != null) {
@@ -957,7 +841,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (!this.server.isCommandBlockEnabled()) {
             this.player.sendSystemMessage(Component.translatable("advMode.notEnabled"));
-        } else if (!this.player.canUseGameMasterBlocks() && (!this.player.isCreative() || !this.player.getBukkitEntity().hasPermission("minecraft.commandblock"))) { // Paper - command block permission
+        } else if (!this.player.canUseGameMasterBlocks() && (!this.player.isCreative() || !this.player.getBukkitEntity()
+                .hasPermission("minecraft.commandblock"))) { // Paper - command block permission
             this.player.sendSystemMessage(Component.translatable("advMode.notAllowed"));
         } else {
             BaseCommandBlock commandblocklistenerabstract = null;
@@ -1024,7 +909,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (!this.server.isCommandBlockEnabled()) {
             this.player.sendSystemMessage(Component.translatable("advMode.notEnabled"));
-        } else if (!this.player.canUseGameMasterBlocks() && (!this.player.isCreative() || !this.player.getBukkitEntity().hasPermission("minecraft.commandblock"))) { // Paper - command block permission
+        } else if (!this.player.canUseGameMasterBlocks() && (!this.player.isCreative() || !this.player.getBukkitEntity()
+                .hasPermission("minecraft.commandblock"))) { // Paper - command block permission
             this.player.sendSystemMessage(Component.translatable("advMode.notAllowed"));
         } else {
             BaseCommandBlock commandblocklistenerabstract = packet.getCommandBlock(this.player.level());
@@ -1048,14 +934,17 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         // Paper start - validate pick item position
         if (!(packet.getSlot() >= 0 && packet.getSlot() < this.player.getInventory().items.size())) {
-            ServerGamePacketListenerImpl.LOGGER.warn("{} tried to set an invalid carried item", this.player.getName().getString());
+            ServerGamePacketListenerImpl.LOGGER.warn("{} tried to set an invalid carried item", this.player.getName()
+                    .getString());
             this.disconnect("Invalid hotbar selection (Hacking?)", org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_ACTION); // Paper - kick event cause
             return;
         }
         this.player.getInventory().pickSlot(packet.getSlot()); // Paper - Diff above if changed
         // Paper end
-        this.player.connection.send(new ClientboundContainerSetSlotPacket(-2, 0, this.player.getInventory().selected, this.player.getInventory().getItem(this.player.getInventory().selected)));
-        this.player.connection.send(new ClientboundContainerSetSlotPacket(-2, 0, packet.getSlot(), this.player.getInventory().getItem(packet.getSlot())));
+        this.player.connection.send(new ClientboundContainerSetSlotPacket(-2, 0, this.player.getInventory().selected, this.player.getInventory()
+                .getItem(this.player.getInventory().selected)));
+        this.player.connection.send(new ClientboundContainerSetSlotPacket(-2, 0, packet.getSlot(), this.player.getInventory()
+                .getItem(packet.getSlot())));
         this.player.connection.send(new ClientboundSetCarriedItemPacket(this.player.getInventory().selected));
     }
 
@@ -1254,7 +1143,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             }
 
             if (byteTotal > byteAllowed) {
-                ServerGamePacketListenerImpl.LOGGER.warn(this.player.getScoreboardName() + " tried to send too large of a book. Book Size: " + byteTotal + " - Allowed:  "+ byteAllowed + " - Pages: " + pageList.size());
+                ServerGamePacketListenerImpl.LOGGER.warn(this.player.getScoreboardName() + " tried to send too large of a book. Book Size: " + byteTotal + " - Allowed:  " + byteAllowed + " - Pages: " + pageList.size());
                 server.scheduleOnMain(() -> this.disconnect("Book too large!", org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_ACTION)); // Paper - kick event cause
                 return;
             }
@@ -1353,7 +1242,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         }
 
         itemstack.addTagElement("pages", nbttaglist);
-        this.player.getInventory().setItem(slot, CraftEventFactory.handleEditBookEvent(player, slot, handItem, itemstack)); // CraftBukkit // Paper - Don't ignore result (see other callsite for handleEditBookEvent)
+        this.player.getInventory()
+                .setItem(slot, CraftEventFactory.handleEditBookEvent(player, slot, handItem, itemstack)); // CraftBukkit // Paper - Don't ignore result (see other callsite for handleEditBookEvent)
     }
 
     @Override
@@ -1403,11 +1293,16 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                     this.allowedPlayerTicks = 20; // CraftBukkit
                 } else {
                     this.awaitingTeleportTime = this.tickCount;
-                    double d0 = ServerGamePacketListenerImpl.clampHorizontal(packet.getX(this.player.getX())); final double toX = d0; // Paper - OBFHELPER
-                    double d1 = ServerGamePacketListenerImpl.clampVertical(packet.getY(this.player.getY())); final double toY = d1;
-                    double d2 = ServerGamePacketListenerImpl.clampHorizontal(packet.getZ(this.player.getZ())); final double toZ = d2; // Paper - OBFHELPER
-                    float f = Mth.wrapDegrees(packet.getYRot(this.player.getYRot())); final float toYaw = f; // Paper - OBFHELPER
-                    float f1 = Mth.wrapDegrees(packet.getXRot(this.player.getXRot())); final float toPitch = f1; // Paper - OBFHELPER
+                    double d0 = ServerGamePacketListenerImpl.clampHorizontal(packet.getX(this.player.getX()));
+                    final double toX = d0; // Paper - OBFHELPER
+                    double d1 = ServerGamePacketListenerImpl.clampVertical(packet.getY(this.player.getY()));
+                    final double toY = d1;
+                    double d2 = ServerGamePacketListenerImpl.clampHorizontal(packet.getZ(this.player.getZ()));
+                    final double toZ = d2; // Paper - OBFHELPER
+                    float f = Mth.wrapDegrees(packet.getYRot(this.player.getYRot()));
+                    final float toYaw = f; // Paper - OBFHELPER
+                    float f1 = Mth.wrapDegrees(packet.getXRot(this.player.getXRot()));
+                    final float toPitch = f1; // Paper - OBFHELPER
 
                     if (this.player.isPassenger()) {
                         this.player.absMoveTo(this.player.getX(), this.player.getY(), this.player.getZ(), f, f1);
@@ -1456,7 +1351,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             this.lastTick = (int) (System.currentTimeMillis() / 50);
 
                             if (i > Math.max(this.allowedPlayerTicks, 5)) {
-                                ServerGamePacketListenerImpl.LOGGER.debug("{} is sending move packets too frequently ({} packets since last tick)", this.player.getName().getString(), i);
+                                ServerGamePacketListenerImpl.LOGGER.debug("{} is sending move packets too frequently ({} packets since last tick)", this.player.getName()
+                                        .getString(), i);
                                 i = 1;
                             }
 
@@ -1472,31 +1368,35 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                 speed = this.player.getAbilities().walkingSpeed * 10f;
                             }
                             // Paper start - Prevent moving into unloaded chunks
-                            if (this.player.level().paperConfig().chunks.preventMovingIntoUnloadedChunks && (this.player.getX() != toX || this.player.getZ() != toZ) && !worldserver.areChunksLoadedForMove(this.player.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(this.player.position())))) {
+                            if (this.player.level()
+                                    .paperConfig().chunks.preventMovingIntoUnloadedChunks && (this.player.getX() != toX || this.player.getZ() != toZ) && !worldserver.areChunksLoadedForMove(this.player.getBoundingBox()
+                                    .expandTowards(new Vec3(toX, toY, toZ).subtract(this.player.position())))) {
                                 // Paper start - Add fail move event
                                 io.papermc.paper.event.player.PlayerFailMoveEvent event = fireFailMove(io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.MOVED_INTO_UNLOADED_CHUNK,
-                                    toX, toY, toZ, toYaw, toPitch, false);
+                                        toX, toY, toZ, toYaw, toPitch, false);
                                 if (!event.isAllowed()) {
-                                this.internalTeleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot(), Collections.emptySet());
-                                return;
+                                    this.internalTeleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot(), Collections.emptySet());
+                                    return;
                                 }
                                 // Paper end
                             }
                             // Paper end
 
-                            if (!this.player.isChangingDimension() && (!this.player.level().getGameRules().getBoolean(GameRules.RULE_DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isFallFlying())) {
+                            if (!this.player.isChangingDimension() && (!this.player.level()
+                                    .getGameRules()
+                                    .getBoolean(GameRules.RULE_DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isFallFlying())) {
                                 float f2 = this.player.isFallFlying() ? 300.0F : 100.0F;
 
                                 if (d10 - d9 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isSingleplayerOwner()) {
-                                // CraftBukkit end
+                                    // CraftBukkit end
                                     // Paper start - Add fail move event
                                     io.papermc.paper.event.player.PlayerFailMoveEvent event = fireFailMove(io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.MOVED_TOO_QUICKLY,
-                                        toX, toY, toZ, toYaw, toPitch, true);
+                                            toX, toY, toZ, toYaw, toPitch, true);
                                     if (!event.isAllowed()) {
                                         if (event.getLogWarning())
-                                    ServerGamePacketListenerImpl.LOGGER.warn("{} moved too quickly! {},{},{}", new Object[]{this.player.getName().getString(), d6, d7, d8});
-                                    this.teleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot());
-                                    return;
+                                            ServerGamePacketListenerImpl.LOGGER.warn("{} moved too quickly! {},{},{}", new Object[]{this.player.getName().getString(), d6, d7, d8});
+                                        this.teleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot());
+                                        return;
                                     }
                                     // Paper end
                                 }
@@ -1513,7 +1413,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                 // Paper start - Add player jump event
                                 Player player = this.getCraftPlayer();
                                 Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
-                                Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+                                Location to = player.getLocation()
+                                        .clone(); // Start off the To location as the Players current location.
 
                                 // If the packet contains movement information then we update the To location with the correct XYZ.
                                 if (packet.hasPos) {
@@ -1565,11 +1466,12 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             if (!this.player.isChangingDimension() && d10 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.gameMode.isCreative() && this.player.gameMode.getGameModeForPlayer() != GameType.SPECTATOR) { // Spigot
                                 // Paper start - Add fail move event
                                 io.papermc.paper.event.player.PlayerFailMoveEvent event = fireFailMove(io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.MOVED_WRONGLY,
-                                    toX, toY, toZ, toYaw, toPitch, true);
+                                        toX, toY, toZ, toYaw, toPitch, true);
                                 if (!event.isAllowed()) {
-                                flag2 = true; // Paper - diff on change, this should be moved wrongly
+                                    flag2 = true; // Paper - diff on change, this should be moved wrongly
                                     if (event.getLogWarning())
-                                ServerGamePacketListenerImpl.LOGGER.warn("{} moved wrongly!", this.player.getName().getString());
+                                        ServerGamePacketListenerImpl.LOGGER.warn("{} moved wrongly!", this.player.getName()
+                                                .getString());
                                 }
                                 // Paper end
                             }
@@ -1587,7 +1489,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                     // Paper start - Add fail move event
                                     if (teleportBack) {
                                         io.papermc.paper.event.player.PlayerFailMoveEvent event = fireFailMove(io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.CLIPPED_INTO_BLOCK,
-                                            toX, toY, toZ, toYaw, toPitch, false);
+                                                toX, toY, toZ, toYaw, toPitch, false);
                                         if (event.isAllowed()) {
                                             teleportBack = false;
                                         }
@@ -1605,7 +1507,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
                                 Player player = this.getCraftPlayer();
                                 Location from = new Location(player.getWorld(), this.lastPosX, this.lastPosY, this.lastPosZ, this.lastYaw, this.lastPitch); // Get the Players previous Event location.
-                                Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+                                Location to = player.getLocation()
+                                        .clone(); // Start off the To location as the Players current location.
 
                                 // If the packet contains movement information then we update the To location with the correct XYZ.
                                 if (packet.hasPos) {
@@ -1647,7 +1550,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                         // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
                                         // We only do this if the Event was not cancelled.
                                         if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
-                                            this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
+                                            this.player.getBukkitEntity()
+                                                    .teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
                                             return;
                                         }
 
@@ -1683,22 +1587,23 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
     // Paper start - Add fail move event
     private io.papermc.paper.event.player.PlayerFailMoveEvent fireFailMove(io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason failReason,
-               double toX, double toY, double toZ, float toYaw, float toPitch, boolean logWarning) {
+                                                                           double toX, double toY, double toZ, float toYaw, float toPitch, boolean logWarning) {
         Player player = this.getCraftPlayer();
         Location from = new Location(player.getWorld(), this.lastPosX, this.lastPosY, this.lastPosZ, this.lastYaw, this.lastPitch);
         Location to = new Location(player.getWorld(), toX, toY, toZ, toYaw, toPitch);
         io.papermc.paper.event.player.PlayerFailMoveEvent event = new io.papermc.paper.event.player.PlayerFailMoveEvent(player, failReason,
-            false, logWarning, from, to);
+                false, logWarning, from, to);
         event.callEvent();
         return event;
     }
+
     // Paper end
     // Paper start - optimise out extra getCubes
     private boolean hasNewCollision(final ServerLevel world, final Entity entity, final AABB oldBox, final AABB newBox) {
         final List<AABB> collisions = io.papermc.paper.util.CachedLists.getTempCollisionList();
         try {
             io.papermc.paper.util.CollisionUtil.getCollisions(world, entity, newBox, collisions, false, true,
-                true, false, null, null);
+                    true, false, null, null);
 
             for (int i = 0, len = collisions.size(); i < len; ++i) {
                 final AABB box = collisions.get(i);
@@ -1712,9 +1617,11 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             io.papermc.paper.util.CachedLists.returnTempCollisionList(collisions);
         }
     }
+
     // Paper end - optimise out extra getCubes
     private boolean isPlayerCollidingWithAnythingNew(LevelReader world, AABB box, double newX, double newY, double newZ) {
-        AABB axisalignedbb1 = this.player.getBoundingBox().move(newX - this.player.getX(), newY - this.player.getY(), newZ - this.player.getZ());
+        AABB axisalignedbb1 = this.player.getBoundingBox()
+                .move(newX - this.player.getX(), newY - this.player.getY(), newZ - this.player.getZ());
         Iterable<VoxelShape> iterable = world.getCollisions(this.player, axisalignedbb1.deflate(9.999999747378752E-6D));
         VoxelShape voxelshape = Shapes.create(box.deflate(9.999999747378752E-6D));
         Iterator iterator = iterable.iterator();
@@ -1794,7 +1701,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         // Paper start
         if (player.isRemoved()) {
             LOGGER.info("Attempt to teleport removed player {} restricted", player.getScoreboardName());
-            if (server.isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread("Attempt to teleport removed player");
+            if (server.isDebugging())
+                io.papermc.paper.util.TraceUtil.dumpTraceForThread("Attempt to teleport removed player");
             return;
         }
         // Paper end
@@ -1903,7 +1811,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             case ABORT_DESTROY_BLOCK:
             case STOP_DESTROY_BLOCK:
                 // Paper start - Don't allow digging in unloaded chunks
-                if (this.player.level().getChunkIfLoadedImmediately(blockposition.getX() >> 4, blockposition.getZ() >> 4) == null) {
+                if (this.player.level()
+                        .getChunkIfLoadedImmediately(blockposition.getX() >> 4, blockposition.getZ() >> 4) == null) {
                     this.player.connection.ackBlockChangesUpTo(packet.getSequence());
                     return;
                 }
@@ -1912,7 +1821,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 this.player.gameMode.capturedBlockEntity = false;
                 this.player.gameMode.captureSentBlockEntities = true;
                 // Paper end - send block entities after prediction
-                this.player.gameMode.handleBlockBreakAction(blockposition, packetplayinblockdig_enumplayerdigtype, packet.getDirection(), this.player.level().getMaxBuildHeight(), packet.getSequence());
+                this.player.gameMode.handleBlockBreakAction(blockposition, packetplayinblockdig_enumplayerdigtype, packet.getDirection(), this.player.level()
+                        .getMaxBuildHeight(), packet.getSequence());
                 this.player.connection.ackBlockChangesUpTo(packet.getSequence());
                 // Paper start - send block entities after prediction
                 this.player.gameMode.captureSentBlockEntities = false;
@@ -1942,14 +1852,16 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         } else {
             Item item = stack.getItem();
 
-            return (item instanceof BlockItem || item instanceof BucketItem) && !player.getCooldowns().isOnCooldown(item);
+            return (item instanceof BlockItem || item instanceof BucketItem) && !player.getCooldowns()
+                    .isOnCooldown(item);
         }
     }
 
     // Spigot start - limit place/interactions
     private int limitedPackets;
     private long lastLimitedPacket = -1;
-    private static int getSpamThreshold() { return io.papermc.paper.configuration.GlobalConfiguration.get().spamLimiter.incomingPacketThreshold; } // Paper - Configurable threshold
+
+    private static int getSpamThreshold() {return io.papermc.paper.configuration.GlobalConfiguration.get().spamLimiter.incomingPacketThreshold;} // Paper - Configurable threshold
 
     private boolean checkLimit(long timestamp) {
         if (this.lastLimitedPacket != -1 && timestamp - this.lastLimitedPacket < getSpamThreshold() && this.limitedPackets++ >= 8) { // Paper - Use threshold, raise packet limit to 8
@@ -1987,7 +1899,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             BlockPos blockposition = movingobjectpositionblock.getBlockPos();
             Vec3 vec3d1 = Vec3.atCenterOf(blockposition);
 
-            if (this.player.getEyePosition().distanceToSqr(vec3d1) <= ServerGamePacketListenerImpl.MAX_INTERACTION_DISTANCE) {
+            if (this.player.getEyePosition()
+                    .distanceToSqr(vec3d1) <= ServerGamePacketListenerImpl.MAX_INTERACTION_DISTANCE) {
                 Vec3 vec3d2 = vec3d.subtract(vec3d1);
                 double d0 = 1.0000001D;
 
@@ -1998,12 +1911,14 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                     int i = this.player.level().getMaxBuildHeight();
 
                     if (blockposition.getY() < i) {
-                        if (this.awaitingPositionFromClient == null && this.player.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) < 64.0D && (worldserver.mayInteract(this.player, blockposition)  || (worldserver.paperConfig().spawn.allowUsingSignsInsideSpawnProtection && worldserver.getBlockState(blockposition).getBlock() instanceof net.minecraft.world.level.block.SignBlock))) { // Paper - sign check
+                        if (this.awaitingPositionFromClient == null && this.player.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) < 64.0D && (worldserver.mayInteract(this.player, blockposition) || (worldserver.paperConfig().spawn.allowUsingSignsInsideSpawnProtection && worldserver.getBlockState(blockposition)
+                                .getBlock() instanceof net.minecraft.world.level.block.SignBlock))) { // Paper - sign check
                             this.player.stopUsingItem(); // CraftBukkit - SPIGOT-4706
                             InteractionResult enuminteractionresult = this.player.gameMode.useItemOn(this.player, worldserver, itemstack, enumhand, movingobjectpositionblock);
 
                             if (enumdirection == Direction.UP && !enuminteractionresult.consumesAction() && blockposition.getY() >= i - 1 && ServerGamePacketListenerImpl.wasBlockPlacementAttempt(this.player, itemstack)) {
-                                MutableComponent ichatmutablecomponent = Component.translatable("build.tooHigh", i - 1).withStyle(ChatFormatting.RED);
+                                MutableComponent ichatmutablecomponent = Component.translatable("build.tooHigh", i - 1)
+                                        .withStyle(ChatFormatting.RED);
 
                                 this.player.sendSystemMessage(ichatmutablecomponent, true);
                             } else if (enuminteractionresult.shouldSwing() && !this.player.gameMode.interactResult) { // Paper
@@ -2011,7 +1926,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             }
                         }
                     } else {
-                        MutableComponent ichatmutablecomponent1 = Component.translatable("build.tooHigh", i - 1).withStyle(ChatFormatting.RED);
+                        MutableComponent ichatmutablecomponent1 = Component.translatable("build.tooHigh", i - 1)
+                                .withStyle(ChatFormatting.RED);
 
                         this.player.sendSystemMessage(ichatmutablecomponent1, true);
                     }
@@ -2052,9 +1968,10 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             float f6 = Mth.sin(-f1 * 0.017453292F);
             float f7 = f4 * f5;
             float f8 = f3 * f5;
-            double d3 = player.gameMode.getGameModeForPlayer()== GameType.CREATIVE ? 5.0D : 4.5D;
+            double d3 = player.gameMode.getGameModeForPlayer() == GameType.CREATIVE ? 5.0D : 4.5D;
             Vec3 vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
-            HitResult movingobjectposition = this.player.level().clip(new ClipContext(vec3d, vec3d1, ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, this.player));
+            HitResult movingobjectposition = this.player.level()
+                    .clip(new ClipContext(vec3d, vec3d1, ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, this.player));
 
             boolean cancelled;
             if (movingobjectposition == null || movingobjectposition.getType() != HitResult.Type.BLOCK) {
@@ -2113,13 +2030,15 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     public void handleResourcePackResponse(ServerboundResourcePackPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (packet.getAction() == ServerboundResourcePackPacket.Action.DECLINED && this.server.isResourcePackRequired()) {
-            ServerGamePacketListenerImpl.LOGGER.info("Disconnecting {} due to resource pack rejection", this.player.getGameProfile().getName()); // Paper - Don't print component in resource pack rejection message
+            ServerGamePacketListenerImpl.LOGGER.info("Disconnecting {} due to resource pack rejection", this.player.getGameProfile()
+                    .getName()); // Paper - Don't print component in resource pack rejection message
             this.disconnect(Component.translatable("multiplayer.requiredTexturePrompt.disconnect"), org.bukkit.event.player.PlayerKickEvent.Cause.RESOURCE_PACK_REJECTION); // Paper - add cause
         }
         // Paper start
         PlayerResourcePackStatusEvent.Status packStatus = PlayerResourcePackStatusEvent.Status.values()[packet.action.ordinal()];
         player.getBukkitEntity().setResourcePackStatus(packStatus);
-        this.cserver.getPluginManager().callEvent(new PlayerResourcePackStatusEvent(this.getCraftPlayer(), packStatus)); // CraftBukkit
+        this.cserver.getPluginManager()
+                .callEvent(new PlayerResourcePackStatusEvent(this.getCraftPlayer(), packStatus)); // CraftBukkit
         // Paper end
     }
 
@@ -2144,6 +2063,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         // Paper start
         this.onDisconnect(reason, null);
     }
+
     public void onDisconnect(Component reason, @Nullable net.kyori.adventure.text.Component quitMessage) {
         // Paper end
         // CraftBukkit start - Rarely it would send a disconnect line twice
@@ -2154,7 +2074,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         }
         // CraftBukkit end
         this.chatMessageChain.close();
-        ServerGamePacketListenerImpl.LOGGER.info("{} lost connection: {}", this.player.getName().getString(), reason.getString());
+        ServerGamePacketListenerImpl.LOGGER.info("{} lost connection: {}", this.player.getName()
+                .getString(), reason.getString());
         // CraftBukkit start - Replace vanilla quit message handling with our own.
         /*
         this.server.invalidateStatus();
@@ -2163,7 +2084,9 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
         this.player.disconnect();
         // Paper start - Adventure
-        quitMessage = quitMessage == null ? this.server.getPlayerList().remove(this.player) : this.server.getPlayerList().remove(this.player, quitMessage); // Paper - pass in quitMessage to fix kick message not being used
+        quitMessage = quitMessage == null ? this.server.getPlayerList()
+                .remove(this.player) : this.server.getPlayerList()
+                .remove(this.player, quitMessage); // Paper - pass in quitMessage to fix kick message not being used
         if ((quitMessage != null) && !quitMessage.equals(net.kyori.adventure.text.Component.empty())) {
             this.server.getPlayerList().broadcastSystemMessage(PaperAdventure.asVanilla(quitMessage), false);
             // Paper end
@@ -2219,7 +2142,9 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (this.player.isImmobile()) return; // CraftBukkit
         if (packet.getSlot() >= 0 && packet.getSlot() < Inventory.getSelectionSize()) {
-            if (packet.getSlot() == this.player.getInventory().selected) { return; } // Paper - don't fire itemheldevent when there wasn't a slot change
+            if (packet.getSlot() == this.player.getInventory().selected) {
+                return;
+            } // Paper - don't fire itemheldevent when there wasn't a slot change
             PlayerItemHeldEvent event = new PlayerItemHeldEvent(this.getCraftPlayer(), this.player.getInventory().selected, packet.getSlot());
             this.cserver.getPluginManager().callEvent(event);
             if (event.isCancelled()) {
@@ -2235,7 +2160,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             this.player.getInventory().selected = packet.getSlot();
             this.player.resetLastActionTime();
         } else {
-            ServerGamePacketListenerImpl.LOGGER.warn("{} tried to set an invalid carried item", this.player.getName().getString());
+            ServerGamePacketListenerImpl.LOGGER.warn("{} tried to set an invalid carried item", this.player.getName()
+                    .getString());
             this.disconnect("Invalid hotbar selection (Hacking?)", org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_ACTION); // CraftBukkit // Paper - kick event cause
         }
     }
@@ -2250,32 +2176,34 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         // CraftBukkit end
         if (ServerGamePacketListenerImpl.isChatMessageIllegal(packet.message())) {
             this.server.scheduleOnMain(() -> { // Paper - push to main for event firing
-            this.disconnect(Component.translatable("multiplayer.disconnect.illegal_characters"), org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_CHARACTERS); // Paper - add cause
+                this.disconnect(Component.translatable("multiplayer.disconnect.illegal_characters"), org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_CHARACTERS); // Paper - add cause
             }); // Paper - push to main for event firing
         } else {
             Optional<LastSeenMessages> optional = this.tryHandleChat(packet.message(), packet.timeStamp(), packet.lastSeenMessages());
 
             if (optional.isPresent()) {
                 // this.server.submit(() -> { // CraftBukkit - async chat
-                    PlayerChatMessage playerchatmessage;
+                PlayerChatMessage playerchatmessage;
 
-                    try {
-                        playerchatmessage = this.getSignedMessage(packet, (LastSeenMessages) optional.get());
-                    } catch (SignedMessageChain.DecodeException signedmessagechain_a) {
-                        this.handleMessageDecodeFailure(signedmessagechain_a);
-                        return;
-                    }
+                try {
+                    playerchatmessage = this.getSignedMessage(packet, (LastSeenMessages) optional.get());
+                } catch (SignedMessageChain.DecodeException signedmessagechain_a) {
+                    this.handleMessageDecodeFailure(signedmessagechain_a);
+                    return;
+                }
 
-                    CompletableFuture<FilteredText> completablefuture = this.filterTextPacket(playerchatmessage.signedContent());
-                    CompletableFuture<net.minecraft.network.chat.ChatDecorator.Result> completablefuture1 = this.server.getChatDecorator().decorate(this.player, null, playerchatmessage.decoratedContent()); // Paper
+                CompletableFuture<FilteredText> completablefuture = this.filterTextPacket(playerchatmessage.signedContent());
+                CompletableFuture<net.minecraft.network.chat.ChatDecorator.Result> completablefuture1 = this.server.getChatDecorator()
+                        .decorate(this.player, null, playerchatmessage.decoratedContent()); // Paper
 
-                    this.chatMessageChain.append((executor) -> {
-                        return CompletableFuture.allOf(completablefuture, completablefuture1).thenAcceptAsync((ovoid) -> {
-                            PlayerChatMessage playerchatmessage1 = playerchatmessage.filter(((FilteredText) completablefuture.join()).mask()).withResult(completablefuture1.join()); // Paper
+                this.chatMessageChain.append((executor) -> {
+                    return CompletableFuture.allOf(completablefuture, completablefuture1).thenAcceptAsync((ovoid) -> {
+                        PlayerChatMessage playerchatmessage1 = playerchatmessage.filter(((FilteredText) completablefuture.join()).mask())
+                                .withResult(completablefuture1.join()); // Paper
 
-                            this.broadcastChatMessage(playerchatmessage1);
-                        }, this.server.chatExecutor); // CraftBukkit - async chat
-                    });
+                        this.broadcastChatMessage(playerchatmessage1);
+                    }, this.server.chatExecutor); // CraftBukkit - async chat
+                });
                 // }); // CraftBukkit - async chat
             }
 
@@ -2286,7 +2214,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     public void handleChatCommand(ServerboundChatCommandPacket packet) {
         if (ServerGamePacketListenerImpl.isChatMessageIllegal(packet.command())) {
             this.server.scheduleOnMain(() -> { // Paper - push to main for event firing
-            this.disconnect(Component.translatable("multiplayer.disconnect.illegal_characters"), org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_CHARACTERS); // Paper
+                this.disconnect(Component.translatable("multiplayer.disconnect.illegal_characters"), org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_CHARACTERS); // Paper
             }); // Paper - push to main for event firing
         } else {
             Optional<LastSeenMessages> optional = this.tryHandleChat(packet.command(), packet.timeStamp(), packet.lastSeenMessages());
@@ -2311,7 +2239,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         // CraftBukkit start
         String command = "/" + packet.command();
         if (org.spigotmc.SpigotConfig.logCommands) { // Paper
-        ServerGamePacketListenerImpl.LOGGER.info(this.player.getScoreboardName() + " issued server command: " + command);
+            ServerGamePacketListenerImpl.LOGGER.info(this.player.getScoreboardName() + " issued server command: " + command);
         } // Paper
 
         PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(this.getCraftPlayer(), command, new LazyPlayerSet(this.server));
@@ -2328,7 +2256,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         Map map;
 
         try {
-            map = (packet.command().equals(command)) ? this.collectSignedArguments(packet, SignableCommand.of(parseresults), lastSeenMessages) : Collections.emptyMap(); // CraftBukkit
+            map = (packet.command()
+                    .equals(command)) ? this.collectSignedArguments(packet, SignableCommand.of(parseresults), lastSeenMessages) : Collections.emptyMap(); // CraftBukkit
         } catch (SignedMessageChain.DecodeException signedmessagechain_a) {
             this.handleMessageDecodeFailure(signedmessagechain_a);
             return;
@@ -2367,23 +2296,27 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     }
 
     private ParseResults<CommandSourceStack> parseCommand(String command) {
-        com.mojang.brigadier.CommandDispatcher<CommandSourceStack> com_mojang_brigadier_commanddispatcher = this.server.getCommands().getDispatcher();
+        com.mojang.brigadier.CommandDispatcher<CommandSourceStack> com_mojang_brigadier_commanddispatcher = this.server.getCommands()
+                .getDispatcher();
 
         return com_mojang_brigadier_commanddispatcher.parse(command, this.player.createCommandSourceStack());
     }
 
     private Optional<LastSeenMessages> tryHandleChat(String message, Instant timestamp, LastSeenMessages.Update acknowledgment) {
         if (!this.updateChatOrder(timestamp)) {
-            ServerGamePacketListenerImpl.LOGGER.warn("{} sent out-of-order chat: '{}': {} > {}", this.player.getName().getString(), message, this.lastChatTimeStamp.get().getEpochSecond(), timestamp.getEpochSecond()); // Paper
+            ServerGamePacketListenerImpl.LOGGER.warn("{} sent out-of-order chat: '{}': {} > {}", this.player.getName()
+                    .getString(), message, this.lastChatTimeStamp.get()
+                    .getEpochSecond(), timestamp.getEpochSecond()); // Paper
             this.server.scheduleOnMain(() -> { // Paper - push to main
-            this.disconnect(Component.translatable("multiplayer.disconnect.out_of_order_chat"), org.bukkit.event.player.PlayerKickEvent.Cause.OUT_OF_ORDER_CHAT); // Paper - kick event ca
+                this.disconnect(Component.translatable("multiplayer.disconnect.out_of_order_chat"), org.bukkit.event.player.PlayerKickEvent.Cause.OUT_OF_ORDER_CHAT); // Paper - kick event ca
             }); // Paper - push to main
             return Optional.empty();
         } else {
             Optional<LastSeenMessages> optional = this.unpackAndApplyLastSeen(acknowledgment);
 
             if (this.player.isRemoved() || this.player.getChatVisibility() == ChatVisiblity.HIDDEN) { // CraftBukkit - dead men tell no tales
-                this.send(new ClientboundSystemChatPacket(PaperAdventure.asAdventure(Component.translatable("chat.disabled.options").withStyle(ChatFormatting.RED)), false)); // Paper - Adventure
+                this.send(new ClientboundSystemChatPacket(PaperAdventure.asAdventure(Component.translatable("chat.disabled.options")
+                        .withStyle(ChatFormatting.RED)), false)); // Paper - Adventure
                 return Optional.empty();
             } else {
                 this.player.resetLastActionTime();
@@ -2399,7 +2332,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             Optional<LastSeenMessages> optional = this.lastSeenMessages.applyUpdate(acknowledgment);
 
             if (optional.isEmpty()) {
-                ServerGamePacketListenerImpl.LOGGER.warn("Failed to validate message acknowledgements from {}", this.player.getName().getString());
+                ServerGamePacketListenerImpl.LOGGER.warn("Failed to validate message acknowledgements from {}", this.player.getName()
+                        .getString());
                 this.disconnect(ServerGamePacketListenerImpl.CHAT_VALIDATION_FAILED, org.bukkit.event.player.PlayerKickEvent.Cause.CHAT_VALIDATION_FAILED); // Paper - kick event causes
             }
 
@@ -2441,7 +2375,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             this.handleCommand(s);
         } else if (this.player.getChatVisibility() == ChatVisiblity.SYSTEM) {
             // Do nothing, this is coming from a plugin
-        // Paper start
+            // Paper start
         } else if (true) {
             final ChatProcessor cp = new ChatProcessor(this.server, this.player, original, async);
             cp.process();
@@ -2465,15 +2399,20 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             return null;
                         }
 
-                        String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
+                        String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer()
+                                .getDisplayName(), queueEvent.getMessage());
                         if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
-                            if (!org.spigotmc.SpigotConfig.bungee && originalFormat.equals(queueEvent.getFormat()) && originalMessage.equals(queueEvent.getMessage()) && queueEvent.getPlayer().getName().equalsIgnoreCase(queueEvent.getPlayer().getDisplayName())) { // Spigot
-                                ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
+                            if (!org.spigotmc.SpigotConfig.bungee && originalFormat.equals(queueEvent.getFormat()) && originalMessage.equals(queueEvent.getMessage()) && queueEvent.getPlayer()
+                                    .getName()
+                                    .equalsIgnoreCase(queueEvent.getPlayer().getDisplayName())) { // Spigot
+                                ServerGamePacketListenerImpl.this.server.getPlayerList()
+                                        .broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
                                 return null;
                             }
 
                             for (ServerPlayer recipient : ServerGamePacketListenerImpl.this.server.getPlayerList().players) {
-                                recipient.getBukkitEntity().sendMessage(ServerGamePacketListenerImpl.this.player.getUUID(), message);
+                                recipient.getBukkitEntity()
+                                        .sendMessage(ServerGamePacketListenerImpl.this.player.getUUID(), message);
                             }
                         } else {
                             for (Player player : queueEvent.getRecipients()) {
@@ -2483,7 +2422,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                         ServerGamePacketListenerImpl.this.server.console.sendMessage(message);
 
                         return null;
-                    }};
+                    }
+                };
                 if (async) {
                     server.processQueue.add(waitable);
                 } else {
@@ -2492,7 +2432,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 try {
                     waitable.get();
                 } catch (InterruptedException e) {
-                    Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+                    Thread.currentThread()
+                            .interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
                 } catch (ExecutionException e) {
                     throw new RuntimeException("Exception processing chat event", e.getCause());
                 }
@@ -2503,8 +2444,11 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
                 s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
                 if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
-                    if (!org.spigotmc.SpigotConfig.bungee && originalFormat.equals(event.getFormat()) && originalMessage.equals(event.getMessage()) && event.getPlayer().getName().equalsIgnoreCase(event.getPlayer().getDisplayName())) { // Spigot
-                        ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
+                    if (!org.spigotmc.SpigotConfig.bungee && originalFormat.equals(event.getFormat()) && originalMessage.equals(event.getMessage()) && event.getPlayer()
+                            .getName()
+                            .equalsIgnoreCase(event.getPlayer().getDisplayName())) { // Spigot
+                        ServerGamePacketListenerImpl.this.server.getPlayerList()
+                                .broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
                         return;
                     }
 
@@ -2538,15 +2482,16 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 wait.get();
                 return;
             } catch (InterruptedException e) {
-                Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+                Thread.currentThread()
+                        .interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
             } catch (Exception e) {
                 throw new RuntimeException("Exception processing chat command", e.getCause());
             }
         }
         // Paper End
         co.aikar.timings.MinecraftTimings.playerCommandTimer.startTiming(); // Paper
-        if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
-        this.LOGGER.info(this.player.getScoreboardName() + " issued server command: " + s);
+        if (org.spigotmc.SpigotConfig.logCommands) // Spigot
+            this.LOGGER.info(this.player.getScoreboardName() + " issued server command: " + s);
 
         CraftPlayer player = this.getCraftPlayer();
 
@@ -2564,7 +2509,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             }
         } catch (org.bukkit.command.CommandException ex) {
             player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
-            java.util.logging.Logger.getLogger(ServerGamePacketListenerImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            java.util.logging.Logger.getLogger(ServerGamePacketListenerImpl.class.getName())
+                    .log(java.util.logging.Level.SEVERE, null, ex);
             return;
         } finally {
             co.aikar.timings.MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
@@ -2592,7 +2538,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 }
             });
         } else if (this.player.getChatVisibility() == ChatVisiblity.SYSTEM) { // Re-add "Command Only" flag check
-            this.send(new ClientboundSystemChatPacket(PaperAdventure.asAdventure(Component.translatable("chat.cannotSend").withStyle(ChatFormatting.RED)), false)); // Paper - Adventure
+            this.send(new ClientboundSystemChatPacket(PaperAdventure.asAdventure(Component.translatable("chat.cannotSend")
+                    .withStyle(ChatFormatting.RED)), false)); // Paper - Adventure
         } else {
             this.chat(s, message, true);
         }
@@ -2605,17 +2552,16 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     private void detectRateSpam(String s) {
         // CraftBukkit start - replaced with thread safe throttle
         boolean counted = true;
-        for ( String exclude : org.spigotmc.SpigotConfig.spamExclusions )
-        {
-            if ( exclude != null && s.startsWith( exclude ) )
-            {
+        for (String exclude : org.spigotmc.SpigotConfig.spamExclusions) {
+            if (exclude != null && s.startsWith(exclude)) {
                 counted = false;
                 break;
             }
         }
         // Spigot end
         // this.chatSpamTickCount += 20;
-        if (counted && this.chatSpamTickCount.addAndGet(20) > 200 && !this.server.getPlayerList().isOp(this.player.getGameProfile())) { // Paper - exclude from SpigotConfig.spamExclusions
+        if (counted && this.chatSpamTickCount.addAndGet(20) > 200 && !this.server.getPlayerList()
+                .isOp(this.player.getGameProfile())) { // Paper - exclude from SpigotConfig.spamExclusions
             // CraftBukkit end
             this.disconnect(Component.translatable("disconnect.spam"), org.bukkit.event.player.PlayerKickEvent.Cause.SPAM); // Paper - kick event cause
         }
@@ -2628,7 +2574,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
         synchronized (this.lastSeenMessages) {
             if (!this.lastSeenMessages.applyOffset(packet.offset())) {
-                ServerGamePacketListenerImpl.LOGGER.warn("Failed to validate message acknowledgements from {}", this.player.getName().getString());
+                ServerGamePacketListenerImpl.LOGGER.warn("Failed to validate message acknowledgements from {}", this.player.getName()
+                        .getString());
                 this.disconnect(ServerGamePacketListenerImpl.CHAT_VALIDATION_FAILED, org.bukkit.event.player.PlayerKickEvent.Cause.CHAT_VALIDATION_FAILED); // Paper - kick event causes
             }
 
@@ -2651,18 +2598,25 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         double d3 = player.gameMode.getGameModeForPlayer() == GameType.CREATIVE ? 5.0D : 4.5D;
         // SPIGOT-5607: Only call interact event if no block or entity is being clicked. Use bukkit ray trace method, because it handles blocks and entities at the same time
         // SPIGOT-7429: Make sure to call PlayerInteractEvent for spectators and non-pickable entities
-        org.bukkit.util.RayTraceResult result = this.player.level().getWorld().rayTrace(origin, origin.getDirection(), d3, org.bukkit.FluidCollisionMode.NEVER, false, 0.0, entity -> { // Paper - change raySize from 0.1 to 0.0
-            Entity handle = ((CraftEntity) entity).getHandle();
-            return entity != this.player.getBukkitEntity() && this.player.getBukkitEntity().canSee(entity) && !handle.isSpectator() && handle.isPickable() && !handle.isPassengerOfSameVehicle(player);
-        });
+        org.bukkit.util.RayTraceResult result = this.player.level()
+                .getWorld()
+                .rayTrace(origin, origin.getDirection(), d3, org.bukkit.FluidCollisionMode.NEVER, false, 0.0, entity -> { // Paper - change raySize from 0.1 to 0.0
+                    Entity handle = ((CraftEntity) entity).getHandle();
+                    return entity != this.player.getBukkitEntity() && this.player.getBukkitEntity()
+                            .canSee(entity) && !handle.isSpectator() && handle.isPickable() && !handle.isPassengerOfSameVehicle(player);
+                });
         if (result == null) {
-            CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_AIR, this.player.getInventory().getSelected(), InteractionHand.MAIN_HAND);
+            CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_AIR, this.player.getInventory()
+                    .getSelected(), InteractionHand.MAIN_HAND);
         } else { // Paper start - Fix interact event not being called sometimes
             GameType gameType = this.player.gameMode.getGameModeForPlayer();
             if (gameType == GameType.ADVENTURE && result.getHitBlock() != null) {
-                CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, io.papermc.paper.util.MCUtil.toBlockPosition(result.getHitPosition()), org.bukkit.craftbukkit.block.CraftBlock.blockFaceToNotch(result.getHitBlockFace()), this.player.getInventory().getSelected(), InteractionHand.MAIN_HAND);
-            } else if (gameType != GameType.CREATIVE && result.getHitEntity() != null && origin.toVector().distanceSquared(result.getHitPosition()) > 3.0D * 3.0D) {
-                CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_AIR, this.player.getInventory().getSelected(), InteractionHand.MAIN_HAND);
+                CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, io.papermc.paper.util.MCUtil.toBlockPosition(result.getHitPosition()), org.bukkit.craftbukkit.block.CraftBlock.blockFaceToNotch(result.getHitBlockFace()), this.player.getInventory()
+                        .getSelected(), InteractionHand.MAIN_HAND);
+            } else if (gameType != GameType.CREATIVE && result.getHitEntity() != null && origin.toVector()
+                    .distanceSquared(result.getHitPosition()) > 3.0D * 3.0D) {
+                CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_AIR, this.player.getInventory()
+                        .getSelected(), InteractionHand.MAIN_HAND);
             }
         } // Paper end
 
@@ -2795,7 +2749,10 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             return;
         }
         // CraftBukkit end
-        this.send(new ClientboundPlayerChatPacket(message.link().sender(), message.link().index(), message.signature(), message.signedBody().pack(this.messageSignatureCache), message.unsignedContent(), message.filterMask(), params.toNetwork(this.player.level().registryAccess())));
+        this.send(new ClientboundPlayerChatPacket(message.link().sender(), message.link()
+                .index(), message.signature(), message.signedBody()
+                .pack(this.messageSignatureCache), message.unsignedContent(), message.filterMask(), params.toNetwork(this.player.level()
+                .registryAccess())));
         this.addPendingMessage(message);
     }
 
@@ -2808,8 +2765,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     }
 
     // Spigot Start
-    public SocketAddress getRawAddress()
-    {
+    public SocketAddress getRawAddress() {
         // Paper start - this can be nullable in the case of a Unix domain socket, so if it is, fake something
         if (connection.channel.remoteAddress() == null) {
             return new java.net.InetSocketAddress(java.net.InetAddress.getLoopbackAddress(), 0);
@@ -2826,9 +2782,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         final ServerLevel worldserver = this.player.serverLevel();
         final Entity entity = packet.getTarget(worldserver);
         // Spigot Start
-        if ( entity == this.player && !this.player.isSpectator() )
-        {
-            this.disconnect( "Cannot interact with self!", org.bukkit.event.player.PlayerKickEvent.Cause.SELF_INTERACTION ); // Paper - add cause
+        if (entity == this.player && !this.player.isSpectator()) {
+            this.disconnect("Cannot interact with self!", org.bukkit.event.player.PlayerKickEvent.Cause.SELF_INTERACTION); // Paper - add cause
             return;
         }
         // Spigot End
@@ -2852,33 +2807,48 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             // CraftBukkit start
                             ItemStack itemInHand = ServerGamePacketListenerImpl.this.player.getItemInHand(enumhand);
                             boolean triggerLeashUpdate = itemInHand != null && itemInHand.getItem() == Items.LEAD && entity instanceof Mob;
-                            Item origItem = ServerGamePacketListenerImpl.this.player.getInventory().getSelected() == null ? null : ServerGamePacketListenerImpl.this.player.getInventory().getSelected().getItem();
+                            Item origItem = ServerGamePacketListenerImpl.this.player.getInventory()
+                                    .getSelected() == null ? null : ServerGamePacketListenerImpl.this.player.getInventory()
+                                    .getSelected()
+                                    .getItem();
 
                             ServerGamePacketListenerImpl.this.cserver.getPluginManager().callEvent(event);
 
                             // Entity in bucket - SPIGOT-4048 and SPIGOT-6859a
-                            if ((entity instanceof Bucketable && entity instanceof LivingEntity && origItem != null && origItem.asItem() == Items.WATER_BUCKET) && (event.isCancelled() || ServerGamePacketListenerImpl.this.player.getInventory().getSelected() == null || ServerGamePacketListenerImpl.this.player.getInventory().getSelected().getItem() != origItem)) {
-                                entity.getEntityData().resendPossiblyDesyncedEntity(player); // Paper - The entire mob gets deleted, so resend it.
+                            if ((entity instanceof Bucketable && entity instanceof LivingEntity && origItem != null && origItem.asItem() == Items.WATER_BUCKET) && (event.isCancelled() || ServerGamePacketListenerImpl.this.player.getInventory()
+                                    .getSelected() == null || ServerGamePacketListenerImpl.this.player.getInventory()
+                                    .getSelected()
+                                    .getItem() != origItem)) {
+                                entity.getEntityData()
+                                        .resendPossiblyDesyncedEntity(player); // Paper - The entire mob gets deleted, so resend it.
                                 player.containerMenu.sendAllDataToRemote();
                             }
 
-                            if (triggerLeashUpdate && (event.isCancelled() || ServerGamePacketListenerImpl.this.player.getInventory().getSelected() == null || ServerGamePacketListenerImpl.this.player.getInventory().getSelected().getItem() != origItem)) {
+                            if (triggerLeashUpdate && (event.isCancelled() || ServerGamePacketListenerImpl.this.player.getInventory()
+                                    .getSelected() == null || ServerGamePacketListenerImpl.this.player.getInventory()
+                                    .getSelected()
+                                    .getItem() != origItem)) {
                                 // Refresh the current leash state
                                 ServerGamePacketListenerImpl.this.send(new ClientboundSetEntityLinkPacket(entity, ((Mob) entity).getLeashHolder()));
                             }
 
-                            if (event.isCancelled() || ServerGamePacketListenerImpl.this.player.getInventory().getSelected() == null || ServerGamePacketListenerImpl.this.player.getInventory().getSelected().getItem() != origItem) {
+                            if (event.isCancelled() || ServerGamePacketListenerImpl.this.player.getInventory()
+                                    .getSelected() == null || ServerGamePacketListenerImpl.this.player.getInventory()
+                                    .getSelected()
+                                    .getItem() != origItem) {
                                 // Refresh the current entity metadata
                                 entity.getEntityData().refresh(player);
                                 // SPIGOT-7136 - Allays
                                 if (entity instanceof Allay allay) { // Paper
-                                    ServerGamePacketListenerImpl.this.send(new ClientboundSetEquipmentPacket(entity.getId(), Arrays.stream(net.minecraft.world.entity.EquipmentSlot.values()).map((slot) -> Pair.of(slot, allay.stripMeta(allay.getItemBySlot(slot), true))).collect(Collectors.toList()))); // Paper - remove unnecessary item meta
+                                    ServerGamePacketListenerImpl.this.send(new ClientboundSetEquipmentPacket(entity.getId(), Arrays.stream(net.minecraft.world.entity.EquipmentSlot.values())
+                                            .map((slot) -> Pair.of(slot, allay.stripMeta(allay.getItemBySlot(slot), true)))
+                                            .collect(Collectors.toList()))); // Paper - remove unnecessary item meta
                                     player.containerMenu.sendAllDataToRemote();
                                 }
                             }
 
                             if (event.isCancelled()) {
-                            ServerGamePacketListenerImpl.this.player.containerMenu.sendAllDataToRemote(); // Paper - Refresh player inventory
+                                ServerGamePacketListenerImpl.this.player.containerMenu.sendAllDataToRemote(); // Paper - Refresh player inventory
                                 return;
                             }
                             // CraftBukkit end
@@ -2927,8 +2897,9 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                 // CraftBukkit end
                             }
                         } else {
-                            ServerGamePacketListenerImpl.this.disconnect(Component.translatable("multiplayer.disconnect.invalid_entity_attacked"),  org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_ENTITY_ATTACKED); // Paper - add cause
-                            ServerGamePacketListenerImpl.LOGGER.warn("Player {} tried to attack an invalid entity", ServerGamePacketListenerImpl.this.player.getName().getString());
+                            ServerGamePacketListenerImpl.this.disconnect(Component.translatable("multiplayer.disconnect.invalid_entity_attacked"), org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_ENTITY_ATTACKED); // Paper - add cause
+                            ServerGamePacketListenerImpl.LOGGER.warn("Player {} tried to attack an invalid entity", ServerGamePacketListenerImpl.this.player.getName()
+                                    .getString());
                         }
                     }
                 });
@@ -2958,10 +2929,10 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
     private void callPlayerUseUnknownEntityEvent(ServerboundInteractPacket packet, InteractionHand hand) {
         this.cserver.getPluginManager().callEvent(new com.destroystokyo.paper.event.player.PlayerUseUnknownEntityEvent(
-            this.getCraftPlayer(),
-            packet.getEntityId(),
-            packet.getActionType() == ServerboundInteractPacket.ActionType.ATTACK,
-            hand == InteractionHand.MAIN_HAND ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND
+                this.getCraftPlayer(),
+                packet.getEntityId(),
+                packet.getActionType() == ServerboundInteractPacket.ActionType.ATTACK,
+                hand == InteractionHand.MAIN_HAND ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND
         ));
     }
     // Paper end
@@ -2976,7 +2947,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             case PERFORM_RESPAWN:
                 if (this.player.wonGame) {
                     this.player.wonGame = false;
-                    this.player = this.server.getPlayerList().respawn(this.player, this.server.getLevel(this.player.getRespawnDimension()), true, null, true, RespawnReason.END_PORTAL, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag.END_PORTAL); // Paper - add isEndCreditsRespawn argument
+                    this.player = this.server.getPlayerList()
+                            .respawn(this.player, this.server.getLevel(this.player.getRespawnDimension()), true, null, true, RespawnReason.END_PORTAL, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag.END_PORTAL); // Paper - add isEndCreditsRespawn argument
                     CriteriaTriggers.CHANGED_DIMENSION.trigger(this.player, Level.END, Level.OVERWORLD);
                 } else {
                     if (this.player.getHealth() > 0.0F) {
@@ -2986,7 +2958,9 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                     this.player = this.server.getPlayerList().respawn(this.player, false, RespawnReason.DEATH);
                     if (this.server.isHardcore()) {
                         this.player.setGameMode(GameType.SPECTATOR, org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.HARDCORE_DEATH, null); // Paper
-                        ((GameRules.BooleanValue) this.player.level().getGameRules().getRule(GameRules.RULE_SPECTATORSGENERATECHUNKS)).set(false, this.player.serverLevel()); // Paper
+                        ((GameRules.BooleanValue) this.player.level()
+                                .getGameRules()
+                                .getRule(GameRules.RULE_SPECTATORSGENERATECHUNKS)).set(false, this.player.serverLevel()); // Paper
                     }
                 }
                 break;
@@ -3001,6 +2975,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         // Paper start
         this.handleContainerClose(packet, InventoryCloseEvent.Reason.PLAYER);
     }
+
     public void handleContainerClose(ServerboundContainerClosePacket packet, InventoryCloseEvent.Reason reason) {
         // Paper end
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
@@ -3058,7 +3033,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                     if (!player.containerMenu.getCarried().isEmpty()) {
                                         action = packet.getButtonNum() == 0 ? InventoryAction.DROP_ALL_CURSOR : InventoryAction.DROP_ONE_CURSOR;
                                     }
-                                } else if (packet.getSlotNum() < 0)  {
+                                } else if (packet.getSlotNum() < 0) {
                                     action = InventoryAction.NOTHING;
                                 } else {
                                     Slot slot = this.player.containerMenu.getSlot(packet.getSlotNum());
@@ -3152,7 +3127,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                     action = InventoryAction.NOTHING;
                                 } else {
                                     Slot slot = this.player.containerMenu.getSlot(packet.getSlotNum());
-                                    if (slot != null && slot.hasItem() && this.player.getAbilities().instabuild && player.containerMenu.getCarried().isEmpty()) {
+                                    if (slot != null && slot.hasItem() && this.player.getAbilities().instabuild && player.containerMenu.getCarried()
+                                            .isEmpty()) {
                                         action = InventoryAction.CLONE_STACK;
                                     } else {
                                         action = InventoryAction.NOTHING;
@@ -3168,7 +3144,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                 if (packet.getButtonNum() == 0) {
                                     click = ClickType.DROP;
                                     Slot slot = this.player.containerMenu.getSlot(packet.getSlotNum());
-                                    if (slot != null && slot.hasItem() && slot.mayPickup(player) && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item.byBlock(Blocks.AIR)) {
+                                    if (slot != null && slot.hasItem() && slot.mayPickup(player) && !slot.getItem()
+                                            .isEmpty() && slot.getItem().getItem() != Item.byBlock(Blocks.AIR)) {
                                         action = InventoryAction.DROP_ONE_SLOT;
                                     } else {
                                         action = InventoryAction.NOTHING;
@@ -3176,7 +3153,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                 } else if (packet.getButtonNum() == 1) {
                                     click = ClickType.CONTROL_DROP;
                                     Slot slot = this.player.containerMenu.getSlot(packet.getSlotNum());
-                                    if (slot != null && slot.hasItem() && slot.mayPickup(player) && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item.byBlock(Blocks.AIR)) {
+                                    if (slot != null && slot.hasItem() && slot.mayPickup(player) && !slot.getItem()
+                                            .isEmpty() && slot.getItem().getItem() != Item.byBlock(Blocks.AIR)) {
                                         action = InventoryAction.DROP_ALL_SLOT;
                                     } else {
                                         action = InventoryAction.NOTHING;
@@ -3201,7 +3179,9 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                 ItemStack cursor = this.player.containerMenu.getCarried();
                                 action = InventoryAction.NOTHING;
                                 // Quick check for if we have any of the item
-                                if (inventory.getTopInventory().contains(CraftMagicNumbers.getMaterial(cursor.getItem())) || inventory.getBottomInventory().contains(CraftMagicNumbers.getMaterial(cursor.getItem()))) {
+                                if (inventory.getTopInventory()
+                                        .contains(CraftMagicNumbers.getMaterial(cursor.getItem())) || inventory.getBottomInventory()
+                                        .contains(CraftMagicNumbers.getMaterial(cursor.getItem()))) {
                                     action = InventoryAction.COLLECT_TO_CURSOR;
                                 }
                             }
@@ -3283,12 +3263,14 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                     case PLACE_ONE:
                                     case SWAP_WITH_CURSOR:
                                         this.player.connection.send(new ClientboundContainerSetSlotPacket(-1, -1, this.player.inventoryMenu.incrementStateId(), this.player.containerMenu.getCarried()));
-                                        this.player.connection.send(new ClientboundContainerSetSlotPacket(this.player.containerMenu.containerId, this.player.inventoryMenu.incrementStateId(), packet.getSlotNum(), this.player.containerMenu.getSlot(packet.getSlotNum()).getItem()));
+                                        this.player.connection.send(new ClientboundContainerSetSlotPacket(this.player.containerMenu.containerId, this.player.inventoryMenu.incrementStateId(), packet.getSlotNum(), this.player.containerMenu.getSlot(packet.getSlotNum())
+                                                .getItem()));
                                         break;
                                     // Modified clicked only
                                     case DROP_ALL_SLOT:
                                     case DROP_ONE_SLOT:
-                                        this.player.connection.send(new ClientboundContainerSetSlotPacket(this.player.containerMenu.containerId, this.player.inventoryMenu.incrementStateId(), packet.getSlotNum(), this.player.containerMenu.getSlot(packet.getSlotNum()).getItem()));
+                                        this.player.connection.send(new ClientboundContainerSetSlotPacket(this.player.containerMenu.containerId, this.player.inventoryMenu.incrementStateId(), packet.getSlotNum(), this.player.containerMenu.getSlot(packet.getSlotNum())
+                                                .getItem()));
                                         break;
                                     // Modified cursor only
                                     case DROP_ALL_CURSOR:
@@ -3351,24 +3333,25 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 ResourceLocation recipeName = packet.getRecipe();
                 boolean makeAll = packet.isShiftDown();
                 com.destroystokyo.paper.event.player.PlayerRecipeBookClickEvent paperEvent = new com.destroystokyo.paper.event.player.PlayerRecipeBookClickEvent(
-                    this.player.getBukkitEntity(), org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(recipeName), makeAll
+                        this.player.getBukkitEntity(), org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(recipeName), makeAll
                 );
                 if (!paperEvent.callEvent()) {
                     return;
                 }
                 recipeName = CraftNamespacedKey.toMinecraft(paperEvent.getRecipe());
                 makeAll = paperEvent.isMakeAll();
-                if (org.bukkit.event.player.PlayerRecipeBookClickEvent.getHandlerList().getRegisteredListeners().length > 0) {
-                // Paper end
-                // CraftBukkit start - implement PlayerRecipeBookClickEvent
-                org.bukkit.inventory.Recipe recipe = this.cserver.getRecipe(CraftNamespacedKey.fromMinecraft(recipeName)); // Paper
-                if (recipe == null) {
-                    return;
-                }
-                // Paper start
-                org.bukkit.event.player.PlayerRecipeBookClickEvent event = CraftEventFactory.callRecipeBookClickEvent(this.player, recipe, makeAll);
-                recipeName = CraftNamespacedKey.toMinecraft(((org.bukkit.Keyed) event.getRecipe()).getKey());
-                makeAll = event.isShiftClick();
+                if (org.bukkit.event.player.PlayerRecipeBookClickEvent.getHandlerList()
+                        .getRegisteredListeners().length > 0) {
+                    // Paper end
+                    // CraftBukkit start - implement PlayerRecipeBookClickEvent
+                    org.bukkit.inventory.Recipe recipe = this.cserver.getRecipe(CraftNamespacedKey.fromMinecraft(recipeName)); // Paper
+                    if (recipe == null) {
+                        return;
+                    }
+                    // Paper start
+                    org.bukkit.event.player.PlayerRecipeBookClickEvent event = CraftEventFactory.callRecipeBookClickEvent(this.player, recipe, makeAll);
+                    recipeName = CraftNamespacedKey.toMinecraft(((org.bukkit.Keyed) event.getRecipe()).getKey());
+                    makeAll = event.isShiftClick();
                 }
                 if (!(this.player.containerMenu instanceof RecipeBookMenu<?>)) {
                     return;
@@ -3419,13 +3402,15 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
             CompoundTag nbttagcompound = BlockItem.getBlockEntityData(itemstack);
 
-            if (!itemstack.isEmpty() && nbttagcompound != null && nbttagcompound.contains("x") && nbttagcompound.contains("y") && nbttagcompound.contains("z") && this.player.getBukkitEntity().hasPermission("minecraft.nbt.copy")) { // Spigot
+            if (!itemstack.isEmpty() && nbttagcompound != null && nbttagcompound.contains("x") && nbttagcompound.contains("y") && nbttagcompound.contains("z") && this.player.getBukkitEntity()
+                    .hasPermission("minecraft.nbt.copy")) { // Spigot
                 BlockPos blockposition = BlockEntity.getPosFromTag(nbttagcompound);
 
                 if (this.player.level().isLoaded(blockposition)) {
                     // Paper start
                     BlockEntity tileentity = null;
-                    if (this.player.distanceToSqr(blockposition.getX(), blockposition.getY(), blockposition.getZ()) < 32 * 32 && this.player.serverLevel().isLoadedAndInBounds(blockposition)) {
+                    if (this.player.distanceToSqr(blockposition.getX(), blockposition.getY(), blockposition.getZ()) < 32 * 32 && this.player.serverLevel()
+                            .isLoadedAndInBounds(blockposition)) {
                         tileentity = this.player.level().getBlockEntity(blockposition);
                     }
                     // Paper end
@@ -3438,7 +3423,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
             boolean flag1 = packet.getSlotNum() >= 1 && packet.getSlotNum() <= 45;
             boolean flag2 = itemstack.isEmpty() || itemstack.getDamageValue() >= 0 && itemstack.getCount() <= 64 && !itemstack.isEmpty();
-            if (flag || (flag1 && !ItemStack.matches(this.player.inventoryMenu.getSlot(packet.getSlotNum()).getItem(), packet.getItem()))) { // Insist on valid slot
+            if (flag || (flag1 && !ItemStack.matches(this.player.inventoryMenu.getSlot(packet.getSlotNum())
+                    .getItem(), packet.getItem()))) { // Insist on valid slot
                 // CraftBukkit start - Call click event
                 InventoryView inventory = this.player.inventoryMenu.getBukkitView();
                 org.bukkit.inventory.ItemStack item = CraftItemStack.asBukkitCopy(packet.getItem());
@@ -3459,19 +3445,20 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 itemstack = CraftItemStack.asNMSCopy(event.getCursor());
 
                 switch (event.getResult()) {
-                case ALLOW:
-                    // Plugin cleared the id / stacksize checks
-                    flag2 = true;
-                    break;
-                case DEFAULT:
-                    break;
-                case DENY:
-                    // Reset the slot
-                    if (packet.getSlotNum() >= 0) {
-                        this.player.connection.send(new ClientboundContainerSetSlotPacket(this.player.inventoryMenu.containerId, this.player.inventoryMenu.incrementStateId(), packet.getSlotNum(), this.player.inventoryMenu.getSlot(packet.getSlotNum()).getItem()));
-                        this.player.connection.send(new ClientboundContainerSetSlotPacket(-1, this.player.inventoryMenu.incrementStateId(), -1, ItemStack.EMPTY));
-                    }
-                    return;
+                    case ALLOW:
+                        // Plugin cleared the id / stacksize checks
+                        flag2 = true;
+                        break;
+                    case DEFAULT:
+                        break;
+                    case DENY:
+                        // Reset the slot
+                        if (packet.getSlotNum() >= 0) {
+                            this.player.connection.send(new ClientboundContainerSetSlotPacket(this.player.inventoryMenu.containerId, this.player.inventoryMenu.incrementStateId(), packet.getSlotNum(), this.player.inventoryMenu.getSlot(packet.getSlotNum())
+                                    .getItem()));
+                            this.player.connection.send(new ClientboundContainerSetSlotPacket(-1, this.player.inventoryMenu.incrementStateId(), -1, ItemStack.EMPTY));
+                        }
+                        return;
                 }
             }
             // CraftBukkit end
@@ -3539,7 +3526,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         } else if (!this.isSingleplayerOwner()) {
             // Paper start - This needs to be handled on the main thread for plugins
             server.submit(() -> {
-            this.disconnect(Component.translatable("disconnect.timeout"), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
+                this.disconnect(Component.translatable("disconnect.timeout"), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
             });
             // Paper end
         }
@@ -3617,7 +3604,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                     }
                 }
                 // Paper end
-                this.cserver.getMessenger().dispatchIncomingMessage(this.player.getBukkitEntity(), packet.identifier.toString(), data);
+                this.cserver.getMessenger()
+                        .dispatchIncomingMessage(this.player.getBukkitEntity(), packet.identifier.toString(), data);
             } catch (Exception ex) {
                 ServerGamePacketListenerImpl.LOGGER.error("Couldn\'t dispatch custom payload", ex);
                 this.disconnect("Invalid custom payload!", org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_PAYLOAD); // Paper - kick event cause
@@ -3657,18 +3645,21 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     public void handleChatSessionUpdate(ServerboundChatSessionUpdatePacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         RemoteChatSession.Data remotechatsession_a = packet.chatSession();
-        ProfilePublicKey.Data profilepublickey_a = this.chatSession != null ? this.chatSession.profilePublicKey().data() : null;
+        ProfilePublicKey.Data profilepublickey_a = this.chatSession != null ? this.chatSession.profilePublicKey()
+                .data() : null;
         ProfilePublicKey.Data profilepublickey_a1 = remotechatsession_a.profilePublicKey();
 
         if (!Objects.equals(profilepublickey_a, profilepublickey_a1)) {
-            if (profilepublickey_a != null && profilepublickey_a1.expiresAt().isBefore(profilepublickey_a.expiresAt())) {
+            if (profilepublickey_a != null && profilepublickey_a1.expiresAt()
+                    .isBefore(profilepublickey_a.expiresAt())) {
                 this.disconnect(ProfilePublicKey.EXPIRED_PROFILE_PUBLIC_KEY, org.bukkit.event.player.PlayerKickEvent.Cause.EXPIRED_PROFILE_PUBLIC_KEY); // Paper - kick event causes
             } else {
                 try {
                     SignatureValidator signaturevalidator = this.server.getProfileKeySignatureValidator();
 
                     if (signaturevalidator == null) {
-                        ServerGamePacketListenerImpl.LOGGER.warn("Ignoring chat session from {} due to missing Services public key", this.player.getGameProfile().getName());
+                        ServerGamePacketListenerImpl.LOGGER.warn("Ignoring chat session from {} due to missing Services public key", this.player.getGameProfile()
+                                .getName());
                         return;
                     }
 
@@ -3688,7 +3679,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         this.signedMessageDecoder = session.createMessageDecoder(this.player.getUUID());
         this.chatMessageChain.append((executor) -> {
             this.player.setChatSession(session);
-            this.server.getPlayerList().broadcastAll(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.INITIALIZE_CHAT), List.of(this.player)), this.player); // Paper
+            this.server.getPlayerList()
+                    .broadcastAll(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.INITIALIZE_CHAT), List.of(this.player)), this.player); // Paper
             return CompletableFuture.completedFuture((Object) null);
         });
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 340fdbdb77f8a386be5db58ab200fc0fee97e91e..7e7d2014bd856d5804d5c9a96b88f33489412803 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -1,11 +1,6 @@
 package org.bukkit.craftbukkit;
 
 import com.mojang.authlib.GameProfile;
-import java.io.File;
-import java.time.Duration;
-import java.time.Instant;
-import java.util.*;
-
 import net.kissenpvp.core.api.database.meta.BackendException;
 import net.kissenpvp.core.api.user.User;
 import net.kissenpvp.paper.api.permission.PaperPermissible;
@@ -20,19 +15,11 @@ import net.minecraft.nbt.NbtOps;
 import net.minecraft.server.players.UserWhiteListEntry;
 import net.minecraft.stats.ServerStatsCounter;
 import net.minecraft.world.level.storage.PlayerDataStorage;
-import org.bukkit.BanEntry;
-import org.bukkit.BanList;
-import org.bukkit.Bukkit;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.Server;
-import org.bukkit.Statistic;
+import org.bukkit.*;
 import org.bukkit.ban.ProfileBanList;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.bukkit.craftbukkit.entity.memory.CraftMemoryMapper;
-import org.bukkit.craftbukkit.profile.CraftPlayerProfile;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Player;
 import org.bukkit.metadata.MetadataValue;
@@ -41,10 +28,14 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
-import org.bukkit.profile.PlayerProfile;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.File;
+import java.time.Duration;
+import java.time.Instant;
+import java.util.*;
+
 @SerializableAs("Player")
 public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializable, /* KissenPaper */ KissenPaperPlayerClient {
     private static final org.slf4j.Logger LOGGER = com.mojang.logging.LogUtils.getLogger(); // Paper
@@ -361,7 +352,10 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     @Override
     public Location getLastDeathLocation() {
         if (this.getData().contains("LastDeathLocation", 10)) {
-            return GlobalPos.CODEC.parse(NbtOps.INSTANCE, this.getData().get("LastDeathLocation")).result().map(CraftMemoryMapper::fromNms).orElse(null);
+            return GlobalPos.CODEC.parse(NbtOps.INSTANCE, this.getData().get("LastDeathLocation"))
+                    .result()
+                    .map(CraftMemoryMapper::fromNms)
+                    .orElse(null);
         }
         return null;
     }
@@ -377,7 +371,8 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
             org.bukkit.World spawnWorld = this.server.getWorld(data.getString("SpawnWorld")); // legacy
             if (data.contains("SpawnDimension")) {
                 com.mojang.serialization.DataResult<net.minecraft.resources.ResourceKey<net.minecraft.world.level.Level>> result = net.minecraft.world.level.Level.RESOURCE_KEY_CODEC.parse(net.minecraft.nbt.NbtOps.INSTANCE, data.get("SpawnDimension"));
-                net.minecraft.resources.ResourceKey<net.minecraft.world.level.Level> levelKey = result.resultOrPartial(LOGGER::error).orElse(net.minecraft.world.level.Level.OVERWORLD);
+                net.minecraft.resources.ResourceKey<net.minecraft.world.level.Level> levelKey = result.resultOrPartial(LOGGER::error)
+                        .orElse(net.minecraft.world.level.Level.OVERWORLD);
                 net.minecraft.server.level.ServerLevel level = this.server.console.getLevel(levelKey);
                 spawnWorld = level != null ? level.getWorld() : spawnWorld;
             }
@@ -663,7 +658,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
 
     @Override
     public void recalculatePermissions() {
-        //ignored
+        permissible.recalculatePermissions(); // won't do anything
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index be9c4d7ee2ef8a321884eb75a88543822629ce0d..34463796fa75e2a223c034bef19e764e4252f106 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -177,7 +177,7 @@ import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
 public final class CraftServer implements Server {
-    private final String serverName = "Paper"; // Paper
+    private final String serverName = "KissenPaper"; // Paper
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
index 87f2cea36d852c81fdb0a1bc21162d41377ab2e7..f767131230d774b488ad00553defc5de8713640d 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
@@ -7,6 +7,7 @@ import org.bukkit.block.Block;
 import org.bukkit.command.BlockCommandSender;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents input from a command block
@@ -52,7 +53,7 @@ public class CraftBlockCommandSender extends ServerCommandSender implements Bloc
     }
 
     @Override
-    public net.kyori.adventure.text.Component name() {
+    public net.kyori.adventure.text.@NotNull Component name() {
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(this.block.getDisplayName());
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
index a33eec18be5845b269a48557d47aabba16e83ea2..1d60bc1a334d8a5f095f0a4b8e963a249493272d 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
@@ -1,10 +1,7 @@
 package org.bukkit.craftbukkit.command;
 
-import java.util.UUID;
-
 import net.kissenpvp.core.networking.client.entity.KissenConsoleClient;
 import net.kyori.adventure.audience.Audience;
-import net.kyori.adventure.text.Component;
 import org.bukkit.ChatColor;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.conversations.Conversation;
@@ -13,6 +10,8 @@ import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
 import org.bukkit.craftbukkit.conversations.ConversationTracker;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.UUID;
+
 /**
  * Represents CLI input from a console
  */
@@ -36,7 +35,7 @@ public class CraftConsoleCommandSender extends ServerCommandSender implements Co
 
     @Override
     public void sendRawMessage(UUID sender, String message) {
-      this.sendRawMessage(message); // Console doesn't know of senders
+        this.sendRawMessage(message); // Console doesn't know of senders
     }
 
     @Override
@@ -60,7 +59,7 @@ public class CraftConsoleCommandSender extends ServerCommandSender implements Co
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component name() {
+    public net.kyori.adventure.text.@NotNull Component name() {
         return net.kyori.adventure.text.Component.text(this.getName());
     }
     // Paper end
@@ -103,7 +102,8 @@ public class CraftConsoleCommandSender extends ServerCommandSender implements Co
     // Paper start
     @Override
     public void sendMessage(final net.kyori.adventure.identity.Identity identity, final net.kyori.adventure.text.Component message, final net.kyori.adventure.audience.MessageType type) {
-        this.sendRawMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));
+        this.sendRawMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                .serialize(message));
     }
 
     @Override
@@ -115,12 +115,5 @@ public class CraftConsoleCommandSender extends ServerCommandSender implements Co
     public boolean hasPermission(org.bukkit.permissions.Permission perm) {
         return io.papermc.paper.configuration.GlobalConfiguration.get().console.hasAllPermissions || super.hasPermission(perm);
     }
-
-    // KissenPaper start
-    @Override
-    public @NotNull Component displayName() {
-        return Component.text(getName());
-    }
-    // KissenPaper end
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
index dfc15cfd897316f64a063b8ae93a0882ab5b3993..48766cdafcf8871a39312ce1da2dbcf04879f0fd 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.command;
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.rcon.RconConsoleSource;
 import org.bukkit.command.RemoteConsoleCommandSender;
+import org.jetbrains.annotations.NotNull;
 
 public class CraftRemoteConsoleCommandSender extends ServerCommandSender implements RemoteConsoleCommandSender {
 
@@ -31,7 +32,7 @@ public class CraftRemoteConsoleCommandSender extends ServerCommandSender impleme
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component name() {
+    public net.kyori.adventure.text.@NotNull Component name() {
         return net.kyori.adventure.text.Component.text(this.getName());
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
index 3e7d14564f11a3ed0b0766444e9d681804597e9a..47c509876d011d3da0dee0200bb2eddb8f978bd8 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.command;
 
-import java.util.Set;
-import java.util.UUID;
+import net.kyori.adventure.text.Component;
 import net.minecraft.commands.CommandSourceStack;
 import org.bukkit.Server;
 import org.bukkit.command.CommandSender;
@@ -10,6 +9,11 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Locale;
+import java.util.Set;
+import java.util.UUID;
 
 public class ProxiedNativeCommandSender implements ProxiedCommandSender {
 
@@ -69,7 +73,7 @@ public class ProxiedNativeCommandSender implements ProxiedCommandSender {
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component name() {
+    public net.kyori.adventure.text.@NotNull Component name() {
         return this.getCallee().name();
     }
     // Paper end
@@ -141,9 +145,30 @@ public class ProxiedNativeCommandSender implements ProxiedCommandSender {
 
     // Spigot start
     @Override
-    public org.bukkit.command.CommandSender.Spigot spigot()
-    {
-       return this.getCaller().spigot();
+    public org.bukkit.command.CommandSender.Spigot spigot() {
+        return this.getCaller().spigot();
     }
     // Spigot end
+
+    // KissenPaper start
+    @Override
+    public @NotNull Locale getCurrentLocale() {
+        return this.getCaller().getCurrentLocale();
+    }
+
+    @Override
+    public @NotNull Component displayName() {
+        return this.getCaller().displayName();
+    }
+
+    @Override
+    public boolean isConnected() {
+        return this.getCaller().isConnected();
+    }
+
+    @Override
+    public boolean isClient() {
+        return this.getCaller().isClient();
+    }
+    // KissenPaper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
index 1c638a4b1f2c841928d8b2a7ae43e4ebb1f7eac7..6fc7a763181e64ea12466518cc3bfdaca4068b68 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.command;
 
-import java.util.Set;
-import java.util.UUID;
+import net.kissenpvp.core.api.message.localization.LocalizationImplementation;
 import org.bukkit.Bukkit;
 import org.bukkit.Server;
 import org.bukkit.command.CommandSender;
@@ -10,6 +9,11 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Locale;
+import java.util.Set;
+import java.util.UUID;
 
 public abstract class ServerCommandSender implements CommandSender {
     private static PermissibleBase blockPermInst;
@@ -108,36 +112,30 @@ public abstract class ServerCommandSender implements CommandSender {
     }
 
     // Spigot start
-    private final org.bukkit.command.CommandSender.Spigot spigot = new org.bukkit.command.CommandSender.Spigot()
-    {
+    private final org.bukkit.command.CommandSender.Spigot spigot = new org.bukkit.command.CommandSender.Spigot() {
         @Override
-        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent component)
-        {
+        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent component) {
             ServerCommandSender.this.sendMessage(net.md_5.bungee.api.chat.TextComponent.toLegacyText(component));
         }
 
         @Override
-        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent... components)
-        {
+        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent... components) {
             ServerCommandSender.this.sendMessage(net.md_5.bungee.api.chat.TextComponent.toLegacyText(components));
         }
 
         @Override
-        public void sendMessage(UUID sender, net.md_5.bungee.api.chat.BaseComponent... components)
-        {
+        public void sendMessage(UUID sender, net.md_5.bungee.api.chat.BaseComponent... components) {
             this.sendMessage(components);
         }
 
         @Override
-        public void sendMessage(UUID sender, net.md_5.bungee.api.chat.BaseComponent component)
-        {
+        public void sendMessage(UUID sender, net.md_5.bungee.api.chat.BaseComponent component) {
             this.sendMessage(component);
         }
     };
 
     @Override
-    public org.bukkit.command.CommandSender.Spigot spigot()
-    {
+    public org.bukkit.command.CommandSender.Spigot spigot() {
         return this.spigot;
     }
     // Spigot end
@@ -147,12 +145,33 @@ public abstract class ServerCommandSender implements CommandSender {
     public net.kyori.adventure.pointer.Pointers pointers() {
         if (this.adventure$pointers == null) {
             this.adventure$pointers = net.kyori.adventure.pointer.Pointers.builder()
-                .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::name)
-                .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
-                .build();
+                    .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::name)
+                    .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
+                    .build();
         }
 
         return this.adventure$pointers;
     }
     // Paper end
+
+
+    // KissenPaper start
+
+
+    @Override
+    public @NotNull Locale getCurrentLocale() {
+        return Bukkit.getKissen().getImplementation(LocalizationImplementation.class).getDefaultLocale();
+    }
+
+    @Override
+    public final boolean isConnected() {
+        return true;
+    }
+
+    @Override
+    public final boolean isClient() {
+        return false;
+    }
+    // KissenPaper end
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index fc0dc8e607cc24020106ea1af92b4421a5f9393d..344e1c40de51a73d1465f8e2427fb93fd2b3e365 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -4,121 +4,35 @@ import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import com.google.common.collect.Lists;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
+import net.kissenpvp.core.api.message.localization.LocalizationImplementation;
+import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.world.entity.AreaEffectCloud;
-import net.minecraft.world.entity.Display;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.ExperienceOrb;
-import net.minecraft.world.entity.FlyingMob;
-import net.minecraft.world.entity.GlowSquid;
-import net.minecraft.world.entity.Interaction;
-import net.minecraft.world.entity.LightningBolt;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Marker;
-import net.minecraft.world.entity.PathfinderMob;
-import net.minecraft.world.entity.TamableAnimal;
+import net.minecraft.world.entity.*;
 import net.minecraft.world.entity.ambient.AmbientCreature;
 import net.minecraft.world.entity.ambient.Bat;
-import net.minecraft.world.entity.animal.AbstractFish;
-import net.minecraft.world.entity.animal.AbstractGolem;
-import net.minecraft.world.entity.animal.Animal;
-import net.minecraft.world.entity.animal.Bee;
-import net.minecraft.world.entity.animal.Cat;
-import net.minecraft.world.entity.animal.Chicken;
-import net.minecraft.world.entity.animal.Cod;
-import net.minecraft.world.entity.animal.Cow;
-import net.minecraft.world.entity.animal.Dolphin;
-import net.minecraft.world.entity.animal.Fox;
-import net.minecraft.world.entity.animal.IronGolem;
-import net.minecraft.world.entity.animal.MushroomCow;
-import net.minecraft.world.entity.animal.Ocelot;
-import net.minecraft.world.entity.animal.Panda;
-import net.minecraft.world.entity.animal.Parrot;
-import net.minecraft.world.entity.animal.Pig;
-import net.minecraft.world.entity.animal.PolarBear;
-import net.minecraft.world.entity.animal.Pufferfish;
-import net.minecraft.world.entity.animal.Rabbit;
-import net.minecraft.world.entity.animal.Salmon;
-import net.minecraft.world.entity.animal.Sheep;
-import net.minecraft.world.entity.animal.SnowGolem;
-import net.minecraft.world.entity.animal.Squid;
-import net.minecraft.world.entity.animal.TropicalFish;
-import net.minecraft.world.entity.animal.Turtle;
-import net.minecraft.world.entity.animal.WaterAnimal;
-import net.minecraft.world.entity.animal.Wolf;
+import net.minecraft.world.entity.animal.*;
 import net.minecraft.world.entity.animal.allay.Allay;
 import net.minecraft.world.entity.animal.axolotl.Axolotl;
 import net.minecraft.world.entity.animal.camel.Camel;
 import net.minecraft.world.entity.animal.frog.Frog;
 import net.minecraft.world.entity.animal.frog.Tadpole;
 import net.minecraft.world.entity.animal.goat.Goat;
-import net.minecraft.world.entity.animal.horse.AbstractChestedHorse;
-import net.minecraft.world.entity.animal.horse.AbstractHorse;
-import net.minecraft.world.entity.animal.horse.Donkey;
-import net.minecraft.world.entity.animal.horse.Horse;
-import net.minecraft.world.entity.animal.horse.Llama;
-import net.minecraft.world.entity.animal.horse.Mule;
-import net.minecraft.world.entity.animal.horse.SkeletonHorse;
-import net.minecraft.world.entity.animal.horse.TraderLlama;
-import net.minecraft.world.entity.animal.horse.ZombieHorse;
+import net.minecraft.world.entity.animal.horse.*;
 import net.minecraft.world.entity.animal.sniffer.Sniffer;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EndCrystal;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.boss.wither.WitherBoss;
-import net.minecraft.world.entity.decoration.ArmorStand;
-import net.minecraft.world.entity.decoration.GlowItemFrame;
-import net.minecraft.world.entity.decoration.HangingEntity;
-import net.minecraft.world.entity.decoration.ItemFrame;
-import net.minecraft.world.entity.decoration.LeashFenceKnotEntity;
-import net.minecraft.world.entity.decoration.Painting;
+import net.minecraft.world.entity.decoration.*;
 import net.minecraft.world.entity.item.FallingBlockEntity;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.item.PrimedTnt;
-import net.minecraft.world.entity.monster.AbstractIllager;
-import net.minecraft.world.entity.monster.AbstractSkeleton;
-import net.minecraft.world.entity.monster.Blaze;
-import net.minecraft.world.entity.monster.CaveSpider;
-import net.minecraft.world.entity.monster.Creeper;
-import net.minecraft.world.entity.monster.Drowned;
-import net.minecraft.world.entity.monster.ElderGuardian;
-import net.minecraft.world.entity.monster.EnderMan;
-import net.minecraft.world.entity.monster.Endermite;
-import net.minecraft.world.entity.monster.Evoker;
-import net.minecraft.world.entity.monster.Ghast;
-import net.minecraft.world.entity.monster.Giant;
-import net.minecraft.world.entity.monster.Guardian;
-import net.minecraft.world.entity.monster.Husk;
-import net.minecraft.world.entity.monster.Illusioner;
-import net.minecraft.world.entity.monster.MagmaCube;
-import net.minecraft.world.entity.monster.Monster;
-import net.minecraft.world.entity.monster.Phantom;
-import net.minecraft.world.entity.monster.Pillager;
-import net.minecraft.world.entity.monster.Ravager;
-import net.minecraft.world.entity.monster.Shulker;
-import net.minecraft.world.entity.monster.Silverfish;
-import net.minecraft.world.entity.monster.Skeleton;
-import net.minecraft.world.entity.monster.Slime;
-import net.minecraft.world.entity.monster.SpellcasterIllager;
-import net.minecraft.world.entity.monster.Spider;
-import net.minecraft.world.entity.monster.Stray;
-import net.minecraft.world.entity.monster.Strider;
-import net.minecraft.world.entity.monster.Vex;
-import net.minecraft.world.entity.monster.Vindicator;
-import net.minecraft.world.entity.monster.Witch;
-import net.minecraft.world.entity.monster.WitherSkeleton;
-import net.minecraft.world.entity.monster.Zoglin;
-import net.minecraft.world.entity.monster.Zombie;
-import net.minecraft.world.entity.monster.ZombieVillager;
-import net.minecraft.world.entity.monster.ZombifiedPiglin;
+import net.minecraft.world.entity.monster.*;
 import net.minecraft.world.entity.monster.hoglin.Hoglin;
 import net.minecraft.world.entity.monster.piglin.AbstractPiglin;
 import net.minecraft.world.entity.monster.piglin.Piglin;
@@ -127,43 +41,10 @@ import net.minecraft.world.entity.monster.warden.Warden;
 import net.minecraft.world.entity.npc.AbstractVillager;
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.entity.npc.WanderingTrader;
-import net.minecraft.world.entity.projectile.AbstractArrow;
-import net.minecraft.world.entity.projectile.AbstractHurtingProjectile;
-import net.minecraft.world.entity.projectile.Arrow;
-import net.minecraft.world.entity.projectile.DragonFireball;
-import net.minecraft.world.entity.projectile.EvokerFangs;
-import net.minecraft.world.entity.projectile.EyeOfEnder;
-import net.minecraft.world.entity.projectile.FireworkRocketEntity;
-import net.minecraft.world.entity.projectile.FishingHook;
-import net.minecraft.world.entity.projectile.LargeFireball;
-import net.minecraft.world.entity.projectile.LlamaSpit;
-import net.minecraft.world.entity.projectile.ShulkerBullet;
-import net.minecraft.world.entity.projectile.SmallFireball;
-import net.minecraft.world.entity.projectile.Snowball;
-import net.minecraft.world.entity.projectile.SpectralArrow;
-import net.minecraft.world.entity.projectile.ThrowableProjectile;
-import net.minecraft.world.entity.projectile.ThrownEgg;
-import net.minecraft.world.entity.projectile.ThrownEnderpearl;
-import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
-import net.minecraft.world.entity.projectile.ThrownPotion;
-import net.minecraft.world.entity.projectile.ThrownTrident;
-import net.minecraft.world.entity.projectile.WitherSkull;
-import net.minecraft.world.entity.vehicle.AbstractMinecart;
-import net.minecraft.world.entity.vehicle.Boat;
-import net.minecraft.world.entity.vehicle.ChestBoat;
-import net.minecraft.world.entity.vehicle.Minecart;
-import net.minecraft.world.entity.vehicle.MinecartChest;
-import net.minecraft.world.entity.vehicle.MinecartCommandBlock;
-import net.minecraft.world.entity.vehicle.MinecartFurnace;
-import net.minecraft.world.entity.vehicle.MinecartHopper;
-import net.minecraft.world.entity.vehicle.MinecartSpawner;
-import net.minecraft.world.entity.vehicle.MinecartTNT;
+import net.minecraft.world.entity.projectile.*;
+import net.minecraft.world.entity.vehicle.*;
 import net.minecraft.world.phys.AABB;
-import org.bukkit.EntityEffect;
-import org.bukkit.Location;
-import org.bukkit.Server;
-import org.bukkit.Sound;
-import org.bukkit.World;
+import org.bukkit.*;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.PistonMoveReaction;
 import org.bukkit.craftbukkit.CraftServer;
@@ -182,17 +63,17 @@ import org.bukkit.entity.SpawnCategory;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.metadata.MetadataValue;
-import org.bukkit.permissions.PermissibleBase;
-import org.bukkit.permissions.Permission;
-import org.bukkit.permissions.PermissionAttachment;
-import org.bukkit.permissions.PermissionAttachmentInfo;
-import org.bukkit.permissions.ServerOperator;
+import org.bukkit.permissions.*;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
 
-import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+import java.util.UUID;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
@@ -210,7 +91,9 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     @Override
     public final io.papermc.paper.threadedregions.scheduler.EntityScheduler getScheduler() {
         return this.apiScheduler;
-    };
+    }
+
+    ;
     // Paper end - Folia schedulers
 
     public CraftEntity(final CraftServer server, final Entity entity) {
@@ -226,226 +109,310 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         if (entity instanceof LivingEntity) {
             // Players
             if (entity instanceof net.minecraft.world.entity.player.Player) {
-                if (entity instanceof ServerPlayer) { return new CraftPlayer(server, (ServerPlayer) entity); }
-                else { return new CraftHumanEntity(server, (net.minecraft.world.entity.player.Player) entity); }
+                if (entity instanceof ServerPlayer) {return new CraftPlayer(server, (ServerPlayer) entity);} else {
+                    return new CraftHumanEntity(server, (net.minecraft.world.entity.player.Player) entity);
+                }
             }
             // Water Animals
             else if (entity instanceof WaterAnimal) {
                 if (entity instanceof Squid) {
-                    if (entity instanceof GlowSquid) { return new CraftGlowSquid(server, (GlowSquid) entity); }
-                    else { return new CraftSquid(server, (Squid) entity); }
-                }
-                else if (entity instanceof AbstractFish) {
+                    if (entity instanceof GlowSquid) {return new CraftGlowSquid(server, (GlowSquid) entity);} else {
+                        return new CraftSquid(server, (Squid) entity);
+                    }
+                } else if (entity instanceof AbstractFish) {
                     // Paper start - Schooling Fish API
                     if (entity instanceof net.minecraft.world.entity.animal.AbstractSchoolingFish abstractSchoolingFish) {
-                       if (entity instanceof Cod) { return new CraftCod(server, (Cod) entity); }
-                       else if (entity instanceof Salmon) { return new CraftSalmon(server, (Salmon) entity); }
-                       else if (entity instanceof TropicalFish) { return new CraftTropicalFish(server, (TropicalFish) entity); }
-                       else { return new io.papermc.paper.entity.PaperSchoolableFish(server, abstractSchoolingFish); }
+                        if (entity instanceof Cod) {
+                            return new CraftCod(server, (Cod) entity);
+                        } else if (entity instanceof Salmon) {
+                            return new CraftSalmon(server, (Salmon) entity);
+                        } else if (entity instanceof TropicalFish) {
+                            return new CraftTropicalFish(server, (TropicalFish) entity);
+                        } else {return new io.papermc.paper.entity.PaperSchoolableFish(server, abstractSchoolingFish);}
                     }
                     // Paper end
-                    else if (entity instanceof Pufferfish) { return new CraftPufferFish(server, (Pufferfish) entity); }
+                    else if (entity instanceof Pufferfish) {return new CraftPufferFish(server, (Pufferfish) entity);}
                     // Paper - move fish
-                    else if (entity instanceof Tadpole) { return new CraftTadpole(server, (Tadpole) entity); }
-                    else { return new CraftFish(server, (AbstractFish) entity); }
+                    else if (entity instanceof Tadpole) {return new CraftTadpole(server, (Tadpole) entity);} else {
+                        return new CraftFish(server, (AbstractFish) entity);
+                    }
+                } else if (entity instanceof Dolphin) {return new CraftDolphin(server, (Dolphin) entity);} else {
+                    return new CraftWaterMob(server, (WaterAnimal) entity);
                 }
-                else if (entity instanceof Dolphin) { return new CraftDolphin(server, (Dolphin) entity); }
-                else { return new CraftWaterMob(server, (WaterAnimal) entity); }
-            }
-            else if (entity instanceof PathfinderMob) {
+            } else if (entity instanceof PathfinderMob) {
                 // Animals
                 if (entity instanceof Animal) {
-                    if (entity instanceof Chicken) { return new CraftChicken(server, (Chicken) entity); }
-                    else if (entity instanceof Cow) {
-                        if (entity instanceof MushroomCow) { return new CraftMushroomCow(server, (MushroomCow) entity); }
-                        else { return new CraftCow(server, (Cow) entity); }
-                    }
-                    else if (entity instanceof Pig) { return new CraftPig(server, (Pig) entity); }
-                    else if (entity instanceof TamableAnimal) {
-                        if (entity instanceof Wolf) { return new CraftWolf(server, (Wolf) entity); }
-                        else if (entity instanceof Cat) { return new CraftCat(server, (Cat) entity); }
-                        else if (entity instanceof Parrot) { return new CraftParrot(server, (Parrot) entity); }
+                    if (entity instanceof Chicken) {
+                        return new CraftChicken(server, (Chicken) entity);
+                    } else if (entity instanceof Cow) {
+                        if (entity instanceof MushroomCow) {
+                            return new CraftMushroomCow(server, (MushroomCow) entity);
+                        } else {return new CraftCow(server, (Cow) entity);}
+                    } else if (entity instanceof Pig) {
+                        return new CraftPig(server, (Pig) entity);
+                    } else if (entity instanceof TamableAnimal) {
+                        if (entity instanceof Wolf) {
+                            return new CraftWolf(server, (Wolf) entity);
+                        } else if (entity instanceof Cat) {
+                            return new CraftCat(server, (Cat) entity);
+                        } else if (entity instanceof Parrot) {return new CraftParrot(server, (Parrot) entity);}
+                    } else if (entity instanceof Sheep) {
+                        return new CraftSheep(server, (Sheep) entity);
+                    } else if (entity instanceof AbstractHorse) {
+                        if (entity instanceof AbstractChestedHorse) {
+                            if (entity instanceof Donkey) {
+                                return new CraftDonkey(server, (Donkey) entity);
+                            } else if (entity instanceof Mule) {
+                                return new CraftMule(server, (Mule) entity);
+                            } else if (entity instanceof TraderLlama) {
+                                return new CraftTraderLlama(server, (TraderLlama) entity);
+                            } else if (entity instanceof Llama) {return new CraftLlama(server, (Llama) entity);}
+                        } else if (entity instanceof Horse) {
+                            return new CraftHorse(server, (Horse) entity);
+                        } else if (entity instanceof SkeletonHorse) {
+                            return new CraftSkeletonHorse(server, (SkeletonHorse) entity);
+                        } else if (entity instanceof ZombieHorse) {
+                            return new CraftZombieHorse(server, (ZombieHorse) entity);
+                        } else if (entity instanceof Camel) {return new CraftCamel(server, (Camel) entity);}
+                    } else if (entity instanceof Rabbit) {
+                        return new CraftRabbit(server, (Rabbit) entity);
+                    } else if (entity instanceof PolarBear) {
+                        return new CraftPolarBear(server, (PolarBear) entity);
+                    } else if (entity instanceof Turtle) {
+                        return new CraftTurtle(server, (Turtle) entity);
+                    } else if (entity instanceof Ocelot) {
+                        return new CraftOcelot(server, (Ocelot) entity);
+                    } else if (entity instanceof Panda) {
+                        return new CraftPanda(server, (Panda) entity);
+                    } else if (entity instanceof Fox) {
+                        return new CraftFox(server, (Fox) entity);
+                    } else if (entity instanceof Bee) {
+                        return new CraftBee(server, (Bee) entity);
+                    } else if (entity instanceof Hoglin) {
+                        return new CraftHoglin(server, (Hoglin) entity);
+                    } else if (entity instanceof Strider) {
+                        return new CraftStrider(server, (Strider) entity);
+                    } else if (entity instanceof Axolotl) {
+                        return new CraftAxolotl(server, (Axolotl) entity);
+                    } else if (entity instanceof Goat) {
+                        return new CraftGoat(server, (Goat) entity);
+                    } else if (entity instanceof Frog) {
+                        return new CraftFrog(server, (Frog) entity);
+                    } else if (entity instanceof Sniffer) {return new CraftSniffer(server, (Sniffer) entity);} else {
+                        return new CraftAnimals(server, (Animal) entity);
                     }
-                    else if (entity instanceof Sheep) { return new CraftSheep(server, (Sheep) entity); }
-                    else if (entity instanceof AbstractHorse) {
-                        if (entity instanceof AbstractChestedHorse){
-                            if (entity instanceof Donkey) { return new CraftDonkey(server, (Donkey) entity); }
-                            else if (entity instanceof Mule) { return new CraftMule(server, (Mule) entity); }
-                            else if (entity instanceof TraderLlama) { return new CraftTraderLlama(server, (TraderLlama) entity); }
-                            else if (entity instanceof Llama) { return new CraftLlama(server, (Llama) entity); }
-                        } else if (entity instanceof Horse) { return new CraftHorse(server, (Horse) entity); }
-                        else if (entity instanceof SkeletonHorse) { return new CraftSkeletonHorse(server, (SkeletonHorse) entity); }
-                        else if (entity instanceof ZombieHorse) { return new CraftZombieHorse(server, (ZombieHorse) entity); }
-                        else if (entity instanceof Camel) { return new CraftCamel(server, (Camel) entity); }
-                    }
-                    else if (entity instanceof Rabbit) { return new CraftRabbit(server, (Rabbit) entity); }
-                    else if (entity instanceof PolarBear) { return new CraftPolarBear(server, (PolarBear) entity); }
-                    else if (entity instanceof Turtle) { return new CraftTurtle(server, (Turtle) entity); }
-                    else if (entity instanceof Ocelot) { return new CraftOcelot(server, (Ocelot) entity); }
-                    else if (entity instanceof Panda) { return new CraftPanda(server, (Panda) entity); }
-                    else if (entity instanceof Fox) { return new CraftFox(server, (Fox) entity); }
-                    else if (entity instanceof Bee) { return new CraftBee(server, (Bee) entity); }
-                    else if (entity instanceof Hoglin) { return new CraftHoglin(server, (Hoglin) entity); }
-                    else if (entity instanceof Strider) { return new CraftStrider(server, (Strider) entity); }
-                    else if (entity instanceof Axolotl) { return new CraftAxolotl(server, (Axolotl) entity); }
-                    else if (entity instanceof Goat) { return new CraftGoat(server, (Goat) entity); }
-                    else if (entity instanceof Frog) { return new CraftFrog(server, (Frog) entity); }
-                    else if (entity instanceof Sniffer) { return new CraftSniffer(server, (Sniffer) entity); }
-                    else  { return new CraftAnimals(server, (Animal) entity); }
                 }
                 // Monsters
                 else if (entity instanceof Monster) {
                     if (entity instanceof Zombie) {
-                        if (entity instanceof ZombifiedPiglin) { return new CraftPigZombie(server, (ZombifiedPiglin) entity); }
-                        else if (entity instanceof Husk) { return new CraftHusk(server, (Husk) entity); }
-                        else if (entity instanceof ZombieVillager) { return new CraftVillagerZombie(server, (ZombieVillager) entity); }
-                        else if (entity instanceof Drowned) { return new CraftDrowned(server, (Drowned) entity); }
-                        else { return new CraftZombie(server, (Zombie) entity); }
-                    }
-                    else if (entity instanceof Creeper) { return new CraftCreeper(server, (Creeper) entity); }
-                    else if (entity instanceof EnderMan) { return new CraftEnderman(server, (EnderMan) entity); }
-                    else if (entity instanceof Silverfish) { return new CraftSilverfish(server, (Silverfish) entity); }
-                    else if (entity instanceof Giant) { return new CraftGiant(server, (Giant) entity); }
-                    else if (entity instanceof AbstractSkeleton) {
-                        if (entity instanceof Stray) { return new CraftStray(server, (Stray) entity); }
-                        else if (entity instanceof WitherSkeleton) { return new CraftWitherSkeleton(server, (WitherSkeleton) entity); }
-                        else if (entity instanceof Skeleton){ return new CraftSkeleton(server, (Skeleton) entity); }
-                    }
-                    else if (entity instanceof Blaze) { return new CraftBlaze(server, (Blaze) entity); }
-                    else if (entity instanceof Witch) { return new CraftWitch(server, (Witch) entity); }
-                    else if (entity instanceof WitherBoss) { return new CraftWither(server, (WitherBoss) entity); }
-                    else if (entity instanceof Spider) {
-                        if (entity instanceof CaveSpider) { return new CraftCaveSpider(server, (CaveSpider) entity); }
-                        else { return new CraftSpider(server, (Spider) entity); }
-                    }
-                    else if (entity instanceof Endermite) { return new CraftEndermite(server, (Endermite) entity); }
-                    else if (entity instanceof Guardian) {
-                        if (entity instanceof ElderGuardian) { return new CraftElderGuardian(server, (ElderGuardian) entity); }
-                        else { return new CraftGuardian(server, (Guardian) entity); }
-                    }
-                    else if (entity instanceof Vex) { return new CraftVex(server, (Vex) entity); }
-                    else if (entity instanceof AbstractIllager) {
+                        if (entity instanceof ZombifiedPiglin) {
+                            return new CraftPigZombie(server, (ZombifiedPiglin) entity);
+                        } else if (entity instanceof Husk) {
+                            return new CraftHusk(server, (Husk) entity);
+                        } else if (entity instanceof ZombieVillager) {
+                            return new CraftVillagerZombie(server, (ZombieVillager) entity);
+                        } else if (entity instanceof Drowned) {
+                            return new CraftDrowned(server, (Drowned) entity);
+                        } else {return new CraftZombie(server, (Zombie) entity);}
+                    } else if (entity instanceof Creeper) {
+                        return new CraftCreeper(server, (Creeper) entity);
+                    } else if (entity instanceof EnderMan) {
+                        return new CraftEnderman(server, (EnderMan) entity);
+                    } else if (entity instanceof Silverfish) {
+                        return new CraftSilverfish(server, (Silverfish) entity);
+                    } else if (entity instanceof Giant) {
+                        return new CraftGiant(server, (Giant) entity);
+                    } else if (entity instanceof AbstractSkeleton) {
+                        if (entity instanceof Stray) {
+                            return new CraftStray(server, (Stray) entity);
+                        } else if (entity instanceof WitherSkeleton) {
+                            return new CraftWitherSkeleton(server, (WitherSkeleton) entity);
+                        } else if (entity instanceof Skeleton) {return new CraftSkeleton(server, (Skeleton) entity);}
+                    } else if (entity instanceof Blaze) {
+                        return new CraftBlaze(server, (Blaze) entity);
+                    } else if (entity instanceof Witch) {
+                        return new CraftWitch(server, (Witch) entity);
+                    } else if (entity instanceof WitherBoss) {
+                        return new CraftWither(server, (WitherBoss) entity);
+                    } else if (entity instanceof Spider) {
+                        if (entity instanceof CaveSpider) {
+                            return new CraftCaveSpider(server, (CaveSpider) entity);
+                        } else {return new CraftSpider(server, (Spider) entity);}
+                    } else if (entity instanceof Endermite) {
+                        return new CraftEndermite(server, (Endermite) entity);
+                    } else if (entity instanceof Guardian) {
+                        if (entity instanceof ElderGuardian) {
+                            return new CraftElderGuardian(server, (ElderGuardian) entity);
+                        } else {return new CraftGuardian(server, (Guardian) entity);}
+                    } else if (entity instanceof Vex) {
+                        return new CraftVex(server, (Vex) entity);
+                    } else if (entity instanceof AbstractIllager) {
                         if (entity instanceof SpellcasterIllager) {
-                            if (entity instanceof Evoker) { return new CraftEvoker(server, (Evoker) entity); }
-                            else if (entity instanceof Illusioner) { return new CraftIllusioner(server, (Illusioner) entity); }
-                            else {  return new CraftSpellcaster(server, (SpellcasterIllager) entity); }
-                        }
-                        else if (entity instanceof Vindicator) { return new CraftVindicator(server, (Vindicator) entity); }
-                        else if (entity instanceof Pillager) { return new CraftPillager(server, (Pillager) entity); }
-                        else { return new CraftIllager(server, (AbstractIllager) entity); }
-                    }
-                    else if (entity instanceof Ravager) { return new CraftRavager(server, (Ravager) entity); }
-                    else if (entity instanceof AbstractPiglin) {
+                            if (entity instanceof Evoker) {
+                                return new CraftEvoker(server, (Evoker) entity);
+                            } else if (entity instanceof Illusioner) {
+                                return new CraftIllusioner(server, (Illusioner) entity);
+                            } else {return new CraftSpellcaster(server, (SpellcasterIllager) entity);}
+                        } else if (entity instanceof Vindicator) {
+                            return new CraftVindicator(server, (Vindicator) entity);
+                        } else if (entity instanceof Pillager) {
+                            return new CraftPillager(server, (Pillager) entity);
+                        } else {return new CraftIllager(server, (AbstractIllager) entity);}
+                    } else if (entity instanceof Ravager) {
+                        return new CraftRavager(server, (Ravager) entity);
+                    } else if (entity instanceof AbstractPiglin) {
                         if (entity instanceof Piglin) return new CraftPiglin(server, (Piglin) entity);
-                        else if (entity instanceof PiglinBrute) { return new CraftPiglinBrute(server, (PiglinBrute) entity); }
-                        else { return new CraftPiglinAbstract(server, (AbstractPiglin) entity); }
+                        else if (entity instanceof PiglinBrute) {
+                            return new CraftPiglinBrute(server, (PiglinBrute) entity);
+                        } else {return new CraftPiglinAbstract(server, (AbstractPiglin) entity);}
+                    } else if (entity instanceof Zoglin) {
+                        return new CraftZoglin(server, (Zoglin) entity);
+                    } else if (entity instanceof Warden) {return new CraftWarden(server, (Warden) entity);} else {
+                        return new CraftMonster(server, (Monster) entity);
                     }
-                    else if (entity instanceof Zoglin) { return new CraftZoglin(server, (Zoglin) entity); }
-                    else if (entity instanceof Warden) { return new CraftWarden(server, (Warden) entity); }
-
-                    else  { return new CraftMonster(server, (Monster) entity); }
-                }
-                else if (entity instanceof AbstractGolem) {
-                    if (entity instanceof SnowGolem) { return new CraftSnowman(server, (SnowGolem) entity); }
-                    else if (entity instanceof IronGolem) { return new CraftIronGolem(server, (IronGolem) entity); }
-                    else if (entity instanceof Shulker) { return new CraftShulker(server, (Shulker) entity); }
-                }
-                else if (entity instanceof AbstractVillager) {
-                    if (entity instanceof Villager) { return new CraftVillager(server, (Villager) entity); }
-                    else if (entity instanceof WanderingTrader) { return new CraftWanderingTrader(server, (WanderingTrader) entity); }
-                    else { return new CraftAbstractVillager(server, (AbstractVillager) entity); }
+                } else if (entity instanceof AbstractGolem) {
+                    if (entity instanceof SnowGolem) {
+                        return new CraftSnowman(server, (SnowGolem) entity);
+                    } else if (entity instanceof IronGolem) {
+                        return new CraftIronGolem(server, (IronGolem) entity);
+                    } else if (entity instanceof Shulker) {return new CraftShulker(server, (Shulker) entity);}
+                } else if (entity instanceof AbstractVillager) {
+                    if (entity instanceof Villager) {
+                        return new CraftVillager(server, (Villager) entity);
+                    } else if (entity instanceof WanderingTrader) {
+                        return new CraftWanderingTrader(server, (WanderingTrader) entity);
+                    } else {return new CraftAbstractVillager(server, (AbstractVillager) entity);}
+                } else if (entity instanceof Allay) {return new CraftAllay(server, (Allay) entity);} else {
+                    return new CraftCreature(server, (PathfinderMob) entity);
                 }
-                else if (entity instanceof Allay) { return new CraftAllay(server, (Allay) entity); }
-                else { return new CraftCreature(server, (PathfinderMob) entity); }
             }
             // Slimes are a special (and broken) case
             else if (entity instanceof Slime) {
-                if (entity instanceof MagmaCube) { return new CraftMagmaCube(server, (MagmaCube) entity); }
-                else { return new CraftSlime(server, (Slime) entity); }
+                if (entity instanceof MagmaCube) {return new CraftMagmaCube(server, (MagmaCube) entity);} else {
+                    return new CraftSlime(server, (Slime) entity);
+                }
             }
             // Flying
             else if (entity instanceof FlyingMob) {
-                if (entity instanceof Ghast) { return new CraftGhast(server, (Ghast) entity); }
-                else if (entity instanceof Phantom) { return new CraftPhantom(server, (Phantom) entity); }
-                else { return new CraftFlying(server, (FlyingMob) entity); }
-            }
-            else if (entity instanceof EnderDragon) {
+                if (entity instanceof Ghast) {
+                    return new CraftGhast(server, (Ghast) entity);
+                } else if (entity instanceof Phantom) {return new CraftPhantom(server, (Phantom) entity);} else {
+                    return new CraftFlying(server, (FlyingMob) entity);
+                }
+            } else if (entity instanceof EnderDragon) {
                 return new CraftEnderDragon(server, (EnderDragon) entity);
             }
             // Ambient
             else if (entity instanceof AmbientCreature) {
-                if (entity instanceof Bat) { return new CraftBat(server, (Bat) entity); }
-                else { return new CraftAmbient(server, (AmbientCreature) entity); }
+                if (entity instanceof Bat) {return new CraftBat(server, (Bat) entity);} else {
+                    return new CraftAmbient(server, (AmbientCreature) entity);
+                }
+            } else if (entity instanceof ArmorStand) {return new CraftArmorStand(server, (ArmorStand) entity);} else {
+                return new CraftLivingEntity(server, (LivingEntity) entity);
             }
-            else if (entity instanceof ArmorStand) { return new CraftArmorStand(server, (ArmorStand) entity); }
-            else  { return new CraftLivingEntity(server, (LivingEntity) entity); }
-        }
-        else if (entity instanceof EnderDragonPart) {
+        } else if (entity instanceof EnderDragonPart) {
             EnderDragonPart part = (EnderDragonPart) entity;
-            if (part.parentMob instanceof EnderDragon) { return new CraftEnderDragonPart(server, (EnderDragonPart) entity); }
-            else { return new CraftComplexPart(server, (EnderDragonPart) entity); }
-        }
-        else if (entity instanceof ExperienceOrb) { return new CraftExperienceOrb(server, (ExperienceOrb) entity); }
-        else if (entity instanceof Arrow) { return new CraftTippedArrow(server, (Arrow) entity); }
-        else if (entity instanceof SpectralArrow) { return new CraftSpectralArrow(server, (SpectralArrow) entity); }
-        else if (entity instanceof AbstractArrow) {
-            if (entity instanceof ThrownTrident) { return new CraftTrident(server, (ThrownTrident) entity); }
-            else { return new CraftArrow(server, (AbstractArrow) entity); }
-        }
-        else if (entity instanceof Boat) {
-            if (entity instanceof ChestBoat) { return new CraftChestBoat(server, (ChestBoat) entity); }
-            else { return new CraftBoat(server, (Boat) entity); }
-        }
-        else if (entity instanceof ThrowableProjectile) {
-            if (entity instanceof ThrownEgg) { return new CraftEgg(server, (ThrownEgg) entity); }
-            else if (entity instanceof Snowball) { return new CraftSnowball(server, (Snowball) entity); }
-            else if (entity instanceof ThrownPotion) { return new CraftThrownPotion(server, (ThrownPotion) entity); }
-            else if (entity instanceof ThrownEnderpearl) { return new CraftEnderPearl(server, (ThrownEnderpearl) entity); }
-            else if (entity instanceof ThrownExperienceBottle) { return new CraftThrownExpBottle(server, (ThrownExperienceBottle) entity); }
-        }
-        else if (entity instanceof FallingBlockEntity) { return new CraftFallingBlock(server, (FallingBlockEntity) entity); }
-        else if (entity instanceof AbstractHurtingProjectile) {
-            if (entity instanceof SmallFireball) { return new CraftSmallFireball(server, (SmallFireball) entity); }
-            else if (entity instanceof LargeFireball) { return new CraftLargeFireball(server, (LargeFireball) entity); }
-            else if (entity instanceof WitherSkull) { return new CraftWitherSkull(server, (WitherSkull) entity); }
-            else if (entity instanceof DragonFireball) { return new CraftDragonFireball(server, (DragonFireball) entity); }
-            else { return new CraftFireball(server, (AbstractHurtingProjectile) entity); }
-        }
-        else if (entity instanceof EyeOfEnder) { return new CraftEnderSignal(server, (EyeOfEnder) entity); }
-        else if (entity instanceof EndCrystal) { return new CraftEnderCrystal(server, (EndCrystal) entity); }
-        else if (entity instanceof FishingHook) { return new CraftFishHook(server, (FishingHook) entity); }
-        else if (entity instanceof ItemEntity) { return new CraftItem(server, (ItemEntity) entity); }
-        else if (entity instanceof LightningBolt) { return new CraftLightningStrike(server, (LightningBolt) entity); }
-        else if (entity instanceof AbstractMinecart) {
-            if (entity instanceof MinecartFurnace) { return new CraftMinecartFurnace(server, (MinecartFurnace) entity); }
-            else if (entity instanceof MinecartChest) { return new CraftMinecartChest(server, (MinecartChest) entity); }
-            else if (entity instanceof MinecartTNT) { return new CraftMinecartTNT(server, (MinecartTNT) entity); }
-            else if (entity instanceof MinecartHopper) { return new CraftMinecartHopper(server, (MinecartHopper) entity); }
-            else if (entity instanceof MinecartSpawner) { return new CraftMinecartMobSpawner(server, (MinecartSpawner) entity); }
-            else if (entity instanceof Minecart) { return new CraftMinecartRideable(server, (Minecart) entity); }
-            else if (entity instanceof MinecartCommandBlock) { return new CraftMinecartCommand(server, (MinecartCommandBlock) entity); }
-        } else if (entity instanceof HangingEntity) {
-            if (entity instanceof Painting) { return new CraftPainting(server, (Painting) entity); }
-            else if (entity instanceof ItemFrame) {
-                if (entity instanceof GlowItemFrame) { return new CraftGlowItemFrame(server, (GlowItemFrame) entity); }
-                else { return new CraftItemFrame(server, (ItemFrame) entity); }
+            if (part.parentMob instanceof EnderDragon) {
+                return new CraftEnderDragonPart(server, (EnderDragonPart) entity);
+            } else {return new CraftComplexPart(server, (EnderDragonPart) entity);}
+        } else if (entity instanceof ExperienceOrb) {
+            return new CraftExperienceOrb(server, (ExperienceOrb) entity);
+        } else if (entity instanceof Arrow) {
+            return new CraftTippedArrow(server, (Arrow) entity);
+        } else if (entity instanceof SpectralArrow) {
+            return new CraftSpectralArrow(server, (SpectralArrow) entity);
+        } else if (entity instanceof AbstractArrow) {
+            if (entity instanceof ThrownTrident) {return new CraftTrident(server, (ThrownTrident) entity);} else {
+                return new CraftArrow(server, (AbstractArrow) entity);
             }
-            else if (entity instanceof LeashFenceKnotEntity) { return new CraftLeash(server, (LeashFenceKnotEntity) entity); }
-            else { return new CraftHanging(server, (HangingEntity) entity); }
-        }
-        else if (entity instanceof PrimedTnt) { return new CraftTNTPrimed(server, (PrimedTnt) entity); }
-        else if (entity instanceof FireworkRocketEntity) { return new CraftFirework(server, (FireworkRocketEntity) entity); }
-        else if (entity instanceof ShulkerBullet) { return new CraftShulkerBullet(server, (ShulkerBullet) entity); }
-        else if (entity instanceof AreaEffectCloud) { return new CraftAreaEffectCloud(server, (AreaEffectCloud) entity); }
-        else if (entity instanceof EvokerFangs) { return new CraftEvokerFangs(server, (EvokerFangs) entity); }
-        else if (entity instanceof LlamaSpit) { return new CraftLlamaSpit(server, (LlamaSpit) entity); }
-        else if (entity instanceof Marker) { return new CraftMarker(server, (Marker) entity); }
-        else if (entity instanceof Interaction) { return new CraftInteraction(server, (Interaction) entity); }
-        else if (entity instanceof Display) {
-            if (entity instanceof Display.BlockDisplay) { return new CraftBlockDisplay(server, (Display.BlockDisplay) entity); }
-            else if (entity instanceof Display.ItemDisplay) { return new CraftItemDisplay(server, (Display.ItemDisplay) entity); }
-            else if (entity instanceof Display.TextDisplay) { return new CraftTextDisplay(server, (Display.TextDisplay) entity); }
-            else { return new CraftDisplay(server, (Display) entity); }
+        } else if (entity instanceof Boat) {
+            if (entity instanceof ChestBoat) {return new CraftChestBoat(server, (ChestBoat) entity);} else {
+                return new CraftBoat(server, (Boat) entity);
+            }
+        } else if (entity instanceof ThrowableProjectile) {
+            if (entity instanceof ThrownEgg) {
+                return new CraftEgg(server, (ThrownEgg) entity);
+            } else if (entity instanceof Snowball) {
+                return new CraftSnowball(server, (Snowball) entity);
+            } else if (entity instanceof ThrownPotion) {
+                return new CraftThrownPotion(server, (ThrownPotion) entity);
+            } else if (entity instanceof ThrownEnderpearl) {
+                return new CraftEnderPearl(server, (ThrownEnderpearl) entity);
+            } else if (entity instanceof ThrownExperienceBottle) {
+                return new CraftThrownExpBottle(server, (ThrownExperienceBottle) entity);
+            }
+        } else if (entity instanceof FallingBlockEntity) {
+            return new CraftFallingBlock(server, (FallingBlockEntity) entity);
+        } else if (entity instanceof AbstractHurtingProjectile) {
+            if (entity instanceof SmallFireball) {
+                return new CraftSmallFireball(server, (SmallFireball) entity);
+            } else if (entity instanceof LargeFireball) {
+                return new CraftLargeFireball(server, (LargeFireball) entity);
+            } else if (entity instanceof WitherSkull) {
+                return new CraftWitherSkull(server, (WitherSkull) entity);
+            } else if (entity instanceof DragonFireball) {
+                return new CraftDragonFireball(server, (DragonFireball) entity);
+            } else {return new CraftFireball(server, (AbstractHurtingProjectile) entity);}
+        } else if (entity instanceof EyeOfEnder) {
+            return new CraftEnderSignal(server, (EyeOfEnder) entity);
+        } else if (entity instanceof EndCrystal) {
+            return new CraftEnderCrystal(server, (EndCrystal) entity);
+        } else if (entity instanceof FishingHook) {
+            return new CraftFishHook(server, (FishingHook) entity);
+        } else if (entity instanceof ItemEntity) {
+            return new CraftItem(server, (ItemEntity) entity);
+        } else if (entity instanceof LightningBolt) {
+            return new CraftLightningStrike(server, (LightningBolt) entity);
+        } else if (entity instanceof AbstractMinecart) {
+            if (entity instanceof MinecartFurnace) {
+                return new CraftMinecartFurnace(server, (MinecartFurnace) entity);
+            } else if (entity instanceof MinecartChest) {
+                return new CraftMinecartChest(server, (MinecartChest) entity);
+            } else if (entity instanceof MinecartTNT) {
+                return new CraftMinecartTNT(server, (MinecartTNT) entity);
+            } else if (entity instanceof MinecartHopper) {
+                return new CraftMinecartHopper(server, (MinecartHopper) entity);
+            } else if (entity instanceof MinecartSpawner) {
+                return new CraftMinecartMobSpawner(server, (MinecartSpawner) entity);
+            } else if (entity instanceof Minecart) {
+                return new CraftMinecartRideable(server, (Minecart) entity);
+            } else if (entity instanceof MinecartCommandBlock) {
+                return new CraftMinecartCommand(server, (MinecartCommandBlock) entity);
+            }
+        } else if (entity instanceof HangingEntity) {
+            if (entity instanceof Painting) {
+                return new CraftPainting(server, (Painting) entity);
+            } else if (entity instanceof ItemFrame) {
+                if (entity instanceof GlowItemFrame) {
+                    return new CraftGlowItemFrame(server, (GlowItemFrame) entity);
+                } else {return new CraftItemFrame(server, (ItemFrame) entity);}
+            } else if (entity instanceof LeashFenceKnotEntity) {
+                return new CraftLeash(server, (LeashFenceKnotEntity) entity);
+            } else {return new CraftHanging(server, (HangingEntity) entity);}
+        } else if (entity instanceof PrimedTnt) {
+            return new CraftTNTPrimed(server, (PrimedTnt) entity);
+        } else if (entity instanceof FireworkRocketEntity) {
+            return new CraftFirework(server, (FireworkRocketEntity) entity);
+        } else if (entity instanceof ShulkerBullet) {
+            return new CraftShulkerBullet(server, (ShulkerBullet) entity);
+        } else if (entity instanceof AreaEffectCloud) {
+            return new CraftAreaEffectCloud(server, (AreaEffectCloud) entity);
+        } else if (entity instanceof EvokerFangs) {
+            return new CraftEvokerFangs(server, (EvokerFangs) entity);
+        } else if (entity instanceof LlamaSpit) {
+            return new CraftLlamaSpit(server, (LlamaSpit) entity);
+        } else if (entity instanceof Marker) {
+            return new CraftMarker(server, (Marker) entity);
+        } else if (entity instanceof Interaction) {
+            return new CraftInteraction(server, (Interaction) entity);
+        } else if (entity instanceof Display) {
+            if (entity instanceof Display.BlockDisplay) {
+                return new CraftBlockDisplay(server, (Display.BlockDisplay) entity);
+            } else if (entity instanceof Display.ItemDisplay) {
+                return new CraftItemDisplay(server, (Display.ItemDisplay) entity);
+            } else if (entity instanceof Display.TextDisplay) {
+                return new CraftTextDisplay(server, (Display.TextDisplay) entity);
+            } else {return new CraftDisplay(server, (Display) entity);}
         }
         // CHECKSTYLE:ON
 
@@ -490,11 +457,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     // Paper start
+
     /**
      * Checks if the given velocity is not necessarily safe in all situations.
      * This function returning true does not mean the velocity is dangerous or to be avoided, only that it may be
      * a detriment to performance on the server.
-     *
+     * <p>
      * It is not to be used as a hard rule of any sort.
      * Paper only uses it to warn server owners in watchdog crashes.
      *
@@ -632,7 +600,8 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         Preconditions.checkState(!entity.generation, "Cannot get nearby entities during world generation");
         org.spigotmc.AsyncCatcher.catchOp("getNearbyEntities"); // Spigot
 
-        List<Entity> notchEntityList = this.entity.level().getEntities(entity, this.entity.getBoundingBox().inflate(x, y, z), Predicates.alwaysTrue());
+        List<Entity> notchEntityList = this.entity.level()
+                .getEntities(entity, this.entity.getBoundingBox().inflate(x, y, z), Predicates.alwaysTrue());
         List<org.bukkit.entity.Entity> bukkitEntityList = new java.util.ArrayList<org.bukkit.entity.Entity>(notchEntityList.size());
 
         for (Entity e : notchEntityList) {
@@ -703,6 +672,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public void lockFreezeTicks(boolean locked) {
         this.entity.freezeLocked = locked;
     }
+
     // Paper end - Freeze Tick Lock API
     @Override
     public void remove() {
@@ -947,17 +917,18 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public void customName(final net.kyori.adventure.text.Component customName) {
-        this.getHandle().setCustomName(customName != null ? io.papermc.paper.adventure.PaperAdventure.asVanilla(customName) : null);
+        this.getHandle()
+                .setCustomName(customName != null ? io.papermc.paper.adventure.PaperAdventure.asVanilla(customName) : null);
     }
 
     @Override
     public net.kyori.adventure.pointer.Pointers pointers() {
         if (this.adventure$pointers == null) {
             this.adventure$pointers = net.kyori.adventure.pointer.Pointers.builder()
-                .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::name)
-                .withDynamic(net.kyori.adventure.identity.Identity.UUID, this::getUniqueId)
-                .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
-                .build();
+                    .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::name)
+                    .withDynamic(net.kyori.adventure.identity.Identity.UUID, this::getUniqueId)
+                    .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
+                    .build();
         }
 
         return this.adventure$pointers;
@@ -1043,6 +1014,14 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public String getName() {
         return CraftChatMessage.fromComponent(this.getHandle().getName());
     }
+
+    // KissenPaper start
+    @Override
+    public net.kyori.adventure.text.@NotNull Component displayName() {
+        return teamDisplayName();
+    }
+    // KissenPaper end
+
     // Paper start
     @Override
     public net.kyori.adventure.text.@org.jetbrains.annotations.NotNull Component name() {
@@ -1280,32 +1259,26 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     // Spigot start
-    private final org.bukkit.entity.Entity.Spigot spigot = new org.bukkit.entity.Entity.Spigot()
-    {
+    private final org.bukkit.entity.Entity.Spigot spigot = new org.bukkit.entity.Entity.Spigot() {
 
         @Override
-        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent component)
-        {
+        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent component) {
         }
 
         @Override
-        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent... components)
-        {
+        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent... components) {
         }
 
         @Override
-        public void sendMessage(UUID sender, BaseComponent... components)
-        {
+        public void sendMessage(UUID sender, BaseComponent... components) {
         }
 
         @Override
-        public void sendMessage(UUID sender, BaseComponent component)
-        {
+        public void sendMessage(UUID sender, BaseComponent component) {
         }
     };
 
-    public org.bukkit.entity.Entity.Spigot spigot()
-    {
+    public org.bukkit.entity.Entity.Spigot spigot() {
         return this.spigot;
     }
     // Spigot end
@@ -1317,27 +1290,27 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         location.checkFinite();
         Location locationClone = location.clone(); // clone so we don't need to worry about mutations after this call.
 
-        net.minecraft.server.level.ServerLevel world = ((CraftWorld)locationClone.getWorld()).getHandle();
+        net.minecraft.server.level.ServerLevel world = ((CraftWorld) locationClone.getWorld()).getHandle();
         java.util.concurrent.CompletableFuture<Boolean> ret = new java.util.concurrent.CompletableFuture<>();
 
         world.loadChunksForMoveAsync(getHandle().getBoundingBoxAt(locationClone.getX(), locationClone.getY(), locationClone.getZ()),
-            this instanceof CraftPlayer ? ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.HIGHER : ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.NORMAL, (list) -> {
-            net.minecraft.server.level.ServerChunkCache chunkProviderServer = world.getChunkSource();
-            for (net.minecraft.world.level.chunk.ChunkAccess chunk : list) {
-                chunkProviderServer.addTicketAtLevel(net.minecraft.server.level.TicketType.POST_TELEPORT, chunk.getPos(), 33, CraftEntity.this.getEntityId());
-            }
-            net.minecraft.server.MinecraftServer.getServer().scheduleOnMain(() -> {
-                try {
-                    ret.complete(CraftEntity.this.teleport(locationClone, cause) ? Boolean.TRUE : Boolean.FALSE);
-                } catch (Throwable throwable) {
-                    if (throwable instanceof ThreadDeath) {
-                        throw (ThreadDeath)throwable;
+                this instanceof CraftPlayer ? ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.HIGHER : ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.NORMAL, (list) -> {
+                    net.minecraft.server.level.ServerChunkCache chunkProviderServer = world.getChunkSource();
+                    for (net.minecraft.world.level.chunk.ChunkAccess chunk : list) {
+                        chunkProviderServer.addTicketAtLevel(net.minecraft.server.level.TicketType.POST_TELEPORT, chunk.getPos(), 33, CraftEntity.this.getEntityId());
                     }
-                    net.minecraft.server.MinecraftServer.LOGGER.error("Failed to teleport entity " + CraftEntity.this, throwable);
-                    ret.completeExceptionally(throwable);
-                }
-            });
-        });
+                    net.minecraft.server.MinecraftServer.getServer().scheduleOnMain(() -> {
+                        try {
+                            ret.complete(CraftEntity.this.teleport(locationClone, cause) ? Boolean.TRUE : Boolean.FALSE);
+                        } catch (Throwable throwable) {
+                            if (throwable instanceof ThreadDeath) {
+                                throw (ThreadDeath) throwable;
+                            }
+                            net.minecraft.server.MinecraftServer.LOGGER.error("Failed to teleport entity " + CraftEntity.this, throwable);
+                            ret.completeExceptionally(throwable);
+                        }
+                    });
+                });
 
         return ret;
     }
@@ -1434,11 +1407,13 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public boolean isInPowderedSnow() {
         return getHandle().isInPowderSnow || getHandle().wasInPowderSnow; // depending on the location in the entity "tick" either could be needed.
     }
+
     // Paper end
     // Paper Start - Collision API
     @Override
     public boolean collidesAt(@org.jetbrains.annotations.NotNull Location location) {
-        net.minecraft.world.phys.AABB aabb = this.getHandle().getBoundingBoxAt(location.getX(), location.getY(), location.getZ());
+        net.minecraft.world.phys.AABB aabb = this.getHandle()
+                .getBoundingBoxAt(location.getX(), location.getY(), location.getZ());
 
         return !this.getHandle().level().noCollision(this.getHandle(), aabb);
     }
@@ -1450,4 +1425,23 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return !this.getHandle().level().noCollision(this.getHandle(), aabb);
     }
     // Paper End - Collision API
+
+    // KissenPaper start
+
+
+    @Override
+    public @NotNull Locale getCurrentLocale() {
+        return Bukkit.getKissen().getImplementation(LocalizationImplementation.class).getDefaultLocale();
+    }
+
+    @Override
+    public boolean isConnected() {
+        return true;
+    }
+
+    @Override
+    public final boolean isClient() { // Kinda useless for this use case
+        return true;
+    }
+    // KissenPaper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index 85ba63cf14e591294b97b79751e6a47c43ad1f1a..e2978399f9a1e111ac8bd82eddb7839b8ad91485 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -2,12 +2,6 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Optional;
-import java.util.Set;
-
 import net.kissenpvp.paper.permission.KissenPaperPlayerPermissible;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
@@ -41,15 +35,7 @@ import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.entity.memory.CraftMemoryMapper;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.craftbukkit.inventory.CraftContainer;
-import org.bukkit.craftbukkit.inventory.CraftInventory;
-import org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest;
-import org.bukkit.craftbukkit.inventory.CraftInventoryLectern;
-import org.bukkit.craftbukkit.inventory.CraftInventoryPlayer;
-import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.inventory.CraftMerchantCustom;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.inventory.*;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
@@ -57,16 +43,15 @@ import org.bukkit.entity.Firework;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.entity.Villager;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
-import org.bukkit.inventory.EntityEquipment;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryView;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.MainHand;
-import org.bukkit.inventory.Merchant;
-import org.bukkit.inventory.PlayerInventory;
-import org.bukkit.permissions.*;
+import org.bukkit.inventory.*;
+import org.bukkit.permissions.Permissible;
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionAttachment;
+import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
 
+import java.util.*;
+
 public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     private CraftInventoryPlayer inventory;
     private final CraftInventory enderChest;
@@ -159,6 +144,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         }
         return new Location(worldServer.getWorld(), bed.getX(), bed.getY(), bed.getZ());
     }
+
     // Paper end
     // Paper start
     @Override
@@ -168,6 +154,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         }
         return (org.bukkit.entity.FishHook) getHandle().fishing.getBukkitEntity();
     }
+
     // Paper end
     @Override
     public boolean sleep(Location location, boolean force) {
@@ -361,10 +348,13 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
 
         //String title = container.getBukkitView().getTitle(); // Paper - comment
         net.kyori.adventure.text.Component adventure$title = container.getBukkitView().title(); // Paper
-        if (adventure$title == null) adventure$title = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(container.getBukkitView().getTitle()); // Paper
+        if (adventure$title == null)
+            adventure$title = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                    .deserialize(container.getBukkitView().getTitle()); // Paper
 
         //player.connection.send(new ClientboundOpenScreenPacket(container.containerId, windowType, CraftChatMessage.fromString(title)[0])); // Paper - comment
-        if (!player.isImmobile()) player.connection.send(new ClientboundOpenScreenPacket(container.containerId, windowType, io.papermc.paper.adventure.PaperAdventure.asVanilla(adventure$title))); // Paper
+        if (!player.isImmobile())
+            player.connection.send(new ClientboundOpenScreenPacket(container.containerId, windowType, io.papermc.paper.adventure.PaperAdventure.asVanilla(adventure$title))); // Paper
         player.containerMenu = container;
         player.initMenu(container);
     }
@@ -380,7 +370,9 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
                 return null;
             }
         }
-        this.getHandle().openMenu(((CraftingTableBlock) Blocks.CRAFTING_TABLE).getMenuProvider(null, this.getHandle().level(), CraftLocation.toBlockPosition(location)));
+        this.getHandle()
+                .openMenu(((CraftingTableBlock) Blocks.CRAFTING_TABLE).getMenuProvider(null, this.getHandle()
+                        .level(), CraftLocation.toBlockPosition(location)));
         if (force) {
             this.getHandle().containerMenu.checkReachable = false;
         }
@@ -402,13 +394,15 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         // If there isn't an enchant table we can force create one, won't be very useful though.
         BlockPos pos = CraftLocation.toBlockPosition(location);
         // Paper start
-        MenuProvider menuProvider = ((EnchantmentTableBlock) Blocks.ENCHANTING_TABLE).getMenuProvider(null, this.getHandle().level(), pos);
+        MenuProvider menuProvider = ((EnchantmentTableBlock) Blocks.ENCHANTING_TABLE).getMenuProvider(null, this.getHandle()
+                .level(), pos);
         if (menuProvider == null) {
             if (!force) {
                 return null;
             }
             menuProvider = new net.minecraft.world.SimpleMenuProvider((syncId, inventory, player) -> {
-                return new net.minecraft.world.inventory.EnchantmentMenu(syncId, inventory, net.minecraft.world.inventory.ContainerLevelAccess.create(this.getHandle().level(), pos));
+                return new net.minecraft.world.inventory.EnchantmentMenu(syncId, inventory, net.minecraft.world.inventory.ContainerLevelAccess.create(this.getHandle()
+                        .level(), pos));
             }, Component.translatable("container.enchant"));
         }
         this.getHandle().openMenu(menuProvider);
@@ -447,9 +441,12 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
 
         //String title = inventory.getTitle(); // Paper - comment
         net.kyori.adventure.text.Component adventure$title = inventory.title(); // Paper
-        if (adventure$title == null) adventure$title = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(inventory.getTitle()); // Paper
+        if (adventure$title == null)
+            adventure$title = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()
+                    .deserialize(inventory.getTitle()); // Paper
         //player.connection.send(new ClientboundOpenScreenPacket(container.containerId, windowType, CraftChatMessage.fromString(title)[0])); // Paper - comment
-        if (!player.isImmobile()) player.connection.send(new ClientboundOpenScreenPacket(container.containerId, windowType, io.papermc.paper.adventure.PaperAdventure.asVanilla(adventure$title))); // Paper
+        if (!player.isImmobile())
+            player.connection.send(new ClientboundOpenScreenPacket(container.containerId, windowType, io.papermc.paper.adventure.PaperAdventure.asVanilla(adventure$title))); // Paper
         player.containerMenu = container;
         player.initMenu(container);
     }
@@ -552,7 +549,9 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         } else {
             throw new IllegalArgumentException("Unsupported inventory type: " + material);
         }
-        this.getHandle().openMenu(block.getMenuProvider(null, this.getHandle().level(), new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ())));
+        this.getHandle()
+                .openMenu(block.getMenuProvider(null, this.getHandle()
+                        .level(), new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ())));
         this.getHandle().containerMenu.checkReachable = !force;
         return this.getHandle().containerMenu.getBukkitView();
     }
@@ -563,6 +562,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         // Paper start
         this.getHandle().closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.PLUGIN);
     }
+
     @Override
     public void closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
         getHandle().closeContainer(reason);
@@ -623,7 +623,8 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
 
-        ItemCooldowns.CooldownInstance cooldown = this.getHandle().getCooldowns().cooldowns.get(CraftMagicNumbers.getItem(material));
+        ItemCooldowns.CooldownInstance cooldown = this.getHandle()
+                .getCooldowns().cooldowns.get(CraftMagicNumbers.getItem(material));
         return (cooldown == null) ? 0 : Math.max(0, cooldown.endTime - this.getHandle().getCooldowns().tickCount);
     }
 
@@ -711,7 +712,8 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     @Override
     public org.bukkit.entity.Entity getShoulderEntityLeft() {
         if (!this.getHandle().getShoulderEntityLeft().isEmpty()) {
-            Optional<Entity> shoulder = EntityType.create(this.getHandle().getShoulderEntityLeft(), this.getHandle().level());
+            Optional<Entity> shoulder = EntityType.create(this.getHandle().getShoulderEntityLeft(), this.getHandle()
+                    .level());
 
             return (!shoulder.isPresent()) ? null : shoulder.get().getBukkitEntity();
         }
@@ -730,7 +732,8 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     @Override
     public org.bukkit.entity.Entity getShoulderEntityRight() {
         if (!this.getHandle().getShoulderEntityRight().isEmpty()) {
-            Optional<Entity> shoulder = EntityType.create(this.getHandle().getShoulderEntityRight(), this.getHandle().level());
+            Optional<Entity> shoulder = EntityType.create(this.getHandle().getShoulderEntityRight(), this.getHandle()
+                    .level());
 
             return (!shoulder.isPresent()) ? null : shoulder.get().getBukkitEntity();
         }
@@ -751,6 +754,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     public void openSign(final org.bukkit.block.Sign sign, final org.bukkit.block.sign.Side side) {
         org.bukkit.craftbukkit.block.CraftSign.openSign(sign, (CraftPlayer) this, side);
     }
+
     // Paper end
     @Override
     public boolean dropItem(boolean dropAll) {
@@ -844,7 +848,8 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         Preconditions.checkArgument(fireworkItemStack != null, "fireworkItemStack must not be null");
         Preconditions.checkArgument(fireworkItemStack.getType() == Material.FIREWORK_ROCKET, "fireworkItemStack must be of type %s", Material.FIREWORK_ROCKET);
 
-        FireworkRocketEntity fireworks = new FireworkRocketEntity(this.getHandle().level(), CraftItemStack.asNMSCopy(fireworkItemStack), this.getHandle());
+        FireworkRocketEntity fireworks = new FireworkRocketEntity(this.getHandle()
+                .level(), CraftItemStack.asNMSCopy(fireworkItemStack), this.getHandle());
         boolean success = this.getHandle().level().addFreshEntity(fireworks, SpawnReason.CUSTOM);
         return success ? (Firework) fireworks.getBukkitEntity() : null;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 6baa25e2854d41b1ebfad62adffd78c326ace614..507c233374dedbafc23c787fc66e2ff3b67f5649 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -10,6 +10,8 @@ import io.netty.buffer.Unpooled;
 import io.netty.channel.Channel;
 import it.unimi.dsi.fastutil.shorts.ShortArraySet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
+import net.kissenpvp.core.api.ban.Ban;
+import net.kissenpvp.core.api.networking.client.entitiy.ServerEntity;
 import net.kissenpvp.core.api.user.User;
 import net.kissenpvp.core.api.user.UserImplementation;
 import net.kissenpvp.core.base.KissenCore;
@@ -93,6 +95,7 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.map.MapCursor;
 import org.bukkit.map.MapView;
 import org.bukkit.metadata.MetadataValue;
+import org.bukkit.permissions.PermissibleBase;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.scoreboard.Scoreboard;
@@ -112,7 +115,7 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
-public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaperOnlinePlayerClient {
+public class CraftPlayer extends CraftHumanEntity implements Player, /* KissenPaper */ KissenPaperOnlinePlayerClient {
     private long firstPlayed = 0;
     private long lastPlayed = 0;
     private boolean hasPlayedBefore = false;
@@ -942,6 +945,18 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         this.sendBlockChanges(blocks);
     }
 
+    // KissenPaper start
+    @Override
+    public @org.jetbrains.annotations.Nullable String getCurrentServer() {
+        return KissenPaperOnlinePlayerClient.super.getCurrentServer();
+    }
+
+    @Override
+    public int warn(@NotNull Ban ban, @NotNull ServerEntity warnOperator) {
+        return KissenPaperOnlinePlayerClient.super.warn(ban, warnOperator);
+    }
+    // KissenPaper end
+
     private record ChunkSectionChanges(ShortSet positions,
                                        List<net.minecraft.world.level.block.state.BlockState> blockData) {
 
@@ -2360,7 +2375,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         // KissenPaper start
         try {
             ((KissenPaperPermissible) getPermissible()).unsubscribe();
-        } catch (PermissibleOverriddenException ignored) {}
+        } catch (PermissibleOverriddenException ignored) {
+            if (perm instanceof PermissibleBase permissibleBase) {
+                permissibleBase.clearPermissions();
+            }
+        }
         KissenCore.getInstance().getImplementation(KissenUserImplementation.class).logoutUser(getUser());
         // KissenPaper end
     }
@@ -2825,7 +2844,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component displayName() {
+    public net.kyori.adventure.text.@NotNull Component displayName() {
         return this.getHandle().adventure$displayName;
     }
 
@@ -3248,7 +3267,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
         if (perm instanceof PaperPermissible permissible) {
             return permissible;
         }
-        System.out.println(perm.getClass().getName());
         throw new PermissibleOverriddenException();
     }
 
@@ -3259,6 +3277,5 @@ public class CraftPlayer extends CraftHumanEntity implements Player, KissenPaper
                 .getOnlineUser(getUniqueId())
                 .orElseThrow(IllegalStateException::new);
     }
-
     // KissenPaper end
 }
