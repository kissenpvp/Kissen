From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Wed, 20 Sep 2023 20:35:37 +0200
Subject: [PATCH] Added methods to integrate with plugin enabling

New methods were added to handle different plugin states(load, enable, disable) and facilitate the translation registration process. This is part of the integration and broadening functionalities of the Kissen Plugin.
The Plugin API now extends KissenPlugin enabling further access to plugin methods. This change allows plugins to be handled in a more nuanced way, improving the overall plugin management system.

diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index 9c7552968b8c017c71a7a77557a66a03ed89f125..3d8f817ab0b3c2c73dee04b1c869ccb1f14d6f37 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -145,7 +145,17 @@ class PaperPluginInstanceManager {
     public void disablePlugins() {
         Plugin[] plugins = this.getPlugins();
         for (int i = plugins.length - 1; i >= 0; i--) {
+
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().load(net.kissenpvp.core.base.PluginState.PRE, plugins[i]);
+            // KissenPaper end
+
             this.disablePlugin(plugins[i]);
+
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().load(net.kissenpvp.core.base.PluginState.POST, plugins[i]);
+            // KissenPaper end
+
         }
     }
 
diff --git a/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java b/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
index cb9b13522a976b82bcb71cef486f11f4172e3e99..3cfa454ab3109efa6bb946fe446b01ba8385dc45 100644
--- a/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
+++ b/src/main/java/io/papermc/paper/plugin/storage/ServerPluginProviderStorage.java
@@ -35,6 +35,9 @@ public class ServerPluginProviderStorage extends ConfiguredProviderStorage<JavaP
 
             @Override
             public boolean load(PluginProvider<JavaPlugin> provider, JavaPlugin provided) {
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().load(net.kissenpvp.core.base.PluginState.PRE, provided);
+                // KissenPaper end
                 // Add it to the map here, we have to run the actual loading logic later.
                 PaperPluginManagerImpl.getInstance().loadPlugin(provided);
                 return true;
@@ -57,6 +60,10 @@ public class ServerPluginProviderStorage extends ConfiguredProviderStorage<JavaP
         try {
             provided.getLogger().info(String.format("Loading server plugin %s", provided.getPluginMeta().getDisplayName()));
             provided.onLoad();
+
+            // KissenPaper start
+            net.kissenpvp.core.base.KissenCore.getInstance().enable(net.kissenpvp.core.base.PluginState.POST, provided);
+            // KissenPaper end
         } catch (Throwable ex) {
             // Don't mark that provider as ERRORED, as this apparently still needs to run the onEnable logic.
             provided.getSLF4JLogger().error("Error initializing plugin '%s' in folder '%s' (Is it up to date?)".formatted(provider.getFileName(), provider.getParentSource()), ex);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 249d76acac9a91cd46f0b8a477511974a75d6f4a..2528c7791a40f684ee90b441f273d71888e6baa6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -548,7 +548,15 @@ public final class CraftServer implements Server {
 
         for (Plugin plugin : plugins) {
             if ((!plugin.isEnabled()) && (plugin.getDescription().getLoad() == type)) {
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().enable(net.kissenpvp.core.base.PluginState.PRE, plugin);
+                // KissenPaper end
+
                 this.enablePlugin(plugin);
+
+                // KissenPaper start
+                net.kissenpvp.core.base.KissenCore.getInstance().enable(net.kissenpvp.core.base.PluginState.PRE, plugin);
+                // KissenPaper end
             }
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index d96399e9bf1a58db5a4a22e58abb99e7660e0694..8a9614959e399ff8b43a8819f62f351b6bec78e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -143,4 +143,26 @@ public class MinecraftInternalPlugin extends PluginBase {
     public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
         throw new UnsupportedOperationException("Not supported.");
     }
+
+    // KissenPaper start
+    @Override
+    public @org.jetbrains.annotations.NotNull String getFullName() {
+        return getName();
+    }
+
+    @Override
+    public @org.jetbrains.annotations.NotNull String getPackage() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public net.kissenpvp.core.api.base.@org.jetbrains.annotations.NotNull Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+
+    @Override
+    public void registerTranslation(@org.jetbrains.annotations.NotNull String key, java.text.@org.jetbrains.annotations.NotNull MessageFormat defaultMessage) {
+        getKissen().getImplementation(net.kissenpvp.core.message.localization.KissenLocalizationImplementation.class).register(key, defaultMessage);
+    }
+    // KissenPaper end
 }
diff --git a/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java b/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
index 1d14f530ef888102e47eeeaf0d1a6076e51871c4..b83c491de7f79f29716686805b6f10341667b89b 100644
--- a/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
+++ b/src/test/java/io/papermc/paper/plugin/PaperTestPlugin.java
@@ -143,4 +143,26 @@ public class PaperTestPlugin extends PluginBase {
     public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
         throw new UnsupportedOperationException("Not supported.");
     }
+
+    // KissenPaper start
+    @Override
+    public @org.jetbrains.annotations.NotNull String getFullName() {
+        return getName();
+    }
+
+    @Override
+    public @org.jetbrains.annotations.NotNull String getPackage() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public net.kissenpvp.core.api.base.@org.jetbrains.annotations.NotNull Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+
+    @Override
+    public void registerTranslation(@org.jetbrains.annotations.NotNull String key, java.text.@org.jetbrains.annotations.NotNull MessageFormat defaultMessage) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+    // KissenPaper end
 }
