From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivo <chniucg@gmail.com>
Date: Sun, 24 Sep 2023 13:28:51 +0200
Subject: [PATCH] Integrated localization from kissen into paper


diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
index f97d54d30e952c6d501f28ce48fd899190709884..7a1110f4c2491fb87575fbcf92380a0e15ef17a6 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -249,5 +249,10 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
     public void registerPlayerSetting(@NotNull net.kissenpvp.core.api.user.usersetttings.PlayerSetting<?> playerSetting, @NotNull Plugin plugin) {
         org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.core.api.user.UserImplementation.class).registerPlayerSetting(plugin, playerSetting);
     }
+
+    @Override
+    public void registerTranslation(@NotNull String key, @NotNull java.text.MessageFormat defaultMessage, @NotNull Plugin plugin) {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.core.api.message.localization.LocalizationImplementation.class).register(plugin, key, defaultMessage);
+    }
     // KissenPaper start
 }
diff --git a/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
index e3e4fd170caaf4726c44f303ced029df4427c739..0ebb88c89869fe0f11050c3be4c33ce3a0660145 100644
--- a/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
+++ b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
@@ -21,6 +21,7 @@ package net.kissenpvp.paper.base;
 import net.kissenpvp.core.api.base.Implementation;
 import net.kissenpvp.core.api.base.plugin.KissenPlugin;
 import net.kissenpvp.core.api.database.meta.ObjectMeta;
+import net.kissenpvp.core.api.message.localization.LocalizationImplementation;
 import net.kissenpvp.core.api.networking.client.entitiy.ConsoleClient;
 import net.kissenpvp.core.api.user.UserImplementation;
 import net.kissenpvp.core.api.user.rank.RankImplementation;
@@ -30,6 +31,7 @@ import net.kissenpvp.paper.api.base.PaperKissen;
 import net.kissenpvp.paper.event.KissenEventImplementation;
 import net.kissenpvp.core.permission.PermissionImplementation;
 import net.kissenpvp.paper.api.permission.PaperPermissionImplementation;
+import net.kissenpvp.paper.message.localization.KissenPaperLocalizationImplementation;
 import net.kissenpvp.paper.permission.KissenPaperPermissionImplementation;
 import net.kissenpvp.paper.user.KissenPaperUserImplementation;
 import net.kissenpvp.paper.user.rank.KissenPaperRankImplementation;
@@ -63,6 +65,7 @@ public class KissenPaperCore extends KissenCore implements PaperKissen {
         KissenPaperPermissionImplementation permissionImplementation = new KissenPaperPermissionImplementation();
         loader.put(PermissionImplementation.class, permissionImplementation);
         loader.put(PaperPermissionImplementation.class, permissionImplementation);
+        loader.put(LocalizationImplementation.class, new KissenPaperLocalizationImplementation());
         super.loadImplementations(loader);
     }
 
diff --git a/src/main/java/net/kissenpvp/paper/message/localization/KissenPaperLocalizationImplementation.java b/src/main/java/net/kissenpvp/paper/message/localization/KissenPaperLocalizationImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..e085d4c120a323b555970b7643b7280a95f2cc71
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/message/localization/KissenPaperLocalizationImplementation.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.message.localization;
+
+import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+
+import java.text.MessageFormat;
+
+public class KissenPaperLocalizationImplementation extends KissenLocalizationImplementation {
+
+    @Override
+    public boolean postStart() {
+
+        //I love disconnect messages
+        register("server.disconnect.server-shutdown", getTranslation("multiplayer.disconnect.server_shutdown"));
+        register("server.disconnect.not-whitelisted", getTranslation("multiplayer.disconnect.not_whitelisted"));
+        register("server.disconnect.server-full", getTranslation("multiplayer.disconnect.server_full"));
+        register("server.disconnect.outdated-client", getTranslation("multiplayer.disconnect.outdated_client"));
+        register("server.disconnect.outdated-server", getTranslation("multiplayer.disconnect.outdated_server"));
+        register("server.disconnect.server-restart", getTranslation("multiplayer.disconnect.server_shutdown"));
+
+        register("paper.kick.connection-throttle", new MessageFormat("Connection throttled! Please wait before reconnecting."));
+        register("paper.unauthorized", new MessageFormat("You do not have the permission to perform this command."));
+
+        return super.postStart();
+    }
+
+    /**
+     * Retrieves a translated message format based on the provided language key.
+     *
+     * @param languageKey the string representing the language key for the translation
+     * @return the translated message format
+     */
+    @Contract("_ -> new")
+    private @NotNull MessageFormat getTranslation(String languageKey) {
+        return new MessageFormat(MiniMessage.miniMessage().serialize(Component.translatable(languageKey)));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index bdba9fa1b597bfb4bbef1accdfa605b3af8d2b43..b3a23ba22fa741194f08f4c006e44057402d335b 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -2153,6 +2153,7 @@ public class ServerPlayer extends Player {
             PlayerLocaleChangeEvent event = new PlayerLocaleChangeEvent(this.getBukkitEntity(), clientOptions.language());
             this.server.server.getPluginManager().callEvent(event);
             this.server.server.getPluginManager().callEvent(new com.destroystokyo.paper.event.player.PlayerLocaleChangeEvent(this.getBukkitEntity(), this.language, clientOptions.language())); // Paper
+            updateLocale(clientOptions.language()); // KissenPaper
         }
         // CraftBukkit end
         // Paper start - don't call options events on login
@@ -2762,4 +2763,12 @@ public class ServerPlayer extends Player {
         return (CraftPlayer) super.getBukkitEntity();
     }
     // CraftBukkit end
+
+    // KissenPaper start
+    public void updateLocale(@org.jetbrains.annotations.NotNull String locale)
+    {
+        getBukkitEntity().getUser().set("locale", locale);
+    }
+    // KissenPaper end
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index f46319cb67968fdad8b8c64fa1b5ac3f4683d8f8..d3676e6d7c94401f48f5cb776f0904b6b0e59944 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -3256,7 +3256,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void openBook(final net.kyori.adventure.inventory.Book book) {
-        final java.util.Locale locale = this.getHandle().adventure$locale;
+        final java.util.Locale locale = getCurrentLocale(); //this.getHandle().adventure$locale; // KissenPaper
         final net.minecraft.world.item.ItemStack item = io.papermc.paper.adventure.PaperAdventure.asItemStack(book, locale);
         final ServerPlayer player = this.getHandle();
         final ServerGamePacketListenerImpl connection = player.connection;
