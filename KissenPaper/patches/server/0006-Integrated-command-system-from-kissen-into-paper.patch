From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Sun, 24 Sep 2023 13:30:00 +0200
Subject: [PATCH] Integrated command system from kissen into paper


diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
index 7a1110f4c2491fb87575fbcf92380a0e15ef17a6..bc65a18d043d7d67e51ccfa9c0861d1231203ddd 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -254,5 +254,20 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
     public void registerTranslation(@NotNull String key, @NotNull java.text.MessageFormat defaultMessage, @NotNull Plugin plugin) {
         org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.core.api.message.localization.LocalizationImplementation.class).register(plugin, key, defaultMessage);
     }
+
+    @Override
+    public void registerCommand(@NotNull Plugin plugin, @NotNull Object... objects) {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.paper.api.command.PaperCommandImplementation.class).getPluginHandler(plugin).ifPresent(handler -> handler.registerCommand(objects));
+    }
+
+    @Override
+    public void registerExceptionHandler(@NotNull net.kissenpvp.core.api.base.ExceptionHandler<?> exceptionHandler, @NotNull Plugin plugin) {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.paper.api.command.PaperCommandImplementation.class).getPluginHandler(plugin).ifPresent(handler -> handler.registerExceptionHandler(exceptionHandler));
+    }
+
+    @Override
+    public <T> void registerParser(@NotNull Class<T> type, @NotNull net.kissenpvp.paper.api.command.PaperArgumentParser<T> parser, @NotNull Plugin plugin) {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.paper.api.command.PaperCommandImplementation.class).getPluginHandler(plugin).ifPresent(handler -> handler.registerParser(type, parser));
+    }
     // KissenPaper start
 }
diff --git a/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
index 0ebb88c89869fe0f11050c3be4c33ce3a0660145..392e6fc5db4bc634c665718b48a884455a819248 100644
--- a/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
+++ b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
@@ -27,10 +27,14 @@ import net.kissenpvp.core.api.user.UserImplementation;
 import net.kissenpvp.core.api.user.rank.RankImplementation;
 import net.kissenpvp.core.base.KissenCore;
 import net.kissenpvp.core.event.EventImplementation;
+import net.kissenpvp.core.command.confirmation.KissenConfirmationImplementation;
+import net.kissenpvp.core.permission.PermissionImplementation;
 import net.kissenpvp.paper.api.base.PaperKissen;
 import net.kissenpvp.paper.event.KissenEventImplementation;
-import net.kissenpvp.core.permission.PermissionImplementation;
 import net.kissenpvp.paper.api.permission.PaperPermissionImplementation;
+import net.kissenpvp.paper.api.command.PaperCommandImplementation;
+import net.kissenpvp.paper.command.KissenPaperCommandImplementation;
+import net.kissenpvp.paper.command.confirmation.KissenPaperConfirmationImplementation;
 import net.kissenpvp.paper.message.localization.KissenPaperLocalizationImplementation;
 import net.kissenpvp.paper.permission.KissenPaperPermissionImplementation;
 import net.kissenpvp.paper.user.KissenPaperUserImplementation;
@@ -66,6 +70,8 @@ public class KissenPaperCore extends KissenCore implements PaperKissen {
         loader.put(PermissionImplementation.class, permissionImplementation);
         loader.put(PaperPermissionImplementation.class, permissionImplementation);
         loader.put(LocalizationImplementation.class, new KissenPaperLocalizationImplementation());
+        loader.put(PaperCommandImplementation.class, new KissenPaperCommandImplementation());
+        loader.put(KissenConfirmationImplementation.class, new KissenPaperConfirmationImplementation());
         super.loadImplementations(loader);
     }
 
diff --git a/src/main/java/net/kissenpvp/paper/command/KissenPaperCommandImplementation.java b/src/main/java/net/kissenpvp/paper/command/KissenPaperCommandImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..912fcb3baa6abf5fe787e9440dd07cfce921bed4
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/KissenPaperCommandImplementation.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.command;
+
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
+import net.kissenpvp.core.api.command.CommandHandler;
+import net.kissenpvp.core.command.CommandImplementation;
+import net.kissenpvp.core.command.TargetValidator;
+import net.kissenpvp.core.command.argument.MethodEvaluator;
+import net.kissenpvp.core.command.handler.InternalCommandHandler;
+import net.kissenpvp.core.command.handler.PluginCommandHandler;
+import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
+import net.kissenpvp.paper.api.command.KissenCommand;
+import net.kissenpvp.paper.command.handler.CompletionExceptionHandler;
+import net.kissenpvp.paper.command.handler.PlayerExceptionHandler;
+import net.kissenpvp.paper.command.handler.ProfileNotFoundExceptionHandler;
+import net.kissenpvp.paper.command.parser.OfflinePlayerParser;
+import net.kissenpvp.paper.command.parser.PlayerParser;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+import java.text.MessageFormat;
+import java.util.Optional;
+
+/**
+ * Represents a Kissen Paper command implementation that extends the functionality of the Kissen command framework
+ * and is compatible with the Paper server platform.
+ * <p>
+ * This class extends {@link CommandImplementation} and implements the {@link net.kissenpvp.paper.api.command.PaperCommandImplementation} interface
+ * to provide specialized command handling and execution functionality tailored for the Paper server platform.
+ * It integrates seamlessly with the Kissen command framework and enhances it with Paper-specific features.
+ */
+public class KissenPaperCommandImplementation extends CommandImplementation<CommandSender> implements net.kissenpvp.paper.api.command.PaperCommandImplementation
+{
+
+
+    /**
+     * Constructs a new instance of {@link KissenPaperCommandImplementation}.
+     * <p>
+     * This constructor initializes the {@link MethodEvaluator} and {@link TargetValidator} instances used by this
+     * Kissen Paper command implementation for evaluating command methods and validating command execution targets.
+     */
+    public KissenPaperCommandImplementation()
+    {
+        super();
+
+        // Advanced
+        getInternalHandler().registerParser(Player.class, new PlayerParser());
+        getInternalHandler().registerParser(OfflinePlayer.class, new OfflinePlayerParser());
+
+        //Exception handler
+        getInternalHandler().registerExceptionHandler(new PlayerExceptionHandler());
+        getInternalHandler().registerExceptionHandler(new CompletionExceptionHandler());
+        getInternalHandler().registerExceptionHandler(new ProfileNotFoundExceptionHandler());
+    }
+
+    @Override
+    public boolean start()
+    {
+        KissenLocalizationImplementation kissenLocalizationImplementation = Bukkit.getKissen().getImplementation(
+                KissenLocalizationImplementation.class);
+        kissenLocalizationImplementation.register("server.command.mojang.profile.invalid",
+                new MessageFormat("Mojangs repository does not contain the specified profile."));
+        kissenLocalizationImplementation.register("server.command.player.offline",
+                new MessageFormat("The player {0} seems to be offline."));
+        kissenLocalizationImplementation.register("server.command.failed",
+                new MessageFormat(MiniMessage.miniMessage().serialize(Component.translatable("commands.help.failed"))));
+
+        kissenLocalizationImplementation.register("server.command.general.header",
+                new MessageFormat("===== [ {0} ] ====="));
+        kissenLocalizationImplementation.register("server.command.general.header.paged",
+                new MessageFormat("===== [ {0} ({1}/{2}) ] ====="));
+        kissenLocalizationImplementation.register("server.command.general.footer",
+                new MessageFormat("===== [ {0} ] ====="));
+        kissenLocalizationImplementation.register("server.command.general.footer.paged",
+                new MessageFormat("===== [ {0} ({1}/{2}) ] ====="));
+
+        kissenLocalizationImplementation.register("server.command.general.key.value", new MessageFormat("{0}: {1}"));
+
+        return super.start();
+    }
+
+    @Override
+    protected InternalCommandHandler<CommandSender, ?> constructInternalHandler()
+    {
+        return new KissenPaperInternalCommandHandler();
+    }
+
+    @Override
+    protected @NotNull PluginCommandHandler<CommandSender, ?> constructHandler(@NotNull KissenPlugin kissenPlugin)
+    {
+        return new KissenPaperPluginHandler(kissenPlugin);
+    }
+
+    @Override
+    public @NotNull Optional<CommandHandler<CommandSender, KissenCommand>> getPluginHandler(@NotNull KissenPlugin kissenPlugin)
+    {
+        return getHandler().stream().filter(handler -> handler.getPlugin().equals(kissenPlugin)).map(handler -> (CommandHandler<CommandSender, KissenCommand>) handler).findFirst();
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/KissenPaperInternalCommandHandler.java b/src/main/java/net/kissenpvp/paper/command/KissenPaperInternalCommandHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..466f4168cf90923e692ad0dc4a062e4d2f8825f9
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/KissenPaperInternalCommandHandler.java
@@ -0,0 +1,39 @@
+package net.kissenpvp.paper.command;
+
+import net.kissenpvp.core.command.handler.InternalCommandHandler;
+import net.kissenpvp.paper.command.command.system.KissenPaperCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftServer;
+import org.jetbrains.annotations.NotNull;
+
+public class KissenPaperInternalCommandHandler extends InternalCommandHandler<CommandSender, KissenPaperCommand>
+{
+    @Override
+    protected void registerCommand(@NotNull KissenPaperCommand command)
+    {
+        if(Bukkit.getCommandMap().register("kissenpaper", command))
+        {
+            ((CraftServer) Bukkit.getServer()).syncCommands();
+        }
+    }
+
+    @Override
+    protected @NotNull KissenPaperCommand buildCommand(@NotNull String name)
+    {
+        String rootName = name.split("\\.")[0];
+        KissenPaperCommand command = getCommand(rootName).orElseGet(() ->
+        {
+            KissenPaperCommand kissenCommand = new KissenPaperCommand(rootName, 0, this);
+            getCommands().add(kissenCommand);
+            return kissenCommand;
+        });
+
+        if (!name.equals(rootName))
+        {
+            command = (KissenPaperCommand) command.createRecursive(name);
+            getCommands().add(command);
+        }
+        return command;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/KissenPaperPluginHandler.java b/src/main/java/net/kissenpvp/paper/command/KissenPaperPluginHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..4f9635caaa321bbc3dcbd0903a2859a6dd990056
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/KissenPaperPluginHandler.java
@@ -0,0 +1,48 @@
+package net.kissenpvp.paper.command;
+
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
+import net.kissenpvp.core.command.handler.PluginCommandHandler;
+import net.kissenpvp.paper.command.command.plugin.KissenPaperPluginCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Objects;
+
+public class KissenPaperPluginHandler extends PluginCommandHandler<CommandSender, KissenPaperPluginCommand>
+{
+    public KissenPaperPluginHandler(@NotNull KissenPlugin plugin)
+    {
+        super(plugin);
+    }
+
+    @Override
+    protected void registerCommand(@NotNull KissenPaperPluginCommand command)
+    {
+        if(Bukkit.getCommandMap().register(getPlugin().getName(), command))
+        {
+            ((CraftServer) Bukkit.getServer()).syncCommands();
+        }
+    }
+
+    @Override
+    protected @NotNull KissenPaperPluginCommand buildCommand(@NotNull String name)
+    {
+        String rootName = name.split("\\.")[0];
+        KissenPaperPluginCommand command = getCommand(rootName).orElseGet(() ->
+        {
+            KissenPaperPluginCommand kissenCommand = new KissenPaperPluginCommand((Plugin) getPlugin(), rootName, 0, this);
+            getCommands().add(kissenCommand);
+            return kissenCommand;
+        });
+
+        if (!Objects.equals(name, rootName))
+        {
+            command = (KissenPaperPluginCommand) command.createRecursive(name);
+            getCommands().add(command);
+        }
+        return command;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/command/KissenPaperAbstractCommand.java b/src/main/java/net/kissenpvp/paper/command/command/KissenPaperAbstractCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..ba21bb4517d7568fe114b5ee3fc2cd65635ecddf
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/command/KissenPaperAbstractCommand.java
@@ -0,0 +1,467 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.command.command;
+
+import net.kissenpvp.core.api.command.CommandHandler;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.command.CommandTarget;
+import net.kissenpvp.core.api.command.annotations.CommandData;
+import net.kissenpvp.core.api.command.executor.CommandExecutor;
+import net.kissenpvp.core.api.command.executor.TabCompleterExecutor;
+import net.kissenpvp.core.command.CommandHolder;
+import net.kissenpvp.core.command.CommandInfo;
+import net.kissenpvp.core.command.KissenCommandPayload;
+import net.kissenpvp.core.command.TargetValidator;
+import net.kissenpvp.core.command.argument.Argument;
+import net.kissenpvp.core.command.executor.KissenCommandExecutor;
+import net.kissenpvp.paper.api.command.KissenCommand;
+import net.kissenpvp.paper.command.KissenPaperCommandImplementation;
+import net.kissenpvp.paper.command.command.system.KissenPaperChildCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandException;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.*;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+/**
+ * Represents a command implementation specific to the Kissen Paper framework.
+ * <p>
+ * This class extends the {@link KissenCommand} class and serves as a command implementation tailored for the Kissen Paper framework.
+ * It provides functionality for creating and managing sub-commands within the Kissen Paper command hierarchy.
+ */
+public abstract class KissenPaperAbstractCommand<C extends KissenPaperAbstractCommand<C>> extends KissenCommand implements CommandHolder<CommandSender, C>
+{
+    private final int position;
+    private final List<C> children; //C can be plugin child or system child
+    private CommandInfo commandInfo;
+    private CommandExecutor<CommandSender> commandExecutor;
+    private TabCompleterExecutor<CommandSender> tabExecutor;
+    private final CommandHandler<CommandSender, ?> handler;
+
+    /**
+     * Constructs a new {@link KissenPaperAbstractCommand} instance with the provided plugin, name, and position.
+     * <p>
+     * This constructor is used to create a new {@link KissenPaperAbstractCommand} instance with the specified plugin, command name, and position in the command hierarchy.
+     *
+     * @param name     The name of the command. Must not be null.
+     * @param position The position of the command in the command hierarchy.
+     * @throws NullPointerException If either the {@code plugin} or {@code name} parameter is null.
+     */
+    public KissenPaperAbstractCommand(@NotNull String name, int position, @NotNull CommandHandler<CommandSender, ?> handler)
+    {
+        super(name);
+        this.position = position;
+        this.children = new ArrayList<>();
+        this.handler = handler;
+    }
+
+    public @NotNull CommandHandler<CommandSender, ?> getHandler()
+    {
+        return handler;
+    }
+
+    @Override
+    public int getPosition()
+    {
+        return position;
+    }
+
+    @Override
+    public @NotNull CommandExecutor<CommandSender> getExecutor()
+    {
+        return (CommandExecutor<CommandSender>) Objects.requireNonNullElseGet(commandExecutor, () ->
+        {
+            Optional<CommandHolder<?, ?>> parent = getParent();
+            return parent.map(CommandHolder::getExecutor).orElseThrow();
+        });
+    }
+
+    @Override
+    public @NotNull @Unmodifiable List<C> getChildCommandList()
+    {
+        return Collections.unmodifiableList(children);
+    }
+
+    @Override
+    public @NotNull Optional<C> getChildCommand(@NotNull String name)
+    {
+        return getChildCommandList().stream().filter(
+                child -> child.equals(name) || child.getAliases().contains(name)).findFirst();
+    }
+
+    @Override
+    public @NotNull Optional<CommandInfo> getCommandInfo()
+    {
+        return Optional.ofNullable(commandInfo);
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args)
+    {
+        if (!validate(sender))
+        {
+            return false;
+        }
+
+        if (args.length > 0)
+        {
+            Boolean data = getChildCommand(args[0]).map(
+                    command -> command.execute(sender, commandLabel, Arrays.copyOfRange(args, 1, args.length))).orElse(
+                    null);
+            if (data != null)
+            {
+                return data;
+            }
+        }
+
+        CommandPayload<CommandSender> payload = getCommandPayload(sender,
+                commandLabel,
+                args,
+                getTargetValidator().parseSender(sender));
+
+        if (commandExecutor == null)
+        {
+            getFormattedUsage(payload);
+            return false;
+        }
+
+        if (commandInfo.isAsync())
+        {
+            runAsync(payload);
+            return true;
+        }
+
+        return commandExecutor.execute(payload);
+    }
+
+    @Override
+    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException
+    {
+        List<String> result = new ArrayList<>();
+
+        if (!validate(sender))
+        {
+            return result;
+        }
+
+        result.addAll(isChildCommand(sender, alias, args).orElseGet(() ->
+        {
+            //TODO add caching
+            CommandTarget target = getTargetValidator().parseSender(sender);
+            CommandPayload<CommandSender> payload = getCommandPayload(sender, alias, args, target);
+            return getTabCompletions(payload);
+        }));
+
+        final String argument = args.length > 0 ? args[args.length - 1] : ""; //namespaces
+        return new ArrayList<>(result).stream().filter(currentSuggestion ->
+        {
+            for (String currentArgument : currentSuggestion.split(":"))
+            {
+                if(currentArgument.toLowerCase().startsWith(argument.toLowerCase()))
+                {
+                    return true;
+                }
+            }
+            return false;
+        }).toList();
+    }
+
+
+    @Override
+    public @NotNull String getFullName()
+    {
+        return getCommandInfo().map(CommandInfo::getName).orElse(getName());
+    }
+
+    @Override
+    public @NotNull String getUsage()
+    {
+        String usage = super.getUsage();
+        if (!usage.isBlank())
+        {
+            return usage;
+        }
+
+        if (getExecutor() instanceof KissenCommandExecutor<CommandSender> executor)
+        {
+            return String.join(";", getUsages(executor).stream().sorted(CharSequence::compare).toArray(String[]::new));
+        }
+
+        return super.getUsage();
+    }
+
+    /**
+     * Initializes the {@link KissenPaperAbstractCommand} with the provided command information and executor.
+     * <p>
+     * This method is used to initialize the properties and behavior of the {@link KissenPaperAbstractCommand} based on the given command information and executor.
+     *
+     * @param commandData     The {@link CommandData} containing details about the command. Must not be null.
+     * @param commandExecutor The {@link CommandExecutor} responsible for executing the command logic. Must not be null.
+     * @throws NullPointerException If either the {@code commandInfo} or {@code commandExecutor} parameter is null.
+     */
+    @Override
+    public void initCommand(@NotNull CommandData commandData, @NotNull CommandExecutor<CommandSender> commandExecutor)
+    {
+        if (isRegistered())
+        {
+            throw new IllegalStateException("This command is already registered.");
+        }
+        this.commandInfo = new CommandInfo(commandData);
+        this.commandExecutor = commandExecutor;
+
+        setAliases(Arrays.asList(commandInfo.getAliases()));
+
+        if (commandInfo.isPermissionRequired() && !commandInfo.getPermission().isBlank())
+        {
+            setPermission(commandInfo.getPermission());
+        }
+
+        setUsage(commandInfo.getUsage()); // might be blank, will be processes later
+
+        String description = commandInfo.getDescription();
+        if (!description.isBlank())
+        {
+            setDescription(description);
+        }
+
+        if (commandExecutor instanceof KissenCommandExecutor<CommandSender> executor)
+        {
+            executor.setCommandHolder(this);
+        }
+    }
+
+    /**
+     * Initializes the tab completer for the {@link KissenPaperAbstractCommand} instance.
+     * <p>
+     * This method is used to set the tab completer for the current {@link KissenPaperAbstractCommand} instance.
+     * It allows the registration of a {@link TabCompleterExecutor} to handle tab completion logic for the command.
+     *
+     * @param tabExecutor The {@link TabCompleterExecutor} responsible for tab completion of the command. Must not be null.
+     * @throws IllegalStateException If the tab completer has already been initialized for this command.
+     */
+    public final void initCompleter(@NotNull TabCompleterExecutor<CommandSender> tabExecutor)
+    {
+        if (this.tabExecutor != null)
+        {
+            throw new IllegalStateException("Initialization of Completer already executed.");
+        }
+
+        this.tabExecutor = tabExecutor;
+    }
+
+    /**
+     * Creates a recursive {@link KissenPaperAbstractCommand} hierarchy based on the given sub-command name.
+     * <p>
+     * This method is used to create a recursive hierarchy of {@link KissenPaperAbstractCommand} instances based on a provided sub-command name.
+     * The hierarchy is established by traversing the sub-command name and creating child commands accordingly.
+     * If the sub-command name is already at the current command's position, the method returns the current command itself.
+     *
+     * @param name The sub-command name representing the recursive hierarchy. Must not be null.
+     * @return The final {@link KissenPaperAbstractCommand} instance at the bottom of the recursive hierarchy.
+     * @throws NullPointerException If the provided {@code name} parameter is null.
+     */
+    public @NotNull KissenPaperAbstractCommand<C> createRecursive(@NotNull String name)
+    {
+
+        int position = getPosition() + (name.split("\\.").length - 1);
+        if (position == getPosition())
+        {
+            return this;
+        }
+
+        String subName = name.substring(Math.max(name.indexOf('.') + 1, 0));
+
+        int index = subName.indexOf('.');
+        String nextSubCommand;
+        if (index != -1)
+        {
+            nextSubCommand = subName.substring(0, index);
+        }
+        else
+        {
+            nextSubCommand = subName;
+        }
+
+        if(!isRegistered())
+        {
+            setUsage("");
+        }
+
+        return getChildCommand(nextSubCommand).orElseGet(() ->
+        {
+            C child = createChildCommand(nextSubCommand, KissenPaperAbstractCommand.this);
+            children.add(child);
+            return child;
+        }).createRecursive(subName);
+    }
+
+
+    private @NotNull List<String> getUsages(@NotNull KissenCommandExecutor<CommandSender> executor)
+    {
+        List<String> usages = new ArrayList<>();
+        String prefix = "/" + String.join(" ", getFullName().split("\\.")) + " ";
+
+        String builtUsage = executor.getEvaluator().buildUsage("").strip();
+        if (!builtUsage.isBlank() && commandExecutor != null)
+        {
+            usages.add(prefix + builtUsage);
+        }
+
+        for (C child : children)
+        {
+            KissenCommandExecutor<CommandSender> childExecutor = ((KissenCommandExecutor<CommandSender>) child.getExecutor());
+            usages.addAll(((KissenPaperAbstractCommand<?>) child).getUsages(childExecutor));
+        }
+        return usages;
+    }
+
+    private @NotNull Optional<List<String>> isChildCommand(@NotNull CommandSender commandSender, @NotNull String alias, @NotNull String @NotNull [] arguments)
+    {
+        for (var iterator = new Object()
+        {
+            private int index = 0;
+
+            private int getIndex()
+            {
+                return index;
+            }
+        }; iterator.index < arguments.length; iterator.index++)
+        {
+            Optional<C> commandHolder = getChildCommand(arguments[iterator.getIndex()]);
+            if (commandHolder.isPresent())
+            {
+                return commandHolder.map(child -> child.tabComplete(commandSender, alias,
+                        Arrays.copyOfRange(arguments, iterator.getIndex() + 1, arguments.length)));
+            }
+        }
+        return Optional.empty();
+    }
+
+    private @NotNull List<String> getTabCompletions(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        List<String> suggestions = new ArrayList<>(
+                (tabExecutor != null ? tabExecutor.execute(commandPayload) : getAutoTabCompletion(
+                        commandPayload)).stream().filter(Objects::nonNull).toList());
+        suggestions.sort(String.CASE_INSENSITIVE_ORDER);
+        return suggestions;
+    }
+
+    private @NotNull Set<String> getAutoTabCompletion(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        int index = commandPayload.getArgumentCount();
+        Set<String> data = getChildCommandList().stream().filter(
+                child -> child.getPosition() == index + getPosition()).flatMap(
+                command -> Stream.concat(Stream.of(command.getName()), command.getAliases().stream())).collect(
+                Collectors.toSet());
+
+        if (hasOwnExecutor() && getExecutor() instanceof KissenCommandExecutor<CommandSender> executor)
+        {
+            if (executor.getEvaluator().arguments().size() > index)
+            {
+                Argument<?, CommandSender> argument = executor.getEvaluator().arguments().get(index);
+                if (argument.argumentParser() != null)
+                {
+                    data.addAll(argument.argumentParser().tabCompletion(commandPayload));
+                }
+            }
+        }
+        return data;
+    }
+
+    /**
+     * Creates and registers a new {@link KissenPaperChildCommand} as a child command of this command.
+     * <p>
+     * This method is used to create a new {@link KissenPaperChildCommand} instance with the provided subcommand name and
+     * registers it as a child command of the current command. The newly created child command is added to the list of children
+     * for this command.
+     *
+     * @param nextSubCommand The name of the subcommand to create. Must not be null.
+     * @return The newly created and registered {@link KissenPaperChildCommand} instance.
+     * @throws NullPointerException If the {@code nextSubCommand} parameter is null.
+     */
+    protected abstract @NotNull C createChildCommand(@NotNull String nextSubCommand, @NotNull KissenPaperAbstractCommand<C> parent);
+
+    /**
+     * Validates whether a command can be executed by the given {@link CommandSender}.
+     * <p>
+     * This method is used to validate whether a command can be executed by the provided {@link CommandSender}.
+     * Validation checks may include verifying the plugin's enabled status, the type of command sender, and other conditions.
+     *
+     * @param commandSender The {@link CommandSender} attempting to execute the command. Must not be null.
+     * @return {@code true} if the command can be executed by the given command sender, {@code false} otherwise.
+     * @throws CommandException     If the plugin associated with the command is not enabled.
+     * @throws NullPointerException If the provided {@code commandSender} parameter is null.
+     */
+    public boolean validate(@NotNull CommandSender commandSender)
+    {
+        return getTargetValidator().validate(getCommandInfo().map(CommandInfo::getTarget).orElse(CommandTarget.ALL),
+                commandSender);
+    }
+
+    /**
+     * Retrieves the {@link TargetValidator} associated with the command implementation.
+     * <p>
+     * This method is used to obtain the {@link TargetValidator} that is responsible for validating target entities
+     * related to the execution of a command. The validator is specific to the Kissen Paper command implementation.
+     *
+     * @return The {@link TargetValidator} associated with the command implementation.
+     */
+    public @NotNull TargetValidator getTargetValidator()
+    {
+        return Bukkit.getKissen().getImplementation(
+                KissenPaperCommandImplementation.class).getTargetValidator();
+    }
+
+    /**
+     * Asynchronously executes the function defined in the command payload.
+     *
+     * <p>This abstract method facilitates asynchronous execution of code paths within commands,
+     * which can be useful when performing potentially lengthy operations such as file access or network communication.
+     * This prevents blocking operations from freezing the thread that the command is currently executing on,
+     * helping avoid potential server lag or non-responsiveness.</p>
+     *
+     * <p>All subclasses must provide an implementation for this method, ensuring that the command payload function is task asynchronously.
+     * The implementation may use the server's scheduler, a thread pool, or any other method of asynchronous execution.</p>
+     *
+     * @param payload A CommandPayload object that encapsulates the command, sender, command related data and a function to execute.
+     *                The exact function varies among different commands and is defined when the payload is constructed.
+     */
+    public abstract void runAsync(@NotNull CommandPayload<CommandSender> payload);
+
+    private boolean hasOwnExecutor()
+    {
+        return commandExecutor != null;
+    }
+
+    private @NotNull CommandPayload<CommandSender> getCommandPayload(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args, CommandTarget target)
+    {
+        return new KissenCommandPayload<>(alias, sender, target, args, KissenPaperAbstractCommand.this)
+        {
+            @Override
+            protected @NotNull CommandHandler<CommandSender, ?> getHandler()
+            {
+                return KissenPaperAbstractCommand.this.getHandler();
+            }
+        };
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/command/plugin/KissenPaperPluginChildCommand.java b/src/main/java/net/kissenpvp/paper/command/command/plugin/KissenPaperPluginChildCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..f8426bfac3f3b607fb6f36e1090eae9c031db829
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/command/plugin/KissenPaperPluginChildCommand.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.command.command.plugin;
+
+import net.kissenpvp.core.command.CommandHolder;
+import net.kissenpvp.paper.command.command.KissenPaperAbstractCommand;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+/**
+ * Represents a child command within the Kissen Paper command framework, specifically designed for plugin-related commands.
+ * <p>
+ * This class extends {@link KissenPaperPluginCommand} and provides functionality for creating and managing child commands
+ * related to a specific plugin. Child commands of this type belong to a parent plugin command and are organized in a hierarchical structure.
+ */
+public class KissenPaperPluginChildCommand extends KissenPaperPluginCommand {
+    private final KissenPaperAbstractCommand<KissenPaperPluginChildCommand> parent;
+
+    /**
+     * Constructs a new {@link KissenPaperPluginChildCommand} with the specified plugin, name, and parent command.
+     *
+     * @param plugin The plugin to which this child command belongs. Must not be null.
+     * @param name   The name of the child command. Must not be null.
+     * @param parent The parent command to which this child command belongs. Must not be null.
+     * @throws NullPointerException If any of the parameters is null.
+     */
+    public KissenPaperPluginChildCommand(@NotNull Plugin plugin, @NotNull String name, @NotNull KissenPaperAbstractCommand<KissenPaperPluginChildCommand> parent) {
+        super(plugin, name, parent.getPosition() + 1, parent.getHandler());
+        this.parent = parent;
+    }
+
+    @Override
+    public @NotNull String getFullName() {
+        return parent.getFullName() + " " + getName();
+    }
+
+
+    @Override
+    public @NotNull Optional<CommandHolder<?, ?>> getParent()
+    {
+        return Optional.of(parent);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/command/plugin/KissenPaperPluginCommand.java b/src/main/java/net/kissenpvp/paper/command/command/plugin/KissenPaperPluginCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..2f906c7d6f53ae1bb5c35602865cd63a4185632c
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/command/plugin/KissenPaperPluginCommand.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.command.command.plugin;
+
+import net.kissenpvp.core.api.command.CommandHandler;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.paper.command.command.KissenPaperAbstractCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandException;
+import org.bukkit.command.CommandSender;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+/**
+ * Represents a top-level Kissen Paper command specifically designed for plugin-related commands.
+ * <p>
+ * This class extends {@link KissenPaperAbstractCommand} and provides functionality for creating and managing plugin-related commands.
+ * It is used as a container for subcommands related to a specific plugin and supports the creation of child commands using the specified parent command.
+ */
+public class KissenPaperPluginCommand extends KissenPaperAbstractCommand<KissenPaperPluginChildCommand> {
+
+    private final Plugin plugin;
+
+    /**
+     * Constructs a new {@link KissenPaperAbstractCommand} instance with the provided plugin, name, and position.
+     * <p>
+     * This constructor is used to create a new {@link KissenPaperAbstractCommand} instance with the specified plugin, command name, and position in the command hierarchy.
+     *
+     * @param plugin   The {@link Plugin} that owns this command. Must not be null.
+     * @param name     The name of the command. Must not be null.
+     * @param position The position of the command in the command hierarchy.
+     * @throws NullPointerException If either the {@code plugin} or {@code name} parameter is null.
+     */
+    public KissenPaperPluginCommand(@NotNull Plugin plugin, @NotNull String name, int position, CommandHandler<CommandSender, ?> handler) {
+        super(name, position, handler);
+        this.plugin = plugin;
+    }
+
+    @Override
+    public @NotNull Optional<KissenPaperPluginChildCommand> getChildCommand(@NotNull String name) {
+        return super.getChildCommand(name);
+    }
+
+    @Override
+    public void runAsync(@NotNull CommandPayload<CommandSender> payload) {
+        Bukkit.getAsyncScheduler().runNow(getPlugin(), scheduledTask -> getExecutor().execute(payload));
+    }
+
+    @Override
+    protected @NotNull KissenPaperPluginChildCommand createChildCommand(@NotNull String nextSubCommand, @NotNull KissenPaperAbstractCommand<KissenPaperPluginChildCommand> parent) {
+        return new KissenPaperPluginChildCommand(plugin, nextSubCommand, parent);
+    }
+
+    @Override
+    public boolean validate(@NotNull CommandSender commandSender) {
+        if (!this.plugin.isEnabled()) {
+            throw new CommandException(String.format("Plugin '%s' is not enabled.", plugin.getName()), new IllegalStateException());
+        }
+
+        return super.validate(commandSender);
+    }
+
+    /**
+     * Retrieves the Plugin associated with this command execution.
+     *
+     * @return The Plugin instance representing the plugin responsible for handling the command.
+     */
+    public @NotNull Plugin getPlugin() {
+        return plugin;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/command/system/KissenPaperChildCommand.java b/src/main/java/net/kissenpvp/paper/command/command/system/KissenPaperChildCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..c0590602b820f39e4c10016274e2082da55b7b1a
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/command/system/KissenPaperChildCommand.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.command.command.system;
+
+import net.kissenpvp.core.command.CommandHolder;
+import net.kissenpvp.paper.command.command.KissenPaperAbstractCommand;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+/**
+ * Represents a child command within the Kissen Paper command framework.
+ * <p>
+ * This class extends {@link KissenPaperCommand} and provides functionality for creating and managing child commands.
+ * Child commands are subcommands that belong to a parent command and are organized in a hierarchical structure.
+ */
+public class KissenPaperChildCommand extends KissenPaperCommand {
+
+    private final KissenPaperAbstractCommand<KissenPaperChildCommand> parent;
+
+    /**
+     * Constructs a new {@link KissenPaperChildCommand} with the specified name and parent command.
+     *
+     * @param name   The name of the child command. Must not be null.
+     * @param parent The parent command to which this child command belongs. Must not be null.
+     * @throws IllegalArgumentException If the {@code name} is null.
+     * @throws NullPointerException     If the {@code parent} is null.
+     */
+    public KissenPaperChildCommand(@NotNull String name, @NotNull KissenPaperAbstractCommand<KissenPaperChildCommand> parent) {
+        super(name, parent.getPosition() + 1, parent.getHandler());
+        this.parent = parent;
+    }
+
+    @Override
+    public @NotNull String getFullName() {
+        return parent.getFullName() + " " + getName();
+    }
+
+    @Override
+    public @NotNull Optional<CommandHolder<?, ?>> getParent()
+    {
+        return Optional.of(parent);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/command/system/KissenPaperCommand.java b/src/main/java/net/kissenpvp/paper/command/command/system/KissenPaperCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..1e5ad4fe9ab90bef9e2a5c8b5c3b58f18d5080ab
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/command/system/KissenPaperCommand.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.command.command.system;
+
+import net.kissenpvp.core.api.command.CommandHandler;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.paper.command.command.KissenPaperAbstractCommand;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+/**
+ * Represents a top-level Kissen Paper command within the command hierarchy.
+ * <p>
+ * This class extends {@link KissenPaperAbstractCommand} and provides functionality for creating and managing top-level Kissen Paper commands.
+ * It is used as a container for subcommands and supports the creation of child commands using the specified parent command.
+ */
+public class KissenPaperCommand extends KissenPaperAbstractCommand<KissenPaperChildCommand>
+{
+    private static final ExecutorService executorService;
+
+    static
+    {
+        executorService = Executors.newSingleThreadExecutor();
+    }
+
+    /**
+     * Constructs a new {@link KissenPaperCommand} with the specified name and position.
+     *
+     * @param name     The name of the command. Must not be null.
+     * @param position The position of the command. Must be non-negative.
+     * @throws IllegalArgumentException If the {@code name} is null or if the {@code position} is negative.
+     */
+    public KissenPaperCommand(@NotNull String name, int position, @NotNull CommandHandler<CommandSender, ?> handler) {
+        super(name, position, handler);
+    }
+
+    @Override
+    public void runAsync(@NotNull CommandPayload<CommandSender> payload) {
+        executorService.execute(() -> getExecutor().execute(payload));
+    }
+
+    @Override
+    protected @NotNull KissenPaperChildCommand createChildCommand(@NotNull String nextSubCommand, @NotNull KissenPaperAbstractCommand<KissenPaperChildCommand> parent) {
+        return new KissenPaperChildCommand(nextSubCommand, parent);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/confirmation/ConfirmCommand.java b/src/main/java/net/kissenpvp/paper/command/confirmation/ConfirmCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..daeefc739da245544c09aeb33f4b5871c8dbf1a5
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/confirmation/ConfirmCommand.java
@@ -0,0 +1,67 @@
+package net.kissenpvp.paper.command.confirmation;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.command.annotations.CommandData;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * The {@code ConfirmCommand} class provides command handlers for confirming and canceling actions with a confirmation request.
+ * It is part of the KissenPvP command framework and is designed to work in conjunction with the confirmation system provided by the KissenPaper plugin.
+ * The class includes methods for confirming and canceling actions, using a confirmation implementation obtained from the KissenPvP plugin.
+ *
+ * <p>The confirmation commands are defined using the {@link CommandData} annotation, specifying the command labels "confirm" and "cancel" respectively.
+ * When executed, these commands interact with the associated confirmation implementation to confirm or cancel actions based on the sender's request.</p>
+ *
+ * <p>The class uses the {@link CommandPayload} interface to handle command execution payloads, providing access to the command sender and related information.</p>
+ *
+ * @see CommandData
+ * @see CommandPayload
+ * @see KissenPaperConfirmationImplementation
+ * @see Component
+ */
+public class ConfirmCommand
+{
+
+    /**
+     * Handles the execution of the "confirm" command, confirming a pending action.
+     * Uses the KissenPaperConfirmationImplementation to perform the confirmation action.
+     *
+     * @param commandPayload The CommandPayload containing information about the command execution.
+     */
+    @CommandData("confirm")
+    public void confirm(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        if(!getImplementation().execute(commandPayload.getSender(), false))
+        {
+            commandPayload.getSender().sendMessage(Component.translatable("server.command.confirm.no.request"));
+        }
+    }
+
+    /**
+     * Handles the execution of the "cancel" command, canceling a pending action.
+     * Uses the KissenPaperConfirmationImplementation to perform the cancellation action.
+     *
+     * @param commandPayload The CommandPayload containing information about the command execution.
+     */
+    @CommandData("cancel")
+    public void cancel(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        if(!getImplementation().execute(commandPayload.getSender(), true))
+        {
+            commandPayload.getSender().sendMessage(Component.translatable("server.command.confirm.no.request"));
+        }
+    }
+
+    /**
+     * Retrieves the KissenPaperConfirmationImplementation responsible for handling confirmation requests.
+     *
+     * @return The KissenPaperConfirmationImplementation instance associated with the KissenPvP plugin.
+     */
+    private @NotNull KissenPaperConfirmationImplementation getImplementation()
+    {
+        return Bukkit.getKissen().getImplementation(KissenPaperConfirmationImplementation.class);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/confirmation/KissenPaperConfirmationImplementation.java b/src/main/java/net/kissenpvp/paper/command/confirmation/KissenPaperConfirmationImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..0b38e27af70aa6d998506760336553741ca4535e
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/confirmation/KissenPaperConfirmationImplementation.java
@@ -0,0 +1,42 @@
+package net.kissenpvp.paper.command.confirmation;
+
+
+import net.kissenpvp.core.command.CommandImplementation;
+import net.kissenpvp.core.command.confirmation.KissenConfirmationImplementation;
+import net.kissenpvp.paper.command.KissenPaperCommandImplementation;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+
+/**
+ * The {@code KissenPaperConfirmationImplementation} class extends {@code KissenConfirmationImplementation} and
+ * provides platform-specific functionality for handling confirmation requests in the KissenPvP plugin on the Paper platform.
+ * It overrides methods from its superclass to customize setup and check whether the server is running.
+ *
+ * <p>During the setup, it registers the confirmation-related command handlers, such as the "confirm" and "cancel" commands,
+ * using the {@link ConfirmCommand} class.</p>
+ *
+ * <p>This class is intended to be used in conjunction with the confirmation system in the KissenPvP, extending and
+ * adapting the functionality for the Paper platform.</p>
+ *
+ * @see KissenConfirmationImplementation
+ * @see KissenPaperCommandImplementation
+ * @see ConfirmCommand
+ */
+public class KissenPaperConfirmationImplementation extends KissenConfirmationImplementation
+{
+
+    @Override
+    public void setupComplete()
+    {
+        CommandImplementation<CommandSender> commandImplementation = Bukkit.getKissen().getImplementation(
+                KissenPaperCommandImplementation.class);
+        commandImplementation.getInternalHandler().registerCommand(new ConfirmCommand());
+    }
+
+
+    @Override
+    protected boolean isServerRunning()
+    {
+        return !Bukkit.getServer().isStopping();
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/handler/CompletionExceptionHandler.java b/src/main/java/net/kissenpvp/paper/command/handler/CompletionExceptionHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..d065886e98379027e9ff4d6a1741d88e335b8326
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/handler/CompletionExceptionHandler.java
@@ -0,0 +1,16 @@
+package net.kissenpvp.paper.command.handler;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.paper.api.command.PaperCommandExceptionHandler;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.concurrent.CompletionException;
+
+public class CompletionExceptionHandler implements PaperCommandExceptionHandler<CompletionException> {
+    @Override
+    public boolean handle(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull CompletionException throwable) {
+        return true;
+        // TODO return Optional.ofNullable(throwable.getCause()).map(cause -> KissenCore.getInstance().getImplementation(KissenCommandImplementation.class).handle(commandPayload, cause)).orElse(false);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/handler/PlayerExceptionHandler.java b/src/main/java/net/kissenpvp/paper/command/handler/PlayerExceptionHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..3109a2d03d33758a89ec9e23f77d3572deda8728
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/handler/PlayerExceptionHandler.java
@@ -0,0 +1,17 @@
+package net.kissenpvp.paper.command.handler;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.networking.client.entitiy.PlayerOfflineException;
+import net.kissenpvp.paper.api.command.PaperCommandExceptionHandler;
+import net.kyori.adventure.text.Component;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+public class PlayerExceptionHandler implements PaperCommandExceptionHandler<PlayerOfflineException> {
+    @Override
+    public boolean handle(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull PlayerOfflineException throwable) {
+
+        commandPayload.getSender().sendMessage(Component.translatable("server.command.player.offline", Component.text(throwable.getName())));
+        return true;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/handler/ProfileNotFoundExceptionHandler.java b/src/main/java/net/kissenpvp/paper/command/handler/ProfileNotFoundExceptionHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..76bfba3f5bcba73d548659af671123e9cfe36754
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/handler/ProfileNotFoundExceptionHandler.java
@@ -0,0 +1,17 @@
+package net.kissenpvp.paper.command.handler;
+
+import com.mojang.authlib.yggdrasil.ProfileNotFoundException;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.paper.api.command.PaperCommandExceptionHandler;
+import net.kyori.adventure.text.Component;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+public class ProfileNotFoundExceptionHandler implements PaperCommandExceptionHandler<ProfileNotFoundException> {
+    @Override
+    public boolean handle(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull ProfileNotFoundException throwable) {
+
+        commandPayload.getSender().sendMessage(Component.translatable("server.command.mojang.profile.invalid"));
+        return true;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/parser/OfflinePlayerParser.java b/src/main/java/net/kissenpvp/paper/command/parser/OfflinePlayerParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..156d30fd7b243cac9b274d384b69bdd03bef086f
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/parser/OfflinePlayerParser.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.command.parser;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.networking.client.entitiy.PlayerOfflineException;
+import net.kissenpvp.core.api.user.UserImplementation;
+import net.kissenpvp.core.api.user.UserInfo;
+import net.kissenpvp.paper.api.command.PaperArgumentParser;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.Objects;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+
+/**
+ * A parser used to serialize and deserialize an OfflinePlayer object.
+ */
+public class OfflinePlayerParser implements PaperArgumentParser<OfflinePlayer> {
+    @Override
+    public @NotNull String serialize(@NotNull OfflinePlayer object) {
+        return Objects.requireNonNull(object.getName());
+    }
+
+    @Override
+    public @NotNull OfflinePlayer deserialize(@NotNull String input) {
+        OfflinePlayer player;
+        try
+        {
+            if (input.matches("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")) {
+                player = Bukkit.getOfflinePlayer(UUID.fromString(input));
+            } else {
+                player = Bukkit.getOfflinePlayer(input);
+            }
+            return player;
+        }
+        catch (NullPointerException nullPointerException)
+        {
+            throw new PlayerOfflineException(input);
+        }
+    }
+
+    @Override
+    public @Nullable String argumentName()
+    {
+        return "player";
+    }
+
+    @Override public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        return Bukkit.getKissen().getImplementation(UserImplementation.class).getUserProfiles().stream().map(UserInfo::getName).collect(Collectors.toSet());
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/command/parser/PlayerParser.java b/src/main/java/net/kissenpvp/paper/command/parser/PlayerParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..bec525498f76bf2238337ef5fe1f6c7b2dfa48c7
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/command/parser/PlayerParser.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.command.parser;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.networking.client.entitiy.PlayerOfflineException;
+import net.kissenpvp.paper.api.command.PaperArgumentParser;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collection;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+public class PlayerParser implements PaperArgumentParser<Player> {
+    @Override
+    public @NotNull String serialize(@NotNull Player object) {
+        return object.getName();
+    }
+
+    @Override
+    public @NotNull Player deserialize(@NotNull String input) {
+        Player player;
+        if (input.matches("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"))
+        {
+            player = Bukkit.getPlayer(UUID.fromString(input));
+        }
+        else
+        {
+            player = Bukkit.getPlayer(input);
+        }
+
+        if(player == null)
+        {
+            throw new PlayerOfflineException(input);
+        }
+
+        return player;
+    }
+
+    @Override
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload) {
+        return Bukkit.getOnlinePlayers().stream().map(Player::getName).collect(Collectors.toSet());
+    }
+}
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index b7f338e982d0dcab99137ab6dc200b82ac6b7cba..c41f51fc6b65c3e027296bfcd1c7550067ae7f4c 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -373,9 +373,12 @@ public class Commands {
             // Paper start - Add UnknownCommandEvent
             final net.kyori.adventure.text.TextComponent.Builder builder = net.kyori.adventure.text.Component.text();
             if ((parseresults.getContext().getNodes().isEmpty() || !this.vanillaCommandNodes.contains(parseresults.getContext().getNodes().get(0).getNode()))) {
-                if (!org.spigotmc.SpigotConfig.unknownCommandMessage.isEmpty()) {
+                // KissenPaper - add command failed message
+                net.kissenpvp.paper.message.localization.KissenPaperLocalizationImplementation kissenPaperLocalizationImplementation = org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.paper.message.localization.KissenPaperLocalizationImplementation.class);
+                builder.append(kissenPaperLocalizationImplementation.translate("server.command.failed", commandlistenerwrapper.getBukkitSender().getCurrentLocale()));
+                /*if (!org.spigotmc.SpigotConfig.unknownCommandMessage.isEmpty() && false) { // KissenPaper - remove spigot
                     builder.append(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(org.spigotmc.SpigotConfig.unknownCommandMessage));
-                }
+                }*/
             } else {
                 // commandlistenerwrapper.sendFailure(ComponentUtils.fromMessage(commandsyntaxexception.getRawMessage()));
                 builder.color(net.kyori.adventure.text.format.NamedTextColor.RED).append(io.papermc.paper.brigadier.PaperBrigadier.componentFromMessage(commandsyntaxexception.getRawMessage()));
@@ -405,7 +408,7 @@ public class Commands {
                     .append(io.papermc.paper.adventure.PaperAdventure.asAdventure(ichatmutablecomponent));
             }
             }
-            org.bukkit.event.command.UnknownCommandEvent event = new org.bukkit.event.command.UnknownCommandEvent(commandlistenerwrapper.getBukkitSender(), s, org.spigotmc.SpigotConfig.unknownCommandMessage.isEmpty() ? null : builder.build());
+            org.bukkit.event.command.UnknownCommandEvent event = new org.bukkit.event.command.UnknownCommandEvent(commandlistenerwrapper.getBukkitSender(), s, /*org.spigotmc.SpigotConfig.unknownCommandMessage.isEmpty()  ? null :*/ builder.build()); // KissenPaper
             org.bukkit.Bukkit.getServer().getPluginManager().callEvent(event);
             if (event.message() != null) {
                 commandlistenerwrapper.sendFailure(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.message()), false);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 4806c417d46a835380c1cc13a17a76afa743b6f2..3431c05a5fdd51e19cf68459b54e51478a4116ba 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1006,18 +1006,26 @@ public final class CraftServer implements Server {
             return true;
         }
 
+        // KissenPaper start - Make unknown command message more general
         // Spigot start
-        if (!org.spigotmc.SpigotConfig.unknownCommandMessage.isEmpty()) {
-            // Paper start
-            org.bukkit.event.command.UnknownCommandEvent event = new org.bukkit.event.command.UnknownCommandEvent(sender, commandLine, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(org.spigotmc.SpigotConfig.unknownCommandMessage));
-            this.getPluginManager().callEvent(event);
-            if (event.message() != null) {
-                sender.sendMessage(event.message());
-            }
-            // Paper end
-        }
+//        if (!org.spigotmc.SpigotConfig.unknownCommandMessage.isEmpty()) {
+//            // Paper start
+//            org.bukkit.event.command.UnknownCommandEvent event = new org.bukkit.event.command.UnknownCommandEvent(sender, commandLine, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(org.spigotmc.SpigotConfig.unknownCommandMessage));
+//            this.getPluginManager().callEvent(event);
+//            if (event.message() != null) {
+//                sender.sendMessage(event.message());
+//            }
+//            // Paper end
+//        }
         // Spigot end
-
+        net.kissenpvp.paper.message.localization.KissenPaperLocalizationImplementation kissenPaperLocalizationImplementation = org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.paper.message.localization.KissenPaperLocalizationImplementation.class);
+        net.kyori.adventure.text.Component component = kissenPaperLocalizationImplementation.translate("server.command.failed", sender.getCurrentLocale());
+        org.bukkit.event.command.UnknownCommandEvent event = new org.bukkit.event.command.UnknownCommandEvent(sender, commandLine, component/*net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(org.spigotmc.SpigotConfig.unknownCommandMessage)*/);
+        Bukkit.getServer().getPluginManager().callEvent(event);
+        if (event.message() != null) {
+            sender.sendMessage(event.message());
+        }
+        // KissenPaper end
         return false;
     }
 
