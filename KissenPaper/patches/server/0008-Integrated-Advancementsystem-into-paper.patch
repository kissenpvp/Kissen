From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivo Quiring <falk.quiring@gmail.com>
Date: Sun, 3 Mar 2024 09:34:37 +0100
Subject: [PATCH] Integrated Advancementsystem into paper


diff --git a/src/main/java/net/kissenpvp/paper/advancement/KissenAdvancementTab.java b/src/main/java/net/kissenpvp/paper/advancement/KissenAdvancementTab.java
new file mode 100644
index 0000000000000000000000000000000000000000..547616f495455f3f83f9d1f166d54c074bca3558
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/advancement/KissenAdvancementTab.java
@@ -0,0 +1,94 @@
+package net.kissenpvp.paper.advancement;
+
+import com.destroystokyo.paper.Namespaced;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+import net.kissenpvp.paper.api.advancement.AdvancementProgression;
+import net.minecraft.resources.ResourceLocation;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.NamespacedKey;
+import org.bukkit.advancement.Advancement;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.*;
+
+public record KissenAdvancementTab(@NotNull Plugin plugin, @NotNull Namespaced namespace, @NotNull Advancement root,
+                                   @NotNull Map<Namespaced, Advancement> advancements, @NotNull Map<UUID, Set<ResourceLocation>> players) {
+
+    private static final Logger log = LogManager.getLogger(KissenAdvancementTab.class);
+
+    @Override
+    public @NotNull @Unmodifiable Map<Namespaced, Advancement> advancements() {
+        return Collections.unmodifiableMap(advancements);
+    }
+
+    @Override
+    public @NotNull @Unmodifiable Map<UUID, Set<ResourceLocation>> players() {
+        return Collections.unmodifiableMap(players);
+    }
+
+    public void registerAdvancement(@NotNull Advancement... advancements) {
+        this.advancements.clear();
+        this.advancements.put(root().getKey(), root());
+        List.of(advancements).forEach(this::registerAdvancement);
+    }
+
+    public void show(@NotNull Player... players)
+    {
+        List.of(players).forEach(this::show);
+    }
+
+    private void show(@NotNull Player player)
+    {
+        if(!isInitialized())
+        {
+            throw new IllegalStateException(String.format("Tab %s must be initialized.", namespace()));
+        }
+
+        UUID uniqueId = player.getUniqueId();
+        if(!players().containsKey(uniqueId))
+        {
+            players.put(uniqueId, Collections.emptySet());
+            // TODO update
+        }
+    }
+
+    private void registerAdvancement(@NotNull Advancement advancement) {
+        if (advancements().containsKey(advancement.getKey())) {
+            String warnMessage = "The system has detected a duplicated advancement within tab {}, specifically associated with the advancement {}. Consequently, it is slated for overriding.";
+            log.warn(warnMessage, namespace(), advancement.getKey());
+        }
+        advancements.put(advancement.getKey(), advancement);
+    }
+
+    private boolean isInitialized() {
+        return advancements().containsKey(root().getKey());
+    }
+
+    private void update(@NotNull Set<AdvancementProgression> progressions)
+    {
+        int estimatedSize = advancements().size() + 16;
+        Map<net.minecraft.advancements.Advancement, Integer> advancementMap = Maps.newHashMapWithExpectedSize(estimatedSize);
+
+        for(AdvancementProgression progression : progressions)
+        {
+            Set<ResourceLocation> resourceLocations = Sets.newHashSetWithExpectedSize(estimatedSize);
+
+            for(Advancement advancement : advancements().values())
+            {
+                NamespacedKey key = advancement.getKey();
+                ResourceLocation location = new ResourceLocation(key.namespace(), key.value());
+                resourceLocations.add(location);
+            }
+
+            for(Player player : progression.getConnectedPlayers())
+            {
+            }
+        }
+
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/advancement/KissenPaperAdvancementImplementation.java b/src/main/java/net/kissenpvp/paper/advancement/KissenPaperAdvancementImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..0c301bb192ad51c32d504aae21b0e7594238e255
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/advancement/KissenPaperAdvancementImplementation.java
@@ -0,0 +1,104 @@
+package net.kissenpvp.paper.advancement;
+
+import net.kissenpvp.core.api.database.meta.Meta;
+import net.kissenpvp.core.api.event.EventCancelledException;
+import net.kissenpvp.paper.advancement.progression.AdvancementProgressionNode;
+import net.kissenpvp.paper.advancement.progression.KissenAdvancementProgression;
+import net.kissenpvp.paper.api.advancement.AdvancementImplementation;
+import net.kissenpvp.paper.api.advancement.AdvancementProgression;
+import org.bukkit.Bukkit;
+import org.bukkit.advancement.Advancement;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.*;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
+
+public class KissenPaperAdvancementImplementation implements AdvancementImplementation {
+
+    private static final String KEY = "advancement_progression";
+    private Set<AdvancementProgressionNode> progression;
+
+    @Override
+    public boolean preStart() {
+        this.progression = new HashSet<>();
+        return AdvancementImplementation.super.preStart();
+    }
+
+    @Override
+    public boolean postStart() {
+        progression.addAll(fetchProgressions());
+        return AdvancementImplementation.super.postStart();
+    }
+
+    public @NotNull AdvancementProgression transformProgression(@NotNull AdvancementProgressionNode node) {
+        return new KissenAdvancementProgression(node, this::setProgressionNode);
+    }
+
+    public @NotNull AdvancementProgression generateProgression(@NotNull Advancement advancement, @NotNull Player... player) {
+        return generateProgression(advancement, Arrays.stream(player).map(Player::getUniqueId).toArray(UUID[]::new));
+    }
+
+    public @NotNull AdvancementProgression generateProgression(@NotNull Advancement advancement, @NotNull UUID... player) {
+
+        if (getProgression(advancement).isPresent()) {
+            throw new IllegalStateException("Advancement already exists."); //TODO
+        }
+
+        Set<UUID> players = Arrays.stream(player).collect(Collectors.toSet());
+        AdvancementProgressionNode node = new AdvancementProgressionNode(advancement, players);
+        if (!setProgressionNode(node)) {
+            throw new EventCancelledException();
+        }
+        return transformProgression(node);
+    }
+
+    public @NotNull Optional<AdvancementProgression> getProgression(@NotNull Advancement advancement) {
+        Predicate<AdvancementProgressionNode> isPart = progress -> progress.namespacedKey().equals(advancement.getKey());
+        return progression.stream().filter(isPart).map(this::transformProgression).findFirst();
+    }
+
+    public @NotNull Set<AdvancementProgression> getProgression(@NotNull Player player) {
+        return getProgression(player.getUniqueId());
+    }
+
+    public @NotNull Set<AdvancementProgression> getProgression(@NotNull UUID player) {
+        Predicate<AdvancementProgressionNode> isPart = progress -> progress.uuid().contains(player);
+        return progression.stream().filter(isPart).map(this::transformProgression).collect(Collectors.toUnmodifiableSet());
+    }
+
+    public @NotNull Optional<AdvancementProgression> getProgression(@NotNull Advancement advancement, @NotNull Player player) {
+        return getProgression(advancement, player.getUniqueId());
+    }
+
+    public @NotNull Optional<AdvancementProgression> getProgression(@NotNull Advancement advancement, @NotNull UUID player) {
+        Predicate<AdvancementProgressionNode> isPart = progress -> {
+            if (progress.namespacedKey().equals(advancement.getKey())) {
+                return progress.uuid().contains(player);
+            }
+            return false;
+        };
+        return progression.stream().filter(isPart).map(this::transformProgression).findFirst();
+    }
+
+    public @NotNull AdvancementProgression getProgressionNotNull(@NotNull Advancement advancement, @NotNull Player player) {
+        return getProgressionNotNull(advancement, player.getUniqueId());
+    }
+
+    public @NotNull AdvancementProgression getProgressionNotNull(@NotNull Advancement advancement, @NotNull UUID player) {
+        return getProgression(advancement, player).orElseGet(() -> generateProgression(advancement, player));
+    }
+
+    public boolean setProgressionNode(@NotNull AdvancementProgressionNode node) {
+        Set<AdvancementProgressionNode> nodes = new HashSet<>(fetchProgressions());
+        nodes.remove(node);
+        return nodes.add(node);
+    }
+
+    private @NotNull @Unmodifiable Set<AdvancementProgressionNode> fetchProgressions() {
+        Meta privateMeta = Bukkit.getKissen().getPrivateMeta();
+        return Set.copyOf(privateMeta.getCollection(KEY, AdvancementProgressionNode.class).exceptionally(throwable -> Collections.emptyList()).join());
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/advancement/KissenPlayerAdvancement.java b/src/main/java/net/kissenpvp/paper/advancement/KissenPlayerAdvancement.java
new file mode 100644
index 0000000000000000000000000000000000000000..fd7d5e004e63ba49cf9ad00ed00e95719b94d6de
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/advancement/KissenPlayerAdvancement.java
@@ -0,0 +1,45 @@
+package net.kissenpvp.paper.advancement;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.mojang.datafixers.DataFixer;
+import com.mojang.serialization.JsonOps;
+import net.minecraft.Util;
+import net.minecraft.server.PlayerAdvancements;
+import net.minecraft.server.ServerAdvancementManager;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.players.PlayerList;
+import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+
+public class KissenPlayerAdvancement extends PlayerAdvancements {
+    
+    public KissenPlayerAdvancement(DataFixer dataFixer, PlayerList playerManager, ServerAdvancementManager advancementLoader, Path filePath, ServerPlayer owner) {
+        super(dataFixer, playerManager, advancementLoader, filePath, owner);
+    }
+
+    @Override
+    protected void load(@NotNull ServerAdvancementManager advancementLoader) {
+        JsonElement jsonElement = new JsonObject(); //TODO load
+        PlayerAdvancements.Data data = Util.getOrThrow(this.getCodec().parse(JsonOps.INSTANCE, jsonElement), JsonParseException::new);
+        this.applyFrom(advancementLoader, data);
+
+        this.checkForAutomaticTriggers(advancementLoader);
+        this.registerListeners(advancementLoader);
+    }
+
+    @Override
+    public void save() {
+        if (org.spigotmc.SpigotConfig.disableAdvancementSaving) return; // Spigot
+
+        JsonElement jsonelement = Util.getOrThrow(super.getCodec().encodeStart(JsonOps.INSTANCE, this.asData()), IllegalStateException::new);
+        //TODO save
+    }
+
+    private @NotNull KissenPaperAdvancementImplementation getImplementation() {
+        return Bukkit.getKissen().getImplementation(KissenPaperAdvancementImplementation.class);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/advancement/progression/AdvancementProgressionNode.java b/src/main/java/net/kissenpvp/paper/advancement/progression/AdvancementProgressionNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..0243eef283bc91e0864873b6c9a75bcc16c45f99
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/advancement/progression/AdvancementProgressionNode.java
@@ -0,0 +1,48 @@
+package net.kissenpvp.paper.advancement.progression;
+
+import org.bukkit.NamespacedKey;
+import org.bukkit.advancement.Advancement;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.*;
+
+public record AdvancementProgressionNode(@NotNull NamespacedKey namespacedKey,
+                                         @NotNull Set<UUID> uuid, @NotNull Set<String> requirements,
+                                         @NotNull Set<CriterionNode> criteria) {
+
+    public AdvancementProgressionNode(@NotNull NamespacedKey namespacedKey, @NotNull Set<UUID> uuid, @NotNull Set<String> requirements, @NotNull Set<CriterionNode> criteria) {
+        this.namespacedKey = namespacedKey;
+        this.uuid = new HashSet<>(uuid);
+        this.requirements = new HashSet<>(requirements);
+        this.criteria = new HashSet<>(criteria);
+    }
+
+    public AdvancementProgressionNode(@NotNull Advancement advancement, @NotNull Set<UUID> uuid) {
+        this(advancement.getKey(), uuid, Set.copyOf(advancement.getCriteria()), Collections.EMPTY_SET);
+    }
+
+    @Contract(pure = true)
+    @Override
+    public @NotNull String toString() {
+        return "AdvancementProgressionNode{" +
+                "namespacedKey=" + namespacedKey +
+                ", uuid=" + uuid +
+                ", requirements=" + requirements +
+                ", criteria=" + criteria +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this==o) return true;
+        if (o==null || getClass()!=o.getClass()) return false;
+        AdvancementProgressionNode that = (AdvancementProgressionNode) o;
+        return Objects.equals(namespacedKey, that.namespacedKey);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(namespacedKey);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/advancement/progression/CriterionNode.java b/src/main/java/net/kissenpvp/paper/advancement/progression/CriterionNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..1fe7bd7e055c9eaa967fe7b49cc6178b1246c866
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/advancement/progression/CriterionNode.java
@@ -0,0 +1,50 @@
+package net.kissenpvp.paper.advancement.progression;
+
+import net.minecraft.advancements.CriterionProgress;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+
+import java.time.Instant;
+import java.util.Objects;
+
+public record CriterionNode(@NotNull String name, long obtained) {
+
+    public CriterionNode(@NotNull String name) {
+        this(name, System.currentTimeMillis());
+    }
+
+    public CriterionNode(@NotNull String name, @NotNull Instant instant) {
+        this(name, instant.toEpochMilli());
+    }
+
+    public @NotNull Instant toInstant() {
+        return Instant.ofEpochMilli(obtained);
+    }
+
+    public @NotNull CriterionProgress toProgress()
+    {
+        return new CriterionProgress(toInstant());
+    }
+
+    @Contract(pure = true)
+    @Override
+    public @NotNull String toString() {
+        return "CriterionNode{" +
+                "name='" + name + '\'' +
+                ", obtained=" + obtained +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this==o) return true;
+        if (o==null || getClass()!=o.getClass()) return false;
+        CriterionNode that = (CriterionNode) o;
+        return Objects.equals(name, that.name);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(name);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/advancement/progression/KissenAdvancementProgression.java b/src/main/java/net/kissenpvp/paper/advancement/progression/KissenAdvancementProgression.java
new file mode 100644
index 0000000000000000000000000000000000000000..5cd0dcc9c73a0bea4f6a4fdabb4f22717640f67e
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/advancement/progression/KissenAdvancementProgression.java
@@ -0,0 +1,183 @@
+package net.kissenpvp.paper.advancement.progression;
+
+import net.kissenpvp.core.database.DataWriter;
+import net.kissenpvp.paper.api.advancement.AdvancementProgression;
+import net.minecraft.advancements.AdvancementProgress;
+import net.minecraft.advancements.AdvancementRequirements;
+import net.minecraft.advancements.CriterionProgress;
+import net.minecraft.network.FriendlyByteBuf;
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.time.Instant;
+import java.util.*;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class KissenAdvancementProgression extends AdvancementProgress implements AdvancementProgression {
+    private final AdvancementProgressionNode progressionNode;
+    private final DataWriter<AdvancementProgressionNode> dataWriter;
+
+    public KissenAdvancementProgression(@NotNull AdvancementProgressionNode progressionNode, @Nullable DataWriter<AdvancementProgressionNode> dataWriter) {
+        this.progressionNode = progressionNode;
+        this.dataWriter = dataWriter;
+
+        super.update(new AdvancementRequirements(Collections.singletonList(new ArrayList<>(progressionNode.requirements()))));
+    }
+
+    @Override
+    public boolean isDone() {
+        Set<String> requirements = getProgressionNode().requirements();
+
+        Stream<CriterionNode> criterionStream = getProgressionNode().criteria().stream();
+        Set<String> criterion = criterionStream.map(CriterionNode::name).collect(Collectors.toUnmodifiableSet());
+
+        return criterion.containsAll(requirements);
+    }
+
+    @Override
+    public void update(@NotNull AdvancementRequirements requirements) {
+        DataWriter.validate(dataWriter);
+
+        List<String> requirementList = requirements.requirements().stream().flatMap(Collection::stream).toList();
+
+        if (getProgressionNode().requirements().containsAll(requirementList) && getProgressionNode().requirements().size()==requirementList.size()) {
+            return;
+        }
+
+        getProgressionNode().requirements().clear();
+        getProgressionNode().requirements().addAll(requirementList);
+
+        dataWriter.update(getProgressionNode());
+
+        super.update(requirements);
+    }
+
+    @Override
+    public boolean hasProgress() {
+        return !getProgressionNode().criteria().isEmpty();
+    }
+
+    @Override
+    public void serializeToNetwork(@NotNull FriendlyByteBuf buf) {
+        buf.writeMap(toMap(), FriendlyByteBuf::writeUtf, (buffer, progresses) -> progresses.serializeToNetwork(buffer));
+    }
+
+    @Nullable
+    @Override
+    public CriterionProgress getCriterion(@NotNull String name) {
+        Predicate<CriterionNode> equals = criterion -> criterion.name().equals(name);
+        Stream<CriterionNode> stream = getProgressionNode().criteria().stream();
+        return stream.filter(equals).findFirst().map(node -> new CriterionProgress(node.toInstant())).orElse(null);
+    }
+
+    @Override
+    public float getPercent() {
+        Set<String> requirements = getProgressionNode().requirements();
+        float maxSize = requirements.size();
+
+        Stream<CriterionNode> criterionStream = getProgressionNode().criteria().stream();
+        float completed = criterionStream.filter(criterion -> requirements.contains(criterion.name())).count();
+
+        return completed / maxSize;
+    }
+
+    @Override
+    public boolean grantProgress(@NotNull String name) {
+        DataWriter.validate(dataWriter);
+
+        CriterionNode criterionNode = new CriterionNode(name);
+        if (!getProgressionNode().criteria().add(criterionNode)) {
+            return false;
+        }
+        dataWriter.update(getProgressionNode());
+        return true;
+    }
+
+    @Override
+    public boolean revokeProgress(@NotNull String name) {
+        DataWriter.validate(dataWriter);
+
+        CriterionNode criterionNode = new CriterionNode(name, 0); // can be zero, only checks name
+        if (!getProgressionNode().criteria().remove(criterionNode)) {
+            return false;
+        }
+        dataWriter.update(getProgressionNode());
+        return true;
+    }
+
+    @Override
+    public @NotNull Iterable<String> getRemainingCriteria() {
+        Set<String> requirements = new HashSet<>(getProgressionNode().requirements());
+        for (String criterion : getCompletedCriteria()) {
+            requirements.remove(criterion);
+        }
+        return Set.copyOf(requirements);
+    }
+
+    @Override
+    public @NotNull Iterable<String> getCompletedCriteria() {
+        return getProgressionNode().criteria().stream().map(CriterionNode::name).collect(Collectors.toUnmodifiableSet());
+    }
+
+    @Nullable
+    @Override
+    public Instant getFirstProgressDate() {
+        return getProgressionNode().criteria().stream().map(CriterionNode::toInstant).min(Comparator.naturalOrder()).orElse(null);
+    }
+
+    @Override
+    public @NotNull @Unmodifiable Set<UUID> getPlayer() {
+        return Set.copyOf(getProgressionNode().uuid());
+    }
+
+    @Override
+    public @NotNull @Unmodifiable Set<Player> getConnectedPlayers() {
+        return getPlayer().stream().map(Bukkit::getPlayer).filter(Objects::nonNull).collect(Collectors.toUnmodifiableSet());
+    }
+
+    @Override
+    public boolean contains(@NotNull Player player) {
+        return getProgressionNode().uuid().contains(player.getUniqueId());
+    }
+
+    @Override
+    public boolean attachPlayer(@NotNull Player... player) {
+        DataWriter.validate(dataWriter);
+
+        if (getProgressionNode().uuid().addAll(Arrays.stream(player).map(Entity::getUniqueId).collect(Collectors.toSet()))) {
+            dataWriter.update(getProgressionNode());
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public boolean detachPlayer(@NotNull Player... player) {
+        DataWriter.validate(dataWriter);
+
+        if (getProgressionNode().uuid().removeAll(Arrays.stream(player).map(Entity::getUniqueId).collect(Collectors.toSet()))) {
+            dataWriter.update(getProgressionNode());
+            return true;
+        }
+        return false;
+    }
+
+    public @NotNull AdvancementProgressionNode getProgressionNode() {
+        return progressionNode;
+    }
+
+    private @NotNull Map<String, CriterionProgress> toMap() {
+        Map<String, CriterionProgress> progress = new HashMap<>();
+        Set<String> requirements = getProgressionNode().requirements();
+        for (String requirement : requirements) {
+            progress.put(requirement, Objects.requireNonNullElse(getCriterion(requirement), new CriterionProgress()));
+        }
+        return progress;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/advancement/progression/KissenServerAdvancementProgression.java b/src/main/java/net/kissenpvp/paper/advancement/progression/KissenServerAdvancementProgression.java
new file mode 100644
index 0000000000000000000000000000000000000000..41c41e75acc72141387aed8809058db1b927c75d
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/advancement/progression/KissenServerAdvancementProgression.java
@@ -0,0 +1,24 @@
+package net.kissenpvp.paper.advancement.progression;
+
+import net.kissenpvp.core.database.DataWriter;
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Entity;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Set;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+public class KissenServerAdvancementProgression extends KissenAdvancementProgression {
+
+    public KissenServerAdvancementProgression(@NotNull AdvancementProgressionNode progressionNode, @Nullable DataWriter<AdvancementProgressionNode> dataWriter) {
+        super(progressionNode, dataWriter);
+    }
+
+    @Override
+    public @NotNull @Unmodifiable Set<UUID> getPlayer() {
+        return Bukkit.getOnlinePlayers().stream().map(Entity::getUniqueId).collect(Collectors.toUnmodifiableSet());
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
index b93e44b8b80e140029e86a3949a217a20e9fd9c0..9db268b4c4bfae0690d111f9551659b97b9236ef 100644
--- a/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
+++ b/src/main/java/net/kissenpvp/paper/base/KissenPaperCore.java
@@ -30,6 +30,7 @@ import net.kissenpvp.core.base.KissenCore;
 import net.kissenpvp.core.event.EventImplementation;
 import net.kissenpvp.core.command.confirmation.KissenConfirmationImplementation;
 import net.kissenpvp.core.permission.PermissionImplementation;
+import net.kissenpvp.paper.advancement.KissenPaperAdvancementImplementation;
 import net.kissenpvp.paper.api.base.PaperKissen;
 import net.kissenpvp.paper.event.KissenEventImplementation;
 import net.kissenpvp.paper.api.permission.PaperPermissionImplementation;
@@ -75,6 +76,7 @@ public class KissenPaperCore extends KissenCore implements PaperKissen {
         loader.put(PaperCommandImplementation.class, new KissenPaperCommandImplementation());
         loader.put(BanImplementation.class, new KissenPaperBanImplementation());
         loader.put(KissenConfirmationImplementation.class, new KissenPaperConfirmationImplementation());
+        loader.put(KissenPaperAdvancementImplementation.class, new KissenPaperAdvancementImplementation());
         super.loadImplementations(loader);
     }
 
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index 24e5993b281448734eb67c7a8439a349bbf9fd72..85db6972a7e56ac72537f3f109129bc0521a56e8 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -103,7 +103,7 @@ public class PlayerAdvancements {
         this.load(advancementLoader);
     }
 
-    private void registerListeners(ServerAdvancementManager advancementLoader) {
+    protected void registerListeners(ServerAdvancementManager advancementLoader) { // KissenPaper - make protected
         Iterator iterator = advancementLoader.getAllAdvancements().iterator();
 
         while (iterator.hasNext()) {
@@ -114,7 +114,7 @@ public class PlayerAdvancements {
 
     }
 
-    private void checkForAutomaticTriggers(ServerAdvancementManager advancementLoader) {
+    protected void checkForAutomaticTriggers(ServerAdvancementManager advancementLoader) { // KissenPaper - make protected
         Iterator iterator = advancementLoader.getAllAdvancements().iterator();
 
         while (iterator.hasNext()) {
@@ -129,7 +129,7 @@ public class PlayerAdvancements {
 
     }
 
-    private void load(ServerAdvancementManager advancementLoader) {
+    protected void load(ServerAdvancementManager advancementLoader) { // KissenPaper - make protected
         if (Files.isRegularFile(this.playerSavePath, new LinkOption[0])) {
             try {
                 JsonReader jsonreader = new JsonReader(Files.newBufferedReader(this.playerSavePath, StandardCharsets.UTF_8));
@@ -193,7 +193,7 @@ public class PlayerAdvancements {
 
     }
 
-    private void applyFrom(ServerAdvancementManager loader, PlayerAdvancements.Data progressMap) {
+    protected void applyFrom(ServerAdvancementManager loader, PlayerAdvancements.Data progressMap) { // KissenPaper - made protected
         progressMap.forEach((minecraftkey, advancementprogress) -> {
             AdvancementHolder advancementholder = loader.get(minecraftkey);
 
@@ -208,7 +208,7 @@ public class PlayerAdvancements {
         });
     }
 
-    private PlayerAdvancements.Data asData() {
+    protected PlayerAdvancements.Data asData() { // KissenPaper - made protected
         Map<ResourceLocation, AdvancementProgress> map = new LinkedHashMap();
 
         this.progress.forEach((advancementholder, advancementprogress) -> {
@@ -416,14 +416,30 @@ public class PlayerAdvancements {
         });
     }
 
-    private static record Data(Map<ResourceLocation, AdvancementProgress> map) {
+    protected record Data(Map<ResourceLocation, AdvancementProgress> map) { // KissenPaper - made protected and remove static
 
         public static final Codec<PlayerAdvancements.Data> CODEC = Codec.unboundedMap(ResourceLocation.CODEC, AdvancementProgress.CODEC).xmap(PlayerAdvancements.Data::new, PlayerAdvancements.Data::map);
 
+        // KissenPaper start - add constructor because java defaults it to private
+        protected Data(Map<ResourceLocation, AdvancementProgress> map) {
+            this.map = map;
+        }
+        // KissenPaper end - add constructor because java defaults it to private
+
         public void forEach(BiConsumer<ResourceLocation, AdvancementProgress> consumer) {
             this.map.entrySet().stream().sorted(Entry.comparingByValue()).forEach((entry) -> {
                 consumer.accept((ResourceLocation) entry.getKey(), (AdvancementProgress) entry.getValue());
             });
         }
     }
+
+    // KissenPaper start - make player accessible from class children
+    protected @org.jetbrains.annotations.NotNull ServerPlayer getPlayer() {
+        return player;
+    }
+
+    public @org.jetbrains.annotations.NotNull Codec<Data> getCodec() {
+        return codec;
+    }
+    // KissenPaper end - make player accessible from class children
 }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 556328c8048d8f23a076100b2f84c564982f35a2..14f072e22987fdb19342fcc3fb4eb34a315eb3cc 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1516,7 +1516,11 @@ public abstract class PlayerList {
         if (advancementdataplayer == null) {
             Path path = this.server.getWorldPath(LevelResource.PLAYER_ADVANCEMENTS_DIR).resolve(uuid + ".json");
 
-            advancementdataplayer = new PlayerAdvancements(this.server.getFixerUpper(), this, this.server.getAdvancements(), path, player);
+            // KissenPaper start - make advancements being saved in the database
+            //advancementdataplayer = new PlayerAdvancements(this.server.getFixerUpper(), this, this.server.getAdvancements(), path, player);
+            advancementdataplayer = new net.kissenpvp.paper.advancement.KissenPlayerAdvancement(this.server.getFixerUpper(), this, this.server.getAdvancements(), path, player);
+            // KissenPaper end - make advancements being saved in the database
+
             // this.advancements.put(uuid, advancementdataplayer); // CraftBukkit
         }
 
