From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivo Quiring <falk.quiring@gmail.com>
Date: Mon, 11 Mar 2024 16:49:45 +0100
Subject: [PATCH] Implemented inventory extensions into paper

Signed-off-by: Ivo Quiring <falk.quiring@gmail.com>

diff --git a/src/main/java/net/kissenpvp/paper/inventory/KissenInteractableInventory.java b/src/main/java/net/kissenpvp/paper/inventory/KissenInteractableInventory.java
new file mode 100644
index 0000000000000000000000000000000000000000..38b094e176b675a6a756246fa03b62eaa5a83e65
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/inventory/KissenInteractableInventory.java
@@ -0,0 +1,81 @@
+package net.kissenpvp.paper.inventory;
+
+import net.kissenpvp.core.api.event.EventListener;
+import net.kissenpvp.paper.api.inventory.InteractableInventory;
+import net.kissenpvp.paper.api.inventory.InventoryPart;
+import net.kyori.adventure.text.Component;
+import net.minecraft.world.Container;
+import org.bukkit.craftbukkit.inventory.CraftInventoryCustom;
+import org.bukkit.event.inventory.InventoryCloseEvent;
+import org.bukkit.event.inventory.InventoryOpenEvent;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.inventory.InventoryHolder;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Optional;
+
+public class KissenInteractableInventory extends CraftInventoryCustom implements InteractableInventory {
+
+    private final KissenInventoryPart top = new KissenInventoryPart(), bottom = new KissenInventoryPart();
+    private EventListener<InventoryCloseEvent> onClose;
+    private EventListener<InventoryOpenEvent> onOpen;
+
+    public KissenInteractableInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull Container delegate) {
+        super(owner, type, delegate);
+    }
+
+    public KissenInteractableInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type) {
+        super(owner, type);
+    }
+
+    public KissenInteractableInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull Component title) {
+        super(owner, type, title);
+    }
+
+    public KissenInteractableInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {
+        super(owner, type, title);
+    }
+
+    public KissenInteractableInventory(@Nullable InventoryHolder owner, int size) {
+        super(owner, size);
+    }
+
+    public KissenInteractableInventory(@Nullable InventoryHolder owner, int size, @NotNull Component title) {
+        super(owner, size, title);
+    }
+
+    public KissenInteractableInventory(@NotNull InventoryHolder owner, int size, @NotNull String title) {
+        super(owner, size, title);
+    }
+
+    @Override
+    public @NotNull Optional<EventListener<InventoryCloseEvent>> onClose() {
+        return Optional.ofNullable(onClose);
+    }
+
+    @Override
+    public @NotNull Optional<EventListener<InventoryOpenEvent>> onOpen() {
+        return Optional.ofNullable(onOpen);
+    }
+
+    @Override
+    public void onClose(@NotNull EventListener<InventoryCloseEvent> onClose) {
+        this.onClose = onClose;
+    }
+
+    @Override
+    public void onOpen(@NotNull EventListener<InventoryOpenEvent> onOpen) {
+        this.onOpen = onOpen;
+    }
+
+    @Override
+    public @NotNull InventoryPart getTop() {
+        return top;
+    }
+
+    @Override
+    public @NotNull InventoryPart getBottom() {
+        return bottom;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/inventory/KissenInventoryPart.java b/src/main/java/net/kissenpvp/paper/inventory/KissenInventoryPart.java
new file mode 100644
index 0000000000000000000000000000000000000000..8b1622e88272d74cc62f78bcab5cf8198cf7cf59
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/inventory/KissenInventoryPart.java
@@ -0,0 +1,57 @@
+package net.kissenpvp.paper.inventory;
+
+import net.kissenpvp.core.api.event.EventListener;
+import net.kissenpvp.paper.api.inventory.InventoryPart;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.event.inventory.InventoryDragEvent;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+public class KissenInventoryPart implements InventoryPart {
+
+    private EventListener<InventoryClickEvent> onClick;
+    private EventListener<InventoryDragEvent> onDrag;
+    private boolean disallowClick;
+    private boolean disallowDrag;
+
+    @Override
+    public @NotNull Optional<EventListener<InventoryClickEvent>> onClick() {
+        return Optional.ofNullable(onClick);
+    }
+
+    @Override
+    public @NotNull Optional<EventListener<InventoryDragEvent>> onDrag() {
+        return Optional.ofNullable(onDrag);
+    }
+
+    @Override
+    public boolean disallowClick() {
+        return disallowClick;
+    }
+
+    @Override
+    public boolean disallowDrag() {
+        return disallowDrag;
+    }
+
+    @Override
+    public void onClick(@NotNull EventListener<InventoryClickEvent> onClick) {
+        this.onClick = onClick;
+    }
+
+    @Override
+    public void onDrag(@NotNull EventListener<InventoryDragEvent> onDrag) {
+        this.onDrag = onDrag;
+    }
+
+    @Override
+    public void disallowClick(boolean disallowClick) {
+        this.disallowClick = disallowClick;
+    }
+
+    @Override
+    public void disallowDrag(boolean disallowDragging) {
+        this.disallowDrag = disallowDragging;
+    }
+}
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 32910f677b0522ac8ec513fa0d00b714b52cfae4..649af00dc8d0358ae23e94d2554b89d64f8be799 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -477,8 +477,41 @@ public abstract class AbstractContainerMenu {
                     this.setCarried(CraftItemStack.asNMSCopy(newcursor));
 
                     InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.quickcraftType == 1, eventmap);
+
+                    // KissenPaper start - hook inventory events
+                    if (event.getInventory() instanceof net.kissenpvp.paper.api.inventory.InteractableInventory interactableInventory) {
+                        int inventorySize = interactableInventory.getSize();
+
+                        boolean bottomPolicy = interactableInventory.getBottom().disallowDrag();
+                        boolean topPolicy = interactableInventory.getTop().disallowDrag();
+                        if (event.getRawSlots().stream().allMatch(s -> s >= inventorySize)) {
+                            event.setCancelled(bottomPolicy);
+                        } else if (event.getRawSlots().stream().allMatch(s -> s < inventorySize)) {
+                            event.setCancelled(topPolicy);
+                        } else {
+                            event.setCancelled(bottomPolicy || topPolicy);
+                        }
+                    }
+                    // KissenPaper end - hook inventory events
+
                     player.level().getCraftServer().getPluginManager().callEvent(event);
 
+                    // KissenPaper start - hook inventory events
+                    if (event.getView().getTopInventory() instanceof net.kissenpvp.paper.api.inventory.InteractableInventory interactableInventory) {
+                        int inventorySize = interactableInventory.getSize();
+
+                        boolean topPolicy = interactableInventory.getTop().disallowDrag();
+                        if (event.getRawSlots().stream().allMatch(s -> s >= inventorySize)) {
+                            interactableInventory.getBottom().onDrag().ifPresent(listener -> listener.call(event));
+                        } else if (event.getRawSlots().stream().allMatch(s -> s < inventorySize)) {
+                            interactableInventory.getTop().onDrag().ifPresent(listener -> listener.call(event));
+                        } else {
+                            interactableInventory.getTop().onDrag().ifPresent(listener -> listener.call(event));
+                            interactableInventory.getBottom().onDrag().ifPresent(listener -> listener.call(event));
+                        }
+                    }
+                    // KissenPaper end - hook inventory events
+
                     // Whether or not a change was made to the inventory that requires an update.
                     boolean needsUpdate = event.getResult() != Result.DEFAULT;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 34b91eff3190848bae38b20e1d956ece497b1473..d97df16f516c4ac3b3702de9d6d52087bc8c0c91 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -1422,6 +1422,13 @@ public class CraftEventFactory {
         event.setCancelled(cancelled);
         server.getPluginManager().callEvent(event);
 
+        // KissenPaper start - hook custom inventory
+        if(container.getBukkitView().getTopInventory() instanceof net.kissenpvp.paper.api.inventory.InteractableInventory interactableInventory)
+        {
+            interactableInventory.onOpen().ifPresent(listener -> listener.call(event));
+        }
+        // KissenPaper end - hook custom inventory
+
         if (event.isCancelled()) {
             container.transferTo(player.containerMenu, craftPlayer);
             return com.mojang.datafixers.util.Pair.of(null, null); // Paper - Add titleOverride to InventoryOpenEvent
@@ -1619,6 +1626,14 @@ public class CraftEventFactory {
         // Paper end
         InventoryCloseEvent event = new InventoryCloseEvent(human.containerMenu.getBukkitView(), reason); // Paper
         human.level().getCraftServer().getPluginManager().callEvent(event);
+
+        // KissenPaper start - hook custom inventory
+        if(human.containerMenu.getBukkitView().getTopInventory() instanceof net.kissenpvp.paper.api.inventory.InteractableInventory interactableInventory)
+        {
+            interactableInventory.onClose().ifPresent(listener -> listener.call(event));
+        }
+        // KissenPaper end - hook custom inventory
+
         human.containerMenu.transferTo(human.inventoryMenu, human.getBukkitEntity());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
index 78a7ac47f20e84ccd67ff44d0bc7a2f2faa0d476..37cd4ba03d8a676ac496722360c94b2b9dfb270d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
@@ -9,32 +9,32 @@ public class CraftCustomInventoryConverter implements CraftInventoryCreator.Inve
 
     @Override
     public Inventory createInventory(InventoryHolder holder, InventoryType type) {
-        return new CraftInventoryCustom(holder, type);
+        return new net.kissenpvp.paper.inventory.KissenInteractableInventory(holder, type);
     }
 
     // Paper start
     @Override
     public Inventory createInventory(InventoryHolder owner, InventoryType type, net.kyori.adventure.text.Component title) {
-        return new CraftInventoryCustom(owner, type, title);
+        return new net.kissenpvp.paper.inventory.KissenInteractableInventory(owner, type, title);
     }
     // Paper end
 
     @Override
     public Inventory createInventory(InventoryHolder owner, InventoryType type, String title) {
-        return new CraftInventoryCustom(owner, type, title);
+        return new net.kissenpvp.paper.inventory.KissenInteractableInventory(owner, type, title);
     }
 
     public Inventory createInventory(InventoryHolder owner, int size) {
-        return new CraftInventoryCustom(owner, size);
+        return new net.kissenpvp.paper.inventory.KissenInteractableInventory(owner, size);
     }
 
     // Paper start
     public Inventory createInventory(InventoryHolder owner, int size, net.kyori.adventure.text.Component title) {
-        return new CraftInventoryCustom(owner, size, title);
+        return new net.kissenpvp.paper.inventory.KissenInteractableInventory(owner, size, title);
     }
     // Paper end
 
     public Inventory createInventory(InventoryHolder owner, int size, String title) {
-        return new CraftInventoryCustom(owner, size, title);
+        return new net.kissenpvp.paper.inventory.KissenInteractableInventory(owner, size, title);
     }
 }
