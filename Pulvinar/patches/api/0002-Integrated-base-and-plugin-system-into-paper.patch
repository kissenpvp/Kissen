From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Mon, 11 Sep 2023 00:48:45 +0200
Subject: [PATCH] Integrated base and plugin system into paper


diff --git a/src/main/java/net/kissenpvp/paper/api/base/Context.java b/src/main/java/net/kissenpvp/paper/api/base/Context.java
new file mode 100644
index 0000000000000000000000000000000000000000..d679111da9e644b1767be837705e973a1c2666cf
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/base/Context.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.base;
+
+import java.io.Serializable;
+
+public enum Context implements Serializable
+{
+    LOCAL,
+    GLOBAL
+}
\ No newline at end of file
diff --git a/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java b/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java
new file mode 100644
index 0000000000000000000000000000000000000000..ceb58be397524a5a366e4c43f2743222f28448fb
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/base/PaperKissen.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.base;
+
+import net.kissenpvp.core.api.base.Kissen;
+
+public interface PaperKissen extends Kissen { }
diff --git a/src/main/java/net/kissenpvp/paper/api/command/ArgumentParser.java b/src/main/java/net/kissenpvp/paper/api/command/ArgumentParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..2cec673960447bc1fd9e26401576b5d63f886081
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/command/ArgumentParser.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.command;
+
+import net.kissenpvp.core.api.command.AbstractArgumentParser;
+import org.bukkit.command.CommandSender;
+
+/**
+ * Interface for a Paper-specific argument parser.
+ * <p>
+ * This interface extends the {@link AbstractArgumentParser} and refines the server entity type to
+ * {@link CommandSender}. It's used for parsing command arguments within the Paper API context.
+ * <p>
+ * This interface does not add any additional methods; it merely specializes the
+ * {@link AbstractArgumentParser} for use with {@link CommandSender} in the Paper API context.
+ * <p>
+ * All methods inherited from {@link AbstractArgumentParser} maintain their original functionality
+ * with the specialized type {@link CommandSender}.
+ *
+ * @param <T> the type of object that the parser can parse.
+ * @see AbstractArgumentParser
+ * @see CommandSender
+ */
+public interface ArgumentParser<T> extends AbstractArgumentParser<T, CommandSender> { }
diff --git a/src/main/java/net/kissenpvp/paper/api/command/CommandExceptionHandler.java b/src/main/java/net/kissenpvp/paper/api/command/CommandExceptionHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..3458e8ef32f8a07a6d8dd76beff389ab601e6b57
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/command/CommandExceptionHandler.java
@@ -0,0 +1,23 @@
+package net.kissenpvp.paper.api.command;
+
+import net.kissenpvp.core.api.command.exception.AbstractCommandExceptionHandler;
+import org.bukkit.command.CommandSender;
+
+/**
+ * Interface for Paper command exception handler.
+ * <p>
+ * This interface extends the {@link AbstractCommandExceptionHandler} and narrows down
+ * the {@code ServerEntity} type to {@link CommandSender}. It's used for handling exceptions
+ * specifically occurring during the execution of commands within the Paper API context.
+ * <p>
+ * This interface does not add any additional methods; it merely specializes the
+ * {@link AbstractCommandExceptionHandler} for use with {@link CommandSender} in the Paper API context.
+ * <p>
+ * All methods inherited from {@link AbstractCommandExceptionHandler} maintain their original functionality
+ * with the specialized type {@link CommandSender}.
+ *
+ * @param <T> the type of exception this handler can handle
+ * @see AbstractCommandExceptionHandler
+ * @see CommandSender
+ */
+public interface CommandExceptionHandler<T extends Throwable> extends AbstractCommandExceptionHandler<T, CommandSender> { }
diff --git a/src/main/java/net/kissenpvp/paper/api/command/parser/OfflinePlayerParser.java b/src/main/java/net/kissenpvp/paper/api/command/parser/OfflinePlayerParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..9cba005d24c46630a237df2982922fc1905ab2a8
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/command/parser/OfflinePlayerParser.java
@@ -0,0 +1,76 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.command.parser;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.networking.client.entitiy.PlayerOfflineException;
+import net.kissenpvp.core.api.user.UserImplementation;
+import net.kissenpvp.core.api.user.UserInfo;
+import net.kissenpvp.paper.api.command.ArgumentParser;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.Objects;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+
+/**
+ * A parser used to serialize and deserialize an OfflinePlayer object.
+ */
+public class OfflinePlayerParser implements ArgumentParser<OfflinePlayer> {
+    @Override
+    public @NotNull String serialize(@NotNull OfflinePlayer object) {
+        return Objects.requireNonNull(object.getName());
+    }
+
+    @Override
+    public @NotNull OfflinePlayer deserialize(@NotNull String input) {
+
+        try
+        {
+            OfflinePlayer player;
+            if (input.matches("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")) {
+                player = Bukkit.getOfflinePlayer(UUID.fromString(input));
+            } else {
+                player = Bukkit.getOfflinePlayer(input);
+            }
+            return player;
+        }
+        catch (NullPointerException nullPointerException)
+        {
+            throw new PlayerOfflineException(input);
+        }
+    }
+
+    @Override
+    public @Nullable String argumentName()
+    {
+        return "player";
+    }
+
+    @Override public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        return Bukkit.getKissen().getImplementation(UserImplementation.class).getUserProfiles().stream().map(UserInfo::getName).collect(Collectors.toSet());
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/command/parser/PlayerParser.java b/src/main/java/net/kissenpvp/paper/api/command/parser/PlayerParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..99f52c26570f30aec13f5c339fe042aee3078324
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/command/parser/PlayerParser.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.command.parser;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.networking.client.entitiy.PlayerOfflineException;
+import net.kissenpvp.paper.api.command.ArgumentParser;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collection;
+import java.util.Objects;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+public class PlayerParser implements ArgumentParser<Player> {
+    @Override
+    public @NotNull String serialize(@NotNull Player object) {
+        return object.getName();
+    }
+
+    @Override
+    public @NotNull Player deserialize(@NotNull String input) {
+        Player player;
+        if (input.matches("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"))
+        {
+            player = Bukkit.getPlayer(UUID.fromString(input));
+        }
+        else
+        {
+            player = Bukkit.getPlayer(input);
+        }
+
+        if(Objects.isNull(player))
+        {
+            throw new PlayerOfflineException(input);
+        }
+
+        return player;
+    }
+
+    @Override
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload) {
+        return Bukkit.getOnlinePlayers().stream().map(Player::getName).collect(Collectors.toSet());
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/GroupablePermissionEntry.java b/src/main/java/net/kissenpvp/paper/api/permission/GroupablePermissionEntry.java
new file mode 100644
index 0000000000000000000000000000000000000000..f825fb7b7e216fb7382327091684115ff94d9c26
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/GroupablePermissionEntry.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.AbstractGroupablePermissionEntry;
+import net.kissenpvp.core.api.permission.AbstractPermissionGroup;
+import net.kissenpvp.paper.api.base.Context;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.List;
+import java.util.Optional;
+import java.util.Set;
+
+public interface GroupablePermissionEntry extends AbstractGroupablePermissionEntry<Permission>, PermissionEntry {
+    @NotNull @Unmodifiable Set<Permission> getOwnPermissions(@NotNull Context context);
+
+    @NotNull Optional<Permission> getOwnPermission(@NotNull String permission, @NotNull Context context);
+
+    @NotNull @Unmodifiable List<AbstractPermissionGroup<Permission>> getOwnPermissionsGroups(@NotNull Context context);
+
+    @NotNull @Unmodifiable List<AbstractPermissionGroup<Permission>> getPermissionGroups(@NotNull Context context);
+
+    boolean inGroup(@NotNull AbstractPermissionGroup<Permission> permissionGroup, @NotNull Context context);
+
+    int wipeGroups(@NotNull Context context);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/Permission.java b/src/main/java/net/kissenpvp/paper/api/permission/Permission.java
new file mode 100644
index 0000000000000000000000000000000000000000..b312b1a1399c53241530592fe273c92d950e740c
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/Permission.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.AbstractPermission;
+
+public interface Permission extends AbstractPermission {
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PermissionEntry.java b/src/main/java/net/kissenpvp/paper/api/permission/PermissionEntry.java
new file mode 100644
index 0000000000000000000000000000000000000000..3ab028986aff06a68b8c07621468d60a588c8c2a
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PermissionEntry.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.event.EventCancelledException;
+import net.kissenpvp.core.api.permission.AbstractPermissionEntry;
+import net.kissenpvp.paper.api.base.Context;
+import org.bukkit.permissions.Permissible;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Optional;
+import java.util.Set;
+
+public interface PermissionEntry extends AbstractPermissionEntry<Permission>, Permissible {
+    @NotNull
+    Permission setPermission(@NotNull String permission, @NotNull Context context) throws EventCancelledException;
+
+    @NotNull
+    Permission setPermission(@NotNull String permission, boolean value, @NotNull Context context) throws EventCancelledException;
+
+    @NotNull
+    Permission setPermission(@NotNull Permission permission, @NotNull Context context) throws EventCancelledException;
+
+    boolean unsetPermission(@NotNull String permission, @NotNull Context context);
+
+    @NotNull @Unmodifiable Set<Permission> getPermissionList(@NotNull Context context);
+
+    @NotNull Optional<Permission> getPermission(@NotNull String permission, @NotNull Context context);
+
+    boolean hasPermission(@NotNull String permission, @NotNull Context context);
+
+    int wipePermissions(@NotNull Context context);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PermissionGroup.java b/src/main/java/net/kissenpvp/paper/api/permission/PermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..cddc81d990dc67fe28c7c4ea7ed5e7a6257eb582
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PermissionGroup.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.AbstractGroupablePermissionEntry;
+import net.kissenpvp.core.api.permission.AbstractPermissionGroup;
+import net.kissenpvp.paper.api.base.Context;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Set;
+
+public interface PermissionGroup extends AbstractPermissionGroup<Permission>, GroupablePermissionEntry
+{
+
+    @NotNull @Unmodifiable Set<String> getMember(@NotNull Context context);
+
+    @NotNull @Unmodifiable Set<String> getOwnMember(@NotNull Context context);
+
+    boolean addMember(@NotNull AbstractGroupablePermissionEntry<?> groupablePermissionEntry, @NotNull Context context);
+
+    boolean removeMember(@NotNull AbstractGroupablePermissionEntry<?> groupablePermissionEntry, @NotNull Context context);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PermissionGroupParser.java b/src/main/java/net/kissenpvp/paper/api/permission/PermissionGroupParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..4f1a59ab2c4d1a8197d9a749c64378faac269bc9
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PermissionGroupParser.java
@@ -0,0 +1,38 @@
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.permission.AbstractPermissionEntry;
+import net.kissenpvp.paper.api.command.ArgumentParser;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class PermissionGroupParser implements ArgumentParser<PermissionGroup> {
+    @Override
+    public @NotNull String serialize(@NotNull PermissionGroup object) {
+        return object.getPermissionID();
+    }
+
+    @Override
+    public @NotNull PermissionGroup deserialize(@NotNull String input) {
+        PermissionImplementation permission = Bukkit.getKissen().getImplementation(PermissionImplementation.class);
+        return permission.getGroupNotNull(input);
+    }
+
+    @Override
+    public @Nullable String argumentName() {
+        return "group";
+    }
+
+    @Override
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload) {
+        PermissionImplementation permission = Bukkit.getKissen().getImplementation(PermissionImplementation.class);
+        Stream<String> groupStream = permission.getGroups().stream().map(AbstractPermissionEntry::getPermissionID);
+        return groupStream.collect(Collectors.toUnmodifiableSet());
+    }
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PermissionImplementation.java b/src/main/java/net/kissenpvp/paper/api/permission/PermissionImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..5ff4be6b94ab22b65102ba6c94756a855e16359c
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PermissionImplementation.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.base.Implementation;
+import net.kissenpvp.core.api.event.EventCancelledException;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Optional;
+import java.util.Set;
+
+public interface PermissionImplementation extends Implementation {
+
+    @NotNull @Unmodifiable Set<PermissionGroup> getGroups();
+
+    @NotNull Optional<PermissionGroup> getGroup(@NotNull String group);
+
+    @NotNull
+    PermissionGroup getGroupNotNull(@NotNull String group) throws EventCancelledException;
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PermissionParser.java b/src/main/java/net/kissenpvp/paper/api/permission/PermissionParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..631cdaad6f8d567b5d63658548d0b775ebc87a6f
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PermissionParser.java
@@ -0,0 +1,63 @@
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.paper.api.command.ArgumentParser;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.permissions.Permission;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+public class PermissionParser implements ArgumentParser<PermissionParser.PermissionArgument>
+{
+    @Override
+    public @NotNull String serialize(@NotNull PermissionArgument object)
+    {
+        return object.permission();
+    }
+
+    @Override
+    public @NotNull PermissionArgument deserialize(@NotNull String input)
+    {
+        return new PermissionArgument(input);
+    }
+
+    @Override
+    public @Nullable String argumentName()
+    {
+        return "permission";
+    }
+
+    @Override
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        return Bukkit.getPluginManager().getPermissions().stream().map(Permission::getName).flatMap(currentPermission ->
+                {
+                    Set<String> data = new HashSet<>(currentPermission.length());
+                    for (String current : currentPermission.split(";"))
+                    {
+                        StringBuilder stringBuilder = new StringBuilder();
+                        String[] parts = current.split("\\.");
+                        for (int i = 0; i < parts.length - 1; i++) {
+
+                            if (!stringBuilder.isEmpty() && stringBuilder.charAt(stringBuilder.length() - 1) == '*') {
+                                stringBuilder.deleteCharAt(stringBuilder.length() - 1);
+                            }
+
+                            stringBuilder.append(parts[i]).append(".*");
+                            data.add(stringBuilder.toString());
+                        }
+                        data.add(current);
+                    }
+                    return data.stream();
+                }
+                ).collect(Collectors.toSet());
+    }
+
+    public record PermissionArgument(@Override String permission) {}
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PrivatePermissionGroup.java b/src/main/java/net/kissenpvp/paper/api/permission/PrivatePermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..5295623a2abbd79e33e0fef90aba288cf851e30b
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PrivatePermissionGroup.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.AbstractPermissionGroup;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+public interface PrivatePermissionGroup extends AbstractPermissionGroup<Permission>
+{
+    @NotNull Optional<AbstractPermissionGroup<Permission>> getPublicGroup();
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PublicPermissionGroup.java b/src/main/java/net/kissenpvp/paper/api/permission/PublicPermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..39b962adbb29b801bf5c0b48ef58b9d6c0653275
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PublicPermissionGroup.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import net.kissenpvp.core.api.permission.AbstractPermissionGroup;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+public interface PublicPermissionGroup extends AbstractPermissionGroup<Permission>
+{
+    @NotNull Optional<AbstractPermissionGroup<Permission>> getPrivateGroup();
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/user/playersetting/BoundPlayerSetting.java b/src/main/java/net/kissenpvp/paper/api/user/playersetting/BoundPlayerSetting.java
new file mode 100644
index 0000000000000000000000000000000000000000..de6f38a282105ee63a341eedc5888576da77b278
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/playersetting/BoundPlayerSetting.java
@@ -0,0 +1,17 @@
+package net.kissenpvp.paper.api.user.playersetting;
+
+import net.kissenpvp.core.api.user.exception.UnauthorizedException;
+import net.kissenpvp.core.api.user.playersettting.AbstractBoundPlayerSetting;
+import net.kissenpvp.paper.api.base.Context;
+import org.jetbrains.annotations.NotNull;
+
+public interface BoundPlayerSetting<T> extends AbstractBoundPlayerSetting<T> {
+
+    @NotNull
+    T setValue(@NotNull T value, @NotNull Context context) throws UnauthorizedException;
+
+    @NotNull T getValue(@NotNull Context context);
+
+    void reset(@NotNull Context context);
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/user/playersetting/PlayerSetting.java b/src/main/java/net/kissenpvp/paper/api/user/playersetting/PlayerSetting.java
new file mode 100644
index 0000000000000000000000000000000000000000..514edd942843b6afa13c00968f2dcf622e88e6ca
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/playersetting/PlayerSetting.java
@@ -0,0 +1,7 @@
+package net.kissenpvp.paper.api.user.playersetting;
+
+import net.kissenpvp.core.api.user.playersettting.AbstractPlayerSetting;
+import org.bukkit.OfflinePlayer;
+
+public interface PlayerSetting<T> extends AbstractPlayerSetting<T, OfflinePlayer> {
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/user/rank/PlayerRank.java b/src/main/java/net/kissenpvp/paper/api/user/rank/PlayerRank.java
new file mode 100644
index 0000000000000000000000000000000000000000..8fbfb700dfb082825bdf8a89d1a26899b394d3ad
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/rank/PlayerRank.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.AbstractPlayerRank;
+
+public interface PlayerRank extends AbstractPlayerRank<Rank> { }
diff --git a/src/main/java/net/kissenpvp/paper/api/user/rank/Rank.java b/src/main/java/net/kissenpvp/paper/api/user/rank/Rank.java
new file mode 100644
index 0000000000000000000000000000000000000000..b4f25bdbce2ee183ed61a29125c76c727936a685
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/rank/Rank.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.AbstractRank;
+import net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Set;
+
+public interface Rank extends AbstractRank
+{
+
+    @NotNull @Unmodifiable Set<PaperPlayerClient> getPlayers();
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/user/rank/RankImplementation.java b/src/main/java/net/kissenpvp/paper/api/user/rank/RankImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..bccf9dcfb4301c11dc754775a95013250ae21e39
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/rank/RankImplementation.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.AbstractRankImplementation;
+
+public interface RankImplementation extends AbstractRankImplementation<Rank> { }
diff --git a/src/main/java/net/kissenpvp/paper/api/user/rank/RankParser.java b/src/main/java/net/kissenpvp/paper/api/user/rank/RankParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..878a9d11bf308d9206022ea0e086bdccac43162b
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/user/rank/RankParser.java
@@ -0,0 +1,40 @@
+package net.kissenpvp.paper.api.user.rank;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.paper.api.command.ArgumentParser;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.stream.Collectors;
+
+public class RankParser implements ArgumentParser<Rank>
+{
+    @Override
+    public @NotNull String serialize(@NotNull Rank object)
+    {
+        return object.getName();
+    }
+
+    @Override
+    public @NotNull Rank deserialize(@NotNull String input)
+    {
+        RankImplementation rankImplementation = Bukkit.getKissen().getImplementation(RankImplementation.class);
+        return rankImplementation.getRank(input).orElseThrow(NullPointerException::new);
+    }
+
+    @Override
+    public @Nullable String argumentName()
+    {
+        return "rank";
+    }
+
+    @Override
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        RankImplementation rankImplementation = Bukkit.getKissen().getImplementation(RankImplementation.class);
+        return rankImplementation.getRankSet().stream().map(Rank::getName).collect(Collectors.toSet());
+    }
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 71f1c361ebccbe83193c37ec3a90faa4085001c3..e5197ed78c57be5237121b2c3d0fc5bceef4a598 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2907,4 +2907,17 @@ public final class Bukkit {
     public static Server.Spigot spigot() {
         return server.spigot();
     }
+
+    // Pulvinar start
+    private static net.kissenpvp.paper.api.base.PaperKissen kissen;
+    public static @org.jetbrains.annotations.NotNull net.kissenpvp.paper.api.base.PaperKissen getKissen() {
+        return kissen;
+    }
+    public static void setKissen(@NotNull net.kissenpvp.paper.api.base.PaperKissen kissen) {
+        if (Bukkit.kissen != null) {
+            throw new UnsupportedOperationException("Cannot redefine singleton Kissen");
+        }
+        Bukkit.kissen = kissen;
+    }
+    // Pulvinar end
 }
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index ef431219fd2bce48bad63b6b92c99d54348d480e..e2efae7fdcc7030b5fba0a2d6733c4095b208394 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.Nullable;
  * <p>
  * The use of {@link PluginBase} is recommended for actual Implementation
  */
-public interface Plugin extends TabExecutor, io.papermc.paper.plugin.lifecycle.event.LifecycleEventOwner { // Paper
+public interface Plugin extends TabExecutor, io.papermc.paper.plugin.lifecycle.event.LifecycleEventOwner, net.kissenpvp.core.api.base.plugin.KissenPlugin { // Paper  // Pulvinar
     /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 47153dee66782a00b980ecf15e8774ab6f3d887d..7eda2d7931eb6f2ed542a1ff6b04d4b5e2e48414 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -326,4 +326,11 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
     @org.jetbrains.annotations.ApiStatus.Experimental
     void overridePermissionManager(@NotNull Plugin plugin, @Nullable io.papermc.paper.plugin.PermissionManager permissionManager);
     // Paper end
+
+    // Pulvinar start
+
+    void registerSetting(@NotNull net.kissenpvp.core.api.config.Option<?, ?> setting, @NotNull Plugin plugin);
+
+    // Pulvinar end
+
 }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 07a9c9e254188c251165ca84c8e961fccda01175..ef2c29122649bc8cb7a420f0aca29664f9eec51c 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -990,4 +990,14 @@ public final class SimplePluginManager implements PluginManager {
         this.paperPluginManager.addPermissions(perm);
     }
     // Paper end
+
+    // Pulvinar start
+
+    @Override
+    public void registerSetting(@NotNull net.kissenpvp.core.api.config.Option<?, ?> setting, @NotNull Plugin plugin)
+    {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.core.api.config.ConfigurationImplementation.class).registerSetting(plugin, setting);
+    }
+
+    // Pulvinar end
 }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 34037d3da2c536bac088e0ff629ee8f1daccc65b..4b95d0e680a80fb8ecfa083523f4df20170a2a97 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -470,4 +470,11 @@ public abstract class JavaPlugin extends PluginBase {
         return this.lifecycleEventManager;
     }
     // Paper end - lifecycle events
+
+    // Pulvinar start
+    @Override
+    public @NotNull net.kissenpvp.core.api.base.Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+    // Pulvinar end
 }
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 7e4f7cb2afbc145e532285c793573ad107bc3033..5cdea21400ef131f6a290b37d5867bc7108636d1 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -32,7 +32,7 @@ import org.jetbrains.annotations.Nullable;
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
  */
 @org.jetbrains.annotations.ApiStatus.Internal // Paper
-public final class PluginClassLoader extends URLClassLoader implements io.papermc.paper.plugin.provider.classloader.ConfiguredPluginClassLoader { // Paper
+public final class PluginClassLoader extends URLClassLoader implements io.papermc.paper.plugin.provider.classloader.ConfiguredPluginClassLoader, net.kissenpvp.core.api.base.plugin.KissenPluginClassLoader  { // Paper
     private final JavaPluginLoader loader;
     private final Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
     private final PluginDescriptionFile description;
diff --git a/src/test/java/org/bukkit/plugin/TestPlugin.java b/src/test/java/org/bukkit/plugin/TestPlugin.java
index affe88cf8e98a787e197936f5fc443464a2343c6..a5d8251700c32d402d256306c05e91bb8475628e 100644
--- a/src/test/java/org/bukkit/plugin/TestPlugin.java
+++ b/src/test/java/org/bukkit/plugin/TestPlugin.java
@@ -140,4 +140,11 @@ public class TestPlugin extends PluginBase {
         throw new UnsupportedOperationException("Not supported.");
     }
     // Paper end - lifecycle events
+
+    // Pulvinar start
+    @Override
+    public net.kissenpvp.core.api.base.@org.jetbrains.annotations.NotNull Kissen getKissen() {
+        return org.bukkit.Bukkit.getKissen();
+    }
+    // Pulvinar end
 }
