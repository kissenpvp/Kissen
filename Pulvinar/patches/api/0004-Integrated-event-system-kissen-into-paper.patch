From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivo Quiring <falk.quiring@gmail.com>
Date: Mon, 12 Feb 2024 13:37:59 +0100
Subject: [PATCH] Integrated event system kissen into paper


diff --git a/src/main/java/co/aikar/timings/TimedEventExecutor.java b/src/main/java/co/aikar/timings/TimedEventExecutor.java
index 6fbc64e0f214d0c8e5afcbe385e414a4e1fe1c72..4638908a65b78ebbd02536c0cea41f21ccc48c4e 100644
--- a/src/main/java/co/aikar/timings/TimedEventExecutor.java
+++ b/src/main/java/co/aikar/timings/TimedEventExecutor.java
@@ -48,7 +48,7 @@ public class TimedEventExecutor implements EventExecutor {
      * @param method EventHandler method
      * @param eventClass Owning class
      */
-    public TimedEventExecutor(@NotNull EventExecutor executor, @NotNull Plugin plugin, @Nullable Method method, @NotNull Class<? extends Event> eventClass) {
+    public TimedEventExecutor(@NotNull EventExecutor executor, @NotNull Plugin plugin, @Nullable Method method, @NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> eventClass) { // Pulvinar - implement event system
         this.executor = executor;
         String id;
 
@@ -72,7 +72,7 @@ public class TimedEventExecutor implements EventExecutor {
     }
 
     @Override
-    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {
+    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException { // Pulvinar - implement event system
         if (event.isAsynchronous() || !Timings.timingsEnabled || !Bukkit.isPrimaryThread()) {
             executor.execute(listener, event);
             return;
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
index fbebf649e893cf872be9b27091146a7c2f451aca..b859714d1b6fdf54c339303f949961332d141e89 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
@@ -12,17 +12,17 @@ import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
 
 public class MethodHandleEventExecutor implements EventExecutor {
-    private final Class<? extends Event> eventClass;
+    private final Class<? extends net.kissenpvp.core.api.event.EventClass> eventClass;
     private final MethodHandle handle;
     private final Method method;
 
-    public MethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull MethodHandle handle) {
+    public MethodHandleEventExecutor(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> eventClass, @NotNull MethodHandle handle) { // Pulvinar start - integrate unified event system
         this.eventClass = eventClass;
         this.handle = handle;
         this.method = null;
     }
 
-    public MethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull Method m) {
+    public MethodHandleEventExecutor(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> eventClass, @NotNull Method m) { // Pulvinar start - integrate unified event system
         this.eventClass = eventClass;
         try {
             m.setAccessible(true);
@@ -34,7 +34,7 @@ public class MethodHandleEventExecutor implements EventExecutor {
     }
 
     @Override
-    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {
+    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException { // Pulvinar - implement event system
         if (!eventClass.isInstance(event)) return;
         try {
             handle.invoke(listener, event);
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
index 52da2d040e3b335f9e47bc5dc26e17d9c06d9569..bdd452e1358f71c0dc944844d1a1b8922126ccb8 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
@@ -8,6 +8,7 @@ import java.lang.reflect.Modifier;
 import com.destroystokyo.paper.util.SneakyThrow;
 import com.google.common.base.Preconditions;
 
+import net.kissenpvp.core.api.event.EventListener;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
 import org.bukkit.event.Listener;
@@ -15,11 +16,11 @@ import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
 
 public class StaticMethodHandleEventExecutor implements EventExecutor {
-    private final Class<? extends Event> eventClass;
+    private final Class<? extends net.kissenpvp.core.api.event.EventClass> eventClass;
     private final MethodHandle handle;
     private final Method method;
 
-    public StaticMethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull Method m) {
+    public StaticMethodHandleEventExecutor(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> eventClass, @NotNull Method m) { // Pulvinar start - integrate unified event system
         Preconditions.checkArgument(Modifier.isStatic(m.getModifiers()), "Not a static method: %s", m);
         Preconditions.checkArgument(eventClass != null, "eventClass is null");
         this.eventClass = eventClass;
@@ -33,7 +34,7 @@ public class StaticMethodHandleEventExecutor implements EventExecutor {
     }
 
     @Override
-    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {
+    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException { // Pulvinar - implement event system
         if (!eventClass.isInstance(event)) return;
         try {
             handle.invoke(event);
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
index 084c31af1a7ba32bb4c3dc8f16f67fd09ce0b6a4..2f0a23f887c6c276ec0727297f59448ca72a509c 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
@@ -13,7 +13,7 @@ import static org.objectweb.asm.Opcodes.*;
 
 public class ASMEventExecutorGenerator {
 
-    private static final String EXECUTE_DESCRIPTOR = "(Lorg/bukkit/event/Listener;Lorg/bukkit/event/Event;)V";
+    private static final String EXECUTE_DESCRIPTOR = "(Lorg/bukkit/event/Listener;Lorg/bukkit/event/Event;)V";//"(Lnet/kissenpvp/core/api/event/EventListener;Lnet/kissenpvp/core/api/event/EventClass;)V"; //"(Lorg/bukkit/event/Listener;Lorg/bukkit/event/Event;)V"; // Pulvinar - implement event system
 
     @NotNull
     public static byte[] generateEventExecutor(@NotNull Method m, @NotNull String name) {
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java b/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
index 410b24139535cd5d8439ad581c43c61b5757fbf6..e472a85949f036b1d8d13e53d7ba4405496b62f3 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
@@ -11,10 +11,10 @@ import static com.google.common.base.Preconditions.*;
  */
 public class ServerEventException extends ServerPluginException {
 
-    private final Listener listener;
-    private final Event event;
+    private final net.kissenpvp.core.api.event.EventListener<?> listener;
+    private final net.kissenpvp.core.api.event.EventClass event; // Pulvinar - implement event system
 
-    public ServerEventException(String message, Throwable cause, Plugin responsiblePlugin, Listener listener, Event event) {
+    public ServerEventException(String message, Throwable cause, Plugin responsiblePlugin, net.kissenpvp.core.api.event.EventListener<?> listener, net.kissenpvp.core.api.event.EventClass event) { // Pulvinar - implement event system
         super(message, cause, responsiblePlugin);
         this.listener = checkNotNull(listener, "listener");
         this.event = checkNotNull(event, "event");
@@ -37,7 +37,7 @@ public class ServerEventException extends ServerPluginException {
      *
      * @return event listener
      */
-    public Listener getListener() {
+    public net.kissenpvp.core.api.event.EventListener<?> /* Pulvinar - integrate unified event system */ getListener() {
         return listener;
     }
 
@@ -46,7 +46,7 @@ public class ServerEventException extends ServerPluginException {
      *
      * @return event
      */
-    public Event getEvent() {
+    public net.kissenpvp.core.api.event.EventClass /* Pulvinar - integrate unified event system */ getEvent() {
         return event;
     }
 }
diff --git a/src/main/java/org/bukkit/event/Listener.java b/src/main/java/org/bukkit/event/Listener.java
index ff083e62dadf4ab988f356c5871bbd6365d15b4b..2b2c9c530ecebc8c18bc48e50a96a7614a8311e0 100644
--- a/src/main/java/org/bukkit/event/Listener.java
+++ b/src/main/java/org/bukkit/event/Listener.java
@@ -1,6 +1,13 @@
 package org.bukkit.event;
 
+import net.kissenpvp.core.api.event.EventClass;
+import org.jetbrains.annotations.NotNull;
+
 /**
  * Simple interface for tagging all EventListeners
  */
-public interface Listener {}
+public interface Listener extends net.kissenpvp.core.api.event.EventListener<net.kissenpvp.core.api.event.EventClass> // Pulvinar - implement event system
+{
+    @Override
+    default void call(@NotNull EventClass event) {} // Pulvinar - implement event system
+}
diff --git a/src/main/java/org/bukkit/plugin/EventExecutor.java b/src/main/java/org/bukkit/plugin/EventExecutor.java
index 60e086be70529e0804280b24a2a3e7ae72d8d363..3281e86d6e04dee45df5d7329c804848fe088d0d 100644
--- a/src/main/java/org/bukkit/plugin/EventExecutor.java
+++ b/src/main/java/org/bukkit/plugin/EventExecutor.java
@@ -23,6 +23,14 @@ import com.google.common.base.Preconditions;
  * Interface which defines the class for event call backs to plugins
  */
 public interface EventExecutor {
+
+    // Pulvinar - implement event system
+    default void execute(net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull net.kissenpvp.core.api.event.EventClass event) throws EventException
+    {
+        execute((Listener) listener, (Event) event);
+    }
+    // Pulvinar -implement event system
+
     public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException;
 
     // Paper start
@@ -46,7 +54,7 @@ public interface EventExecutor {
     };
 
     @NotNull
-    public static EventExecutor create(@NotNull Method m, @NotNull Class<? extends Event> eventClass) {
+    public static EventExecutor create(@NotNull Method m, @NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> eventClass) {
         Preconditions.checkNotNull(m, "Null method");
         Preconditions.checkArgument(m.getParameterCount() != 0, "Incorrect number of arguments %s", m.getParameterCount());
         Preconditions.checkArgument(m.getParameterTypes()[0] == eventClass, "First parameter %s doesn't match event class %s", m.getParameterTypes()[0], eventClass);
diff --git a/src/main/java/org/bukkit/plugin/PluginLoader.java b/src/main/java/org/bukkit/plugin/PluginLoader.java
index cb530369e667c426c842da356c31304bb5c3ecfa..dde6518d0adc80feec198ef688a879db8171dac7 100644
--- a/src/main/java/org/bukkit/plugin/PluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/PluginLoader.java
@@ -58,7 +58,7 @@ public interface PluginLoader {
      * @return The registered listeners.
      */
     @NotNull
-    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull Plugin plugin);
+    public Map<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> createRegisteredListeners(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull Plugin plugin);
 
     /**
      * Enables the specified plugin
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 7eda2d7931eb6f2ed542a1ff6b04d4b5e2e48414..7b44b0fefcde0ab0d96704a56556fece26d56973 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -119,7 +119,43 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
      *     <i>Note: This is best-effort basis, and should not be used to test
      *     synchronized state. This is an indicator for flawed flow logic.</i>
      */
-    public void callEvent(@NotNull Event event) throws IllegalStateException;
+    public void callEvent(@NotNull net.kissenpvp.core.api.event.EventClass event) throws IllegalStateException; // Pulvinar - implement event system
+
+    // Pulvinar start - keep compatibility with plugins
+    default void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin)
+    {
+        registerEvents((net.kissenpvp.core.api.event.EventListener<?>) listener, plugin);
+    }
+
+    /**
+     * Registers the specified executor to the given event class
+     *
+     * @param event Event type to register
+     * @param listener Listener to register
+     * @param priority Priority to register this event at
+     * @param executor EventExecutor to register
+     * @param plugin Plugin to register
+     */
+    default void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin)
+    {
+        registerEvent((Class<? extends net.kissenpvp.core.api.event.EventClass>) event, listener, priority, executor, plugin);
+    }
+
+    /**
+     * Registers the specified executor to the given event class
+     *
+     * @param event Event type to register
+     * @param listener Listener to register
+     * @param priority Priority to register this event at
+     * @param executor EventExecutor to register
+     * @param plugin Plugin to register
+     * @param ignoreCancelled Whether to pass cancelled events or not
+     */
+    default void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled)
+    {
+        registerEvent((Class<? extends net.kissenpvp.core.api.event.EventClass>) event, listener, priority, executor, plugin, ignoreCancelled);
+    }
+    // Pulvinar end - keep compatibility with plugins
 
     /**
      * Registers all the events in the given listener class
@@ -127,7 +163,7 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
      * @param listener Listener to register
      * @param plugin Plugin to register
      */
-    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin);
+    public void registerEvents(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull Plugin plugin); // Pulvinar - implement event system
 
     /**
      * Registers the specified executor to the given event class
@@ -138,7 +174,7 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
      * @param executor EventExecutor to register
      * @param plugin Plugin to register
      */
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin);
+    public void registerEvent(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin); // Pulvinar - implement event system
 
     /**
      * Registers the specified executor to the given event class
@@ -150,7 +186,7 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
      * @param plugin Plugin to register
      * @param ignoreCancelled Whether to pass cancelled events or not
      */
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled);
+    public void registerEvent(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled); // Pulvinar - implement event system
 
     /**
      * Enables the specified plugin
@@ -328,9 +364,6 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
     // Paper end
 
     // Pulvinar start
-
     void registerSetting(@NotNull net.kissenpvp.core.api.config.Option<?, ?> setting, @NotNull Plugin plugin);
-
     // Pulvinar end
-
 }
diff --git a/src/main/java/org/bukkit/plugin/RegisteredListener.java b/src/main/java/org/bukkit/plugin/RegisteredListener.java
index 3b3d9642a8d63798dc28f2f8df77f0466451cbff..1b6df2e7e18f14fc6e5b6c0dd1eb9686cdf76949 100644
--- a/src/main/java/org/bukkit/plugin/RegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/RegisteredListener.java
@@ -11,13 +11,13 @@ import org.jetbrains.annotations.NotNull;
  * Stores relevant information for plugin listeners
  */
 public class RegisteredListener {
-    private final Listener listener;
+    private final net.kissenpvp.core.api.event.EventListener<?> listener; // Pulvinar - implement event system
     private final EventPriority priority;
     private final Plugin plugin;
     private final EventExecutor executor;
     private final boolean ignoreCancelled;
 
-    public RegisteredListener(@NotNull final Listener listener, @NotNull final EventExecutor executor, @NotNull final EventPriority priority, @NotNull final Plugin plugin, final boolean ignoreCancelled) {
+    public RegisteredListener(@NotNull final net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull final EventExecutor executor, @NotNull final EventPriority priority, @NotNull final Plugin plugin, final boolean ignoreCancelled) { // Pulvinar - implement event system
         this.listener = listener;
         this.priority = priority;
         this.plugin = plugin;
@@ -31,9 +31,9 @@ public class RegisteredListener {
      * @return Registered Listener
      */
     @NotNull
-    public Listener getListener() {
+    public net.kissenpvp.core.api.event.EventListener<?> getListener() {
         return listener;
-    }
+    } // Pulvinar - implement event system
 
     /**
      * Gets the plugin for this registration
@@ -61,7 +61,7 @@ public class RegisteredListener {
      * @param event The event
      * @throws EventException If an event handler throws an exception.
      */
-    public void callEvent(@NotNull final Event event) throws EventException {
+    public void callEvent(@NotNull final net.kissenpvp.core.api.event.EventClass event) throws EventException {
         if (event instanceof Cancellable) {
             if (((Cancellable) event).isCancelled() && isIgnoringCancelled()) {
                 return;
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index a4a2eecfb5dc75d2239ddbe431900f4816606198..4270167e7ea3ae5bb25c0ee66525fcc67e357c9a 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -623,7 +623,7 @@ public final class SimplePluginManager implements PluginManager {
      * @param event Event details
      */
     @Override
-    public void callEvent(@NotNull Event event) {
+    public void callEvent(@NotNull net.kissenpvp.core.api.event.EventClass event) { // Pulvinar - implement event system
         if (true) {this.paperPluginManager.callEvent(event); return;} // Paper
         if (event.isAsynchronous()) {
             if (Thread.holdsLock(this)) {
@@ -638,10 +638,10 @@ public final class SimplePluginManager implements PluginManager {
             }
         }
 
-        fireEvent(event);
+        // fireEvent(event); // Pulvinar - implement event system
     }
 
-    private void fireEvent(@NotNull Event event) {
+    /*private void fireEvent(@NotNull Event event) {
         HandlerList handlers = event.getHandlers();
         RegisteredListener[] listeners = handlers.getRegisteredListeners();
 
@@ -675,23 +675,22 @@ public final class SimplePluginManager implements PluginManager {
                 // Paper end
             }
         }
-    }
+    }*/ // Pulvinar - implement event system
 
     @Override
-    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin) {
+    public void registerEvents(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull Plugin plugin) { // Pulvinar - implement event system
         if (true) {this.paperPluginManager.registerEvents(listener, plugin); return;} // Paper
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + listener + " while not enabled");
         }
 
-        for (Map.Entry<Class<? extends Event>, Set<RegisteredListener>> entry : plugin.getPluginLoader().createRegisteredListeners(listener, plugin).entrySet()) {
+        for (Map.Entry<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> entry : plugin.getPluginLoader().createRegisteredListeners(listener, plugin).entrySet()) { // Pulvinar - implement event system
             getEventListeners(getRegistrationClass(entry.getKey())).registerAll(entry.getValue());
         }
-
     }
 
     @Override
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) {
+    public void registerEvent(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) { // Pulvinar - implement event system
         registerEvent(event, listener, priority, executor, plugin, false);
     }
 
@@ -708,7 +707,7 @@ public final class SimplePluginManager implements PluginManager {
      *     cancelled
      */
     @Override
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) {
+    public void registerEvent(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) { // Pulvinar - implement event system
         Preconditions.checkArgument(listener != null, "Listener cannot be null");
         Preconditions.checkArgument(priority != null, "Priority cannot be null");
         Preconditions.checkArgument(executor != null, "Executor cannot be null");
@@ -728,7 +727,7 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @NotNull
-    private HandlerList getEventListeners(@NotNull Class<? extends Event> type) {
+    private HandlerList getEventListeners(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> type) { // Pulvinar - implement event system
         try {
             Method method = getRegistrationClass(type).getDeclaredMethod("getHandlerList");
             method.setAccessible(true);
@@ -744,7 +743,7 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @NotNull
-    private Class<? extends Event> getRegistrationClass(@NotNull Class<? extends Event> clazz) {
+    private Class<? extends net.kissenpvp.core.api.event.EventClass> getRegistrationClass(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> clazz) { // Pulvinar - implement event system
         try {
             clazz.getDeclaredMethod("getHandlerList");
             return clazz;
@@ -752,7 +751,7 @@ public final class SimplePluginManager implements PluginManager {
             if (clazz.getSuperclass() != null
                     && !clazz.getSuperclass().equals(Event.class)
                     && Event.class.isAssignableFrom(clazz.getSuperclass())) {
-                return getRegistrationClass(clazz.getSuperclass().asSubclass(Event.class));
+                return getRegistrationClass(clazz.getSuperclass().asSubclass(net.kissenpvp.core.api.event.EventClass.class)); // Pulvinar - implement event system
             } else {
                 throw new IllegalPluginAccessException("Unable to find handler list for event " + clazz.getName() + ". Static getHandlerList method required!");
             }
diff --git a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
index 1d76e30b82ca56bb4cf3b9a33f5a129ab829e3f0..cda89842869083b5594298ce7976ae91e8ca48d3 100644
--- a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
@@ -13,21 +13,21 @@ import org.jetbrains.annotations.Nullable;
 public class TimedRegisteredListener extends RegisteredListener {
     private int count;
     private long totalTime;
-    private Class<? extends Event> eventClass;
+    private Class<? extends net.kissenpvp.core.api.event.EventClass> eventClass; // Pulvinar - implement event system
     private boolean multiple = false;
 
-    public TimedRegisteredListener(@NotNull final Listener pluginListener, @NotNull final EventExecutor eventExecutor, @NotNull final EventPriority eventPriority, @NotNull final Plugin registeredPlugin, final boolean listenCancelled) {
+    public TimedRegisteredListener(@NotNull final net.kissenpvp.core.api.event.EventListener<?> pluginListener, @NotNull final EventExecutor eventExecutor, @NotNull final EventPriority eventPriority, @NotNull final Plugin registeredPlugin, final boolean listenCancelled) {
         super(pluginListener, eventExecutor, eventPriority, registeredPlugin, listenCancelled);
     }
 
     @Override
-    public void callEvent(@NotNull Event event) throws EventException {
+    public void callEvent(@NotNull net.kissenpvp.core.api.event.EventClass event) throws EventException { // Pulvinar - implement event system
         if (event.isAsynchronous()) {
             super.callEvent(event);
             return;
         }
         count++;
-        Class<? extends Event> newEventClass = event.getClass();
+        Class<? extends net.kissenpvp.core.api.event.EventClass> newEventClass = event.getClass(); // Pulvinar - implement event system
         if (this.eventClass == null) {
             this.eventClass = newEventClass;
         } else if (!this.eventClass.equals(newEventClass)) {
@@ -85,7 +85,7 @@ public class TimedRegisteredListener extends RegisteredListener {
      * @return the event class handled by this RegisteredListener
      */
     @Nullable
-    public Class<? extends Event> getEventClass() {
+    public Class<? extends net.kissenpvp.core.api.event.EventClass> getEventClass() {
         return eventClass;
     }
 
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index f1e58639213be0c43cd2ff090b625e7d0a67e8be..aeff8b3fbdaf192b5002c31b54c36bda5cb8cb7b 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -229,12 +229,12 @@ public final class JavaPluginLoader implements PluginLoader {
 
     @Override
     @NotNull
-    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull final Plugin plugin) {
+    public Map<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> createRegisteredListeners(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull final Plugin plugin) { // Pulvinar - implement event system
         Preconditions.checkArgument(plugin != null, "Plugin can not be null");
         Preconditions.checkArgument(listener != null, "Listener can not be null");
 
         boolean useTimings = server.getPluginManager().useTimings();
-        Map<Class<? extends Event>, Set<RegisteredListener>> ret = new HashMap<Class<? extends Event>, Set<RegisteredListener>>();
+        Map<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> ret = new HashMap<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>>(); // Pulvinar - implement event system
         Set<Method> methods;
         try {
             Method[] publicMethods = listener.getClass().getMethods();
