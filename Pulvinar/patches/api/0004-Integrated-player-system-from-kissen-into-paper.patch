From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Mon, 11 Sep 2023 01:08:59 +0200
Subject: [PATCH] Integrated player system from kissen into paper


diff --git a/src/main/java/net/kissenpvp/paper/api/networking/PaperNetworkImplementation.java b/src/main/java/net/kissenpvp/paper/api/networking/PaperNetworkImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..ce61bd83bfcfb2dc09764f89b9bd1d1f48728e02
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/networking/PaperNetworkImplementation.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.networking;
+
+import net.kissenpvp.core.api.networking.NetworkImplementation;
+import net.kissenpvp.core.api.networking.socket.DataPackage;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+
+public interface PaperNetworkImplementation extends NetworkImplementation
+{
+
+    boolean sendDataPackage(@NotNull DataPackage dataPackage);
+
+    @Nullable DataPackage sendAnsweredDataPackage(@NotNull DataPackage dataPackage);
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperOnlinePlayerClient.java b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperOnlinePlayerClient.java
new file mode 100644
index 0000000000000000000000000000000000000000..31072db8ac04fdb0b88a56d536e09252e445d5c1
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperOnlinePlayerClient.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.networking.client.entity;
+
+import net.kissenpvp.core.api.networking.client.entitiy.OnlinePlayerClient;
+import net.kissenpvp.paper.api.ban.Punishment;
+import net.kissenpvp.paper.api.permission.Permission;
+import net.kissenpvp.paper.api.user.rank.PlayerRank;
+
+public interface PaperOnlinePlayerClient extends OnlinePlayerClient<Permission, PlayerRank, Punishment> {
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java
new file mode 100644
index 0000000000000000000000000000000000000000..ffdae4ff457817ab23a14f27572a47361f7bf116
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/networking/client/entity/PaperPlayerClient.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.networking.client.entity;
+
+import net.kissenpvp.core.api.networking.client.entitiy.PlayerClient;
+import net.kissenpvp.core.api.networking.client.entitiy.ServerEntity;
+import net.kissenpvp.core.api.time.AccurateDuration;
+import net.kissenpvp.core.api.user.User;
+import net.kissenpvp.paper.api.base.Context;
+import net.kissenpvp.paper.api.permission.PaperPermissible;
+import net.kissenpvp.paper.api.permission.PermissibleOverriddenException;
+import net.kissenpvp.paper.api.user.playersetting.BoundPlayerSetting;
+import net.kissenpvp.paper.api.user.playersetting.PlayerSetting;
+import net.kissenpvp.paper.api.user.rank.PlayerRank;
+import net.kyori.adventure.text.Component;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.List;
+import java.util.Set;
+
+
+public interface PaperPlayerClient extends PlayerClient<PlayerRank, Punishment> {
+
+    @NotNull @Unmodifiable Set<@NotNull PaperOnlinePlayerClient> getOnlineAltAccounts();
+
+    @NotNull
+    AccurateDuration getOnlineTime(@NotNull Context context);
+
+    @NotNull User getUser(@NotNull Context context);
+
+    @NotNull PaperPermissible getPermissible() throws PermissibleOverriddenException;
+
+    <X> @NotNull BoundPlayerSetting<X> getSetting(@NotNull Class<? extends PlayerSetting<X>> settingClass);
+
+    <X> @NotNull BoundPlayerSetting<X> getSetting(@NotNull Class<? extends PlayerSetting<X>> settingClass, @NotNull Context context);
+
+    @NotNull Warn warn(@NotNull Ban ban, @NotNull ServerEntity warnOperator);
+
+    @NotNull Warn warn(@NotNull Ban ban, @NotNull ServerEntity warnOperator, @Nullable Component reason);
+
+    @NotNull @Unmodifiable List<Warn> getWarnHistory();
+
+    void clearActiveWarns();
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissible.java b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissible.java
new file mode 100644
index 0000000000000000000000000000000000000000..3b7def2bcddf00f6a5ce533eea99577f546faa9e
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PaperPermissible.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+import org.bukkit.permissions.Permissible;
+
+public interface PaperPermissible extends Permissible, PermissionEntry {
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PermissibleOverriddenException.java b/src/main/java/net/kissenpvp/paper/api/permission/PermissibleOverriddenException.java
new file mode 100644
index 0000000000000000000000000000000000000000..f4003d7ada0ed5573ad4d3d6e0b25aec243ae805
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PermissibleOverriddenException.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.permission;
+
+public class PermissibleOverriddenException extends IllegalStateException {
+} // LuckPerms, I know where you live
diff --git a/src/main/java/net/kissenpvp/paper/api/permission/PermissionParser.java b/src/main/java/net/kissenpvp/paper/api/permission/PermissionParser.java
index 631cdaad6f8d567b5d63658548d0b775ebc87a6f..1cf13ed2c7e87a6f0c85d8a177f867cbb7d3f6a8 100644
--- a/src/main/java/net/kissenpvp/paper/api/permission/PermissionParser.java
+++ b/src/main/java/net/kissenpvp/paper/api/permission/PermissionParser.java
@@ -7,57 +7,60 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.permissions.Permission;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
 
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.stream.Collectors;
 
-public class PermissionParser implements ArgumentParser<PermissionParser.PermissionArgument>
-{
+public class PermissionParser implements ArgumentParser<PermissionParser.PermissionArgument> {
+
+    private static void handleArgument(@NotNull String current, @NotNull Set<String> data) { //TODO enhance implementation
+        StringBuilder stringBuilder = new StringBuilder();
+        String[] parts = current.split("\\.");
+        for (int i = 0; i < parts.length - 1; i++) {
+
+            if (!stringBuilder.isEmpty() && stringBuilder.charAt(stringBuilder.length() - 1)=='*') {
+                stringBuilder.deleteCharAt(stringBuilder.length() - 1);
+            }
+
+            stringBuilder.append(parts[i]).append(".*");
+            data.add(stringBuilder.toString());
+        }
+        data.add(current);
+    }
+
     @Override
-    public @NotNull String serialize(@NotNull PermissionArgument object)
-    {
+    public @NotNull String serialize(@NotNull PermissionArgument object) {
         return object.permission();
     }
 
     @Override
-    public @NotNull PermissionArgument deserialize(@NotNull String input)
-    {
+    public @NotNull PermissionArgument deserialize(@NotNull String input) {
         return new PermissionArgument(input);
     }
 
     @Override
-    public @Nullable String argumentName()
-    {
+    public @Nullable String argumentName() {
         return "permission";
     }
 
     @Override
-    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload)
-    {
-        return Bukkit.getPluginManager().getPermissions().stream().map(Permission::getName).flatMap(currentPermission ->
-                {
-                    Set<String> data = new HashSet<>(currentPermission.length());
-                    for (String current : currentPermission.split(";"))
-                    {
-                        StringBuilder stringBuilder = new StringBuilder();
-                        String[] parts = current.split("\\.");
-                        for (int i = 0; i < parts.length - 1; i++) {
-
-                            if (!stringBuilder.isEmpty() && stringBuilder.charAt(stringBuilder.length() - 1) == '*') {
-                                stringBuilder.deleteCharAt(stringBuilder.length() - 1);
-                            }
-
-                            stringBuilder.append(parts[i]).append(".*");
-                            data.add(stringBuilder.toString());
-                        }
-                        data.add(current);
-                    }
-                    return data.stream();
-                }
-                ).collect(Collectors.toSet());
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload) {
+        return getPermissionNames().stream().flatMap(permission -> {
+            Set<String> data = new HashSet<>(permission.length());
+            for (String current : permission.split(";")) {
+                handleArgument(current, data);
+            }
+            return data.stream();
+        }).collect(Collectors.toUnmodifiableSet());
+    }
+
+    private @NotNull @Unmodifiable Set<String> getPermissionNames() {
+        return Bukkit.getPluginManager().getPermissions().stream().map(Permission::getName).collect(Collectors.toUnmodifiableSet());
     }
 
-    public record PermissionArgument(@Override String permission) {}
+    public record PermissionArgument(@NotNull String permission) {
+    }
 }
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index 30298a629b39bd43ce14b414fc697b2dfcbea89c..45758755d26f05787a65436b1f90f686bd0e8144 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -19,7 +19,7 @@ import org.jetbrains.annotations.Nullable;
  * player that is stored on the disk and can, thus, be retrieved without the
  * player needing to be online.
  */
-public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable {
+public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable, net.kissenpvp.paper.api.networking.client.entity.PaperPlayerClient, net.kissenpvp.paper.api.permission.GroupablePermissionEntry { // Pulvinar
 
     /**
      * Checks if this player is currently online
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index 04e7cd0e4e2d0eb38fb2862ce6688a4470f30d6b..8f5549fddef170ec45152084e4c73dcae7542ea6 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -1,6 +1,7 @@
 package org.bukkit.command;
 
 import java.util.UUID;
+
 import net.kyori.adventure.audience.MessageType;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.Component;
@@ -9,7 +10,7 @@ import org.bukkit.permissions.Permissible;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper
+public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible, net.kissenpvp.core.api.networking.client.entitiy.ServerEntity { // Paper // Pulvinar
 
     /**
      * Sends this sender a message
@@ -200,4 +201,11 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
         this.sendMessage(new net.md_5.bungee.api.chat.TextComponent(components).toLegacyText());
     }
     // Paper end
+
+    // Pulvinar start
+    @Override
+    default @NotNull Component displayName() {
+        return name();
+    }
+    // Pulvinar end
 }
diff --git a/src/main/java/org/bukkit/command/ConsoleCommandSender.java b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
index f309c2ed39bcc700e5b491ff549bf0608a07aab8..d105bce3788d1bef72fc8426b9bb40e5ca79c0e6 100644
--- a/src/main/java/org/bukkit/command/ConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
@@ -2,5 +2,5 @@ package org.bukkit.command;
 
 import org.bukkit.conversations.Conversable;
 
-public interface ConsoleCommandSender extends CommandSender, Conversable {
+public interface ConsoleCommandSender extends CommandSender, Conversable, net.kissenpvp.core.api.networking.client.entitiy.ConsoleClient { // Pulvinar
 }
diff --git a/src/main/java/org/bukkit/command/MessageCommandSender.java b/src/main/java/org/bukkit/command/MessageCommandSender.java
index 9d263ab3afb938c215c0b64d9171345fca6ceb2c..8bff00621e832309de09636571b85222585929be 100644
--- a/src/main/java/org/bukkit/command/MessageCommandSender.java
+++ b/src/main/java/org/bukkit/command/MessageCommandSender.java
@@ -132,4 +132,25 @@ public interface MessageCommandSender extends CommandSender {
         throw new UnsupportedOperationException();
     }
 
+    // Pulvinar start
+    @Override
+    default @NotNull java.util.Locale getCurrentLocale() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default @NotNull net.kyori.adventure.text.Component displayName() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default boolean isConnected() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default boolean isClient() {
+        throw new UnsupportedOperationException();
+    }
+    // Pulvinar end
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 6c327a07bf8a6aa11a2d7dad12b2830acc539484..a0be26df8e4ce610984549e21e8906682ea5c87f 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -56,7 +56,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents a player, connected or not
  */
-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient { // Paper
+public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient, net.kissenpvp.paper.api.networking.client.entity.PaperOnlinePlayerClient { // Paper // Pulvinar
 
     // Paper start
     @Override
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 1aba6c985668b0e9cca15415a75b4431dcce35d0..b1685106416ea369d67aa53554cd4cf5dfdb827f 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -328,9 +328,8 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
     // Paper end
 
     // Pulvinar start
-
     void registerSetting(@NotNull net.kissenpvp.core.api.config.Option<?, ?> setting, @NotNull Plugin plugin);
 
+    void registerPlayerSetting(@NotNull net.kissenpvp.core.api.user.playersettting.AbstractPlayerSetting<?, ? extends org.bukkit.OfflinePlayer> playerSetting, @NotNull Plugin plugin);
     // Pulvinar end
-
 }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index c2bf2252c4d9eb223c69bc059d55a4190a2e7490..22ef2c2bd3f3e5f0f72003195d8327052385e03a 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -991,12 +991,15 @@ public final class SimplePluginManager implements PluginManager {
     // Paper end
 
     // Pulvinar start
-
     @Override
     public void registerSetting(@NotNull net.kissenpvp.core.api.config.Option<?, ?> setting, @NotNull Plugin plugin)
     {
         org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.core.api.config.ConfigurationImplementation.class).registerSetting(plugin, setting);
     }
 
+    @Override
+    public void registerPlayerSetting(@NotNull net.kissenpvp.core.api.user.playersettting.AbstractPlayerSetting<?, ? extends org.bukkit.OfflinePlayer> playerSetting, @NotNull Plugin plugin) {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.core.api.user.UserImplementation.class).registerPlayerSetting(plugin, playerSetting);
+    }
     // Pulvinar end
 }
diff --git a/src/main/java/org/bukkit/profile/PlayerProfile.java b/src/main/java/org/bukkit/profile/PlayerProfile.java
index d36b3e3c7e53840132011add365ca2a26d799064..c04b6c883cb46f6283aea44248c28b74527edb65 100644
--- a/src/main/java/org/bukkit/profile/PlayerProfile.java
+++ b/src/main/java/org/bukkit/profile/PlayerProfile.java
@@ -100,4 +100,8 @@ public interface PlayerProfile extends Cloneable, ConfigurationSerializable {
 
     @NotNull
     PlayerProfile clone();
+
+    // Pulvinar start
+    @NotNull net.kissenpvp.core.api.user.User getUser();
+    // Pulvinar end
 }
