From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Mon, 11 Sep 2023 01:08:59 +0200
Subject: [PATCH] Implemented api endpoints the kissen player system


diff --git a/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java b/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
index acff2ff570f8419ffa4dfefe890795c63d75325d..6986bb9572d4167d5030d9e1951fc96346c7409b 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
@@ -498,5 +498,12 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
         public @NotNull Map<String, Object> serialize() {
             throw new UnsupportedOperationException();
         }
+
+        // Pulvinar start
+        @Override
+        public @NotNull net.kissenpvp.core.api.user.User getUser() {
+            throw new UnsupportedOperationException();
+        }
+        // Pulvinar start
     }
 }
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/networking/PaperNetworkImplementation.java b/src/main/java/net/kissenpvp/pulvinar/api/networking/PaperNetworkImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..eb86fc35ba2ac1e7c2fe4ad0e4a0fd1b8820c8be
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/networking/PaperNetworkImplementation.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.networking;
+
+import net.kissenpvp.core.api.networking.NetworkImplementation;
+import net.kissenpvp.core.api.networking.socket.DataPackage;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+
+public interface PaperNetworkImplementation extends NetworkImplementation
+{
+
+    boolean sendDataPackage(@NotNull DataPackage dataPackage);
+
+    @Nullable DataPackage sendAnsweredDataPackage(@NotNull DataPackage dataPackage);
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/networking/client/entity/PulvinarOnlinePlayerClient.java b/src/main/java/net/kissenpvp/pulvinar/api/networking/client/entity/PulvinarOnlinePlayerClient.java
new file mode 100644
index 0000000000000000000000000000000000000000..c6408fb8e66dc4211aace345150976162230d5f5
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/networking/client/entity/PulvinarOnlinePlayerClient.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.networking.client.entity;
+
+import net.kissenpvp.core.api.networking.client.entitiy.OnlinePlayerClient;
+import net.kissenpvp.pulvinar.api.ban.Punishment;
+import net.kissenpvp.pulvinar.api.permission.Permission;
+import net.kissenpvp.pulvinar.api.user.rank.PlayerRank;
+
+public interface PulvinarOnlinePlayerClient extends OnlinePlayerClient<Permission, PlayerRank, Punishment> {
+
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/networking/client/entity/PulvinarPlayerClient.java b/src/main/java/net/kissenpvp/pulvinar/api/networking/client/entity/PulvinarPlayerClient.java
new file mode 100644
index 0000000000000000000000000000000000000000..cccb508701012e50dd41764950db1e8e1fdcd42f
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/networking/client/entity/PulvinarPlayerClient.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.networking.client.entity;
+
+import net.kissenpvp.core.api.networking.client.entitiy.PlayerClient;
+import net.kissenpvp.core.api.time.AccurateDuration;
+import net.kissenpvp.core.api.user.User;
+import net.kissenpvp.pulvinar.api.permission.PaperPermissible;
+import net.kissenpvp.pulvinar.api.permission.PermissibleOverriddenException;
+import net.kissenpvp.pulvinar.api.base.Context;
+import net.kissenpvp.pulvinar.api.user.playersetting.BoundPlayerSetting;
+import net.kissenpvp.pulvinar.api.user.playersetting.PlayerSetting;
+import net.kissenpvp.pulvinar.api.user.rank.PlayerRank;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Set;
+
+public interface PulvinarPlayerClient extends PlayerClient<PlayerRank, Punishment> {
+
+    @NotNull @Unmodifiable Set<@NotNull PulvinarOnlinePlayerClient> getOnlineAltAccounts();
+
+    @NotNull
+    AccurateDuration getOnlineTime(@NotNull Context context);
+
+    @NotNull User getUser(@NotNull Context context);
+
+    @NotNull
+    PaperPermissible getPermissible() throws PermissibleOverriddenException;
+
+    <X> @NotNull BoundPlayerSetting<X> getSetting(@NotNull Class<? extends PlayerSetting<X>> settingClass);
+
+    <X> @NotNull BoundPlayerSetting<X> getSetting(@NotNull Class<? extends PlayerSetting<X>> settingClass, @NotNull Context context);
+
+
+    void clearActiveWarns();
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/permission/GroupablePermissionEntry.java b/src/main/java/net/kissenpvp/pulvinar/api/permission/GroupablePermissionEntry.java
new file mode 100644
index 0000000000000000000000000000000000000000..954c68dc9526db29395cd236f0f89ae6f64fee00
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/permission/GroupablePermissionEntry.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.permission;
+
+import net.kissenpvp.core.api.permission.AbstractGroupablePermissionEntry;
+import net.kissenpvp.core.api.permission.AbstractPermissionGroup;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.List;
+import java.util.Optional;
+import java.util.Set;
+
+public interface GroupablePermissionEntry extends AbstractGroupablePermissionEntry<Permission>, PermissionEntry {
+    @NotNull @Unmodifiable Set<Permission> getOwnPermissions(@NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    @NotNull Optional<Permission> getOwnPermission(@NotNull String permission, @NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    @NotNull @Unmodifiable List<AbstractPermissionGroup<Permission>> getOwnPermissionsGroups(@NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    @NotNull @Unmodifiable List<AbstractPermissionGroup<Permission>> getPermissionGroups(@NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    boolean inGroup(@NotNull AbstractPermissionGroup<Permission> permissionGroup, @NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    int wipeGroups(@NotNull net.kissenpvp.pulvinar.api.base.Context context);
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/permission/PaperPermissible.java b/src/main/java/net/kissenpvp/pulvinar/api/permission/PaperPermissible.java
new file mode 100644
index 0000000000000000000000000000000000000000..4a2693db561658feddbb427221897cca06226a21
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/permission/PaperPermissible.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.permission;
+
+import org.bukkit.permissions.Permissible;
+
+public interface PaperPermissible extends Permissible, PermissionEntry {
+
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissibleOverriddenException.java b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissibleOverriddenException.java
new file mode 100644
index 0000000000000000000000000000000000000000..1fe4272d0d34f632808d4e9df8ed03d87e661b73
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissibleOverriddenException.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.permission;
+
+public class PermissibleOverriddenException extends IllegalStateException {
+} // LuckPerms, I know where you live
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/permission/Permission.java b/src/main/java/net/kissenpvp/pulvinar/api/permission/Permission.java
new file mode 100644
index 0000000000000000000000000000000000000000..0da6c83573a43e1750cbb99e9cdd84dcedcec210
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/permission/Permission.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.permission;
+
+import net.kissenpvp.core.api.permission.AbstractPermission;
+
+public interface Permission extends AbstractPermission {
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionEntry.java b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionEntry.java
new file mode 100644
index 0000000000000000000000000000000000000000..03ec2ee022d4d06e71e6e610ba270a23d7dfc70d
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionEntry.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.permission;
+
+import net.kissenpvp.core.api.event.EventCancelledException;
+import net.kissenpvp.core.api.permission.AbstractPermissionEntry;
+import org.bukkit.permissions.Permissible;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Optional;
+import java.util.Set;
+
+public interface PermissionEntry extends AbstractPermissionEntry<Permission>, Permissible {
+    @NotNull
+    Permission setPermission(@NotNull String permission, @NotNull net.kissenpvp.pulvinar.api.base.Context context) throws EventCancelledException;
+
+    @NotNull
+    Permission setPermission(@NotNull String permission, boolean value, @NotNull net.kissenpvp.pulvinar.api.base.Context context) throws EventCancelledException;
+
+    @NotNull
+    Permission setPermission(@NotNull Permission permission, @NotNull net.kissenpvp.pulvinar.api.base.Context context) throws EventCancelledException;
+
+    boolean unsetPermission(@NotNull String permission, @NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    @NotNull @Unmodifiable Set<Permission> getPermissionList(@NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    @NotNull Optional<Permission> getPermission(@NotNull String permission, @NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    boolean hasPermission(@NotNull String permission, @NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    int wipePermissions(@NotNull net.kissenpvp.pulvinar.api.base.Context context);
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionGroup.java b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..08d8f8ef30340ecb3912099419bb7eb3ea877146
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionGroup.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.permission;
+
+import net.kissenpvp.core.api.permission.AbstractGroupablePermissionEntry;
+import net.kissenpvp.core.api.permission.AbstractPermissionGroup;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Set;
+
+public interface PermissionGroup extends AbstractPermissionGroup<Permission>, GroupablePermissionEntry
+{
+
+    @NotNull @Unmodifiable Set<String> getMember(@NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    @NotNull @Unmodifiable Set<String> getOwnMember(@NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    boolean addMember(@NotNull AbstractGroupablePermissionEntry<?> groupablePermissionEntry, @NotNull net.kissenpvp.pulvinar.api.base.Context context);
+
+    boolean removeMember(@NotNull AbstractGroupablePermissionEntry<?> groupablePermissionEntry, @NotNull net.kissenpvp.pulvinar.api.base.Context context);
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionGroupParser.java b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionGroupParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..915db6025f7c5d4344a67bebd2080a38d96765d5
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionGroupParser.java
@@ -0,0 +1,38 @@
+package net.kissenpvp.pulvinar.api.permission;
+
+import net.kissenpvp.core.api.command.AbstractArgumentParser;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.permission.AbstractPermissionEntry;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class PermissionGroupParser implements AbstractArgumentParser<PermissionGroup, CommandSender> {
+    @Override
+    public @NotNull String serialize(@NotNull PermissionGroup object) {
+        return object.getPermissionID();
+    }
+
+    @Override
+    public @NotNull PermissionGroup deserialize(@NotNull String input) {
+        PermissionImplementation permission = Bukkit.getPulvinar().getImplementation(PermissionImplementation.class);
+        return permission.getGroupNotNull(input);
+    }
+
+    @Override
+    public @Nullable String argumentName() {
+        return "group";
+    }
+
+    @Override
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload) {
+        PermissionImplementation permission = Bukkit.getPulvinar().getImplementation(PermissionImplementation.class);
+        Stream<String> groupStream = permission.getGroups().stream().map(AbstractPermissionEntry::getPermissionID);
+        return groupStream.collect(Collectors.toUnmodifiableSet());
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionImplementation.java b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..d77cdae32faae9536f4ccad114fde297599482c3
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionImplementation.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.permission;
+
+import net.kissenpvp.core.api.base.Implementation;
+import net.kissenpvp.core.api.event.EventCancelledException;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Optional;
+import java.util.Set;
+
+public interface PermissionImplementation extends Implementation {
+
+    @NotNull @Unmodifiable Set<PermissionGroup> getGroups();
+
+    @NotNull Optional<PermissionGroup> getGroup(@NotNull String group);
+
+    @NotNull
+    PermissionGroup getGroupNotNull(@NotNull String group) throws EventCancelledException;
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionParser.java b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..dcdcdd5011dd8a617edcade0139b5effb0773ef1
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/permission/PermissionParser.java
@@ -0,0 +1,66 @@
+package net.kissenpvp.pulvinar.api.permission;
+
+import net.kissenpvp.core.api.command.AbstractArgumentParser;
+import net.kissenpvp.core.api.command.CommandPayload;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.permissions.Permission;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class PermissionParser implements AbstractArgumentParser<PermissionParser.PermissionArgument, CommandSender> {
+    private static @NotNull Function<String, Stream<? extends String>> splitPermissions() {
+        return permission -> {
+            Set<String> data = new HashSet<>(permission.length());
+            for (String current : permission.split(";")) {
+                StringBuilder stringBuilder = new StringBuilder();
+                String[] parts = current.split("\\.");
+                for (int i = 0; i < parts.length - 1; i++) {
+
+                    if (!stringBuilder.isEmpty() && stringBuilder.charAt(stringBuilder.length() - 1)=='*') {
+                        stringBuilder.deleteCharAt(stringBuilder.length() - 1);
+                    }
+
+                    stringBuilder.append(parts[i]).append(".*");
+                    data.add(stringBuilder.toString());
+                }
+                data.add(current);
+            }
+            return data.stream();
+        };
+    }
+
+    private static @NotNull Stream<String> getPermissionStream() {
+        return Bukkit.getPluginManager().getPermissions().stream().map(Permission::getName);
+    }
+
+    @Override
+    public @NotNull String serialize(@NotNull PermissionArgument object) {
+        return object.permission();
+    }
+
+    @Override
+    public @NotNull PermissionArgument deserialize(@NotNull String input) {
+        return new PermissionArgument(input);
+    }
+
+    @Override
+    public @Nullable String argumentName() {
+        return "permission";
+    }
+
+    @Override
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload) {
+        return getPermissionStream().flatMap(splitPermissions()).collect(Collectors.toSet());
+    }
+
+    public record PermissionArgument(@NotNull String permission) {
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/permission/PrivatePermissionGroup.java b/src/main/java/net/kissenpvp/pulvinar/api/permission/PrivatePermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..d39037de9a03f50d19184a1c46cf32bced226271
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/permission/PrivatePermissionGroup.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.permission;
+
+import net.kissenpvp.core.api.permission.AbstractPermissionGroup;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+public interface PrivatePermissionGroup extends AbstractPermissionGroup<Permission>
+{
+    @NotNull Optional<AbstractPermissionGroup<Permission>> getPublicGroup();
+
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/permission/PublicPermissionGroup.java b/src/main/java/net/kissenpvp/pulvinar/api/permission/PublicPermissionGroup.java
new file mode 100644
index 0000000000000000000000000000000000000000..79c6a126e07844c536ad0069e263c1a6f091e1a5
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/permission/PublicPermissionGroup.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.permission;
+
+import net.kissenpvp.core.api.permission.AbstractPermissionGroup;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+public interface PublicPermissionGroup extends AbstractPermissionGroup<Permission>
+{
+    @NotNull Optional<AbstractPermissionGroup<Permission>> getPrivateGroup();
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/user/playersetting/BoundPlayerSetting.java b/src/main/java/net/kissenpvp/pulvinar/api/user/playersetting/BoundPlayerSetting.java
new file mode 100644
index 0000000000000000000000000000000000000000..7147b9247bbbdf83954ef3f90d2270536ef7d5c7
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/user/playersetting/BoundPlayerSetting.java
@@ -0,0 +1,17 @@
+package net.kissenpvp.pulvinar.api.user.playersetting;
+
+import net.kissenpvp.core.api.user.exception.UnauthorizedException;
+import net.kissenpvp.core.api.user.playersettting.AbstractBoundPlayerSetting;
+import net.kissenpvp.pulvinar.api.base.Context;
+import org.jetbrains.annotations.NotNull;
+
+public interface BoundPlayerSetting<T> extends AbstractBoundPlayerSetting<T> {
+
+    @NotNull
+    T setValue(@NotNull T value, @NotNull Context context) throws UnauthorizedException;
+
+    @NotNull T getValue(@NotNull Context context);
+
+    void reset(@NotNull Context context);
+
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/user/playersetting/PlayerSetting.java b/src/main/java/net/kissenpvp/pulvinar/api/user/playersetting/PlayerSetting.java
new file mode 100644
index 0000000000000000000000000000000000000000..82260903bc6dff7f285d3f04147bc6e0ce04f6a5
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/user/playersetting/PlayerSetting.java
@@ -0,0 +1,7 @@
+package net.kissenpvp.pulvinar.api.user.playersetting;
+
+import net.kissenpvp.core.api.user.playersettting.AbstractPlayerSetting;
+import org.bukkit.OfflinePlayer;
+
+public interface PlayerSetting<T> extends AbstractPlayerSetting<T, OfflinePlayer> {
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/user/rank/PlayerRank.java b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/PlayerRank.java
new file mode 100644
index 0000000000000000000000000000000000000000..d50ef6b9a4d72c3b9f9ba233ade20936e6fc5e62
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/PlayerRank.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.AbstractPlayerRank;
+
+public interface PlayerRank extends AbstractPlayerRank<Rank> { }
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/user/rank/Rank.java b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/Rank.java
new file mode 100644
index 0000000000000000000000000000000000000000..e67f99e939c1cccb2edc10e7d4746fadb8c50b12
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/Rank.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.AbstractRank;
+import org.bukkit.OfflinePlayer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Set;
+
+public interface Rank extends AbstractRank
+{
+
+    @NotNull @Unmodifiable Set<OfflinePlayer> getPlayers();
+
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/user/rank/RankImplementation.java b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/RankImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..fa721efe2ccb1df6bbd4d1af6739aa95c49cbbaf
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/RankImplementation.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.api.user.rank;
+
+import net.kissenpvp.core.api.user.rank.AbstractRankImplementation;
+
+public interface RankImplementation extends AbstractRankImplementation<Rank> { }
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/user/rank/RankParser.java b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/RankParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..9210eb1b7adea37b4c103cf670b59b2c29c1127b
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/RankParser.java
@@ -0,0 +1,40 @@
+package net.kissenpvp.pulvinar.api.user.rank;
+
+import net.kissenpvp.core.api.command.AbstractArgumentParser;
+import net.kissenpvp.core.api.command.CommandPayload;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.stream.Collectors;
+
+public class RankParser implements AbstractArgumentParser<Rank, CommandSender>
+{
+    @Override
+    public @NotNull String serialize(@NotNull Rank object)
+    {
+        return object.getName();
+    }
+
+    @Override
+    public @NotNull Rank deserialize(@NotNull String input)
+    {
+        RankImplementation rankImplementation = Bukkit.getPulvinar().getImplementation(RankImplementation.class);
+        return rankImplementation.getRankTemplate(input).orElseThrow(NullPointerException::new);
+    }
+
+    @Override
+    public @Nullable String argumentName()
+    {
+        return "rank";
+    }
+
+    @Override
+    public @NotNull Collection<String> tabCompletion(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        RankImplementation rankImplementation = Bukkit.getPulvinar().getImplementation(RankImplementation.class);
+        return rankImplementation.getRankTemplates().stream().map(Rank::getName).collect(Collectors.toSet());
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankEvent.java b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..e67a60567f6dae79b6b6435b674750b2f9d9740b
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankEvent.java
@@ -0,0 +1,7 @@
+package net.kissenpvp.pulvinar.api.user.rank.event;
+
+import net.kissenpvp.core.api.user.rank.event.AbstractRankEvent;
+import net.kissenpvp.pulvinar.api.user.rank.Rank;
+
+public interface RankEvent extends AbstractRankEvent<Rank> {
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankExpireEvent.java b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankExpireEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..4c562e1a2b4c8ef29093476a534f73c936dd7135
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankExpireEvent.java
@@ -0,0 +1,7 @@
+package net.kissenpvp.pulvinar.api.user.rank.event;
+
+import net.kissenpvp.core.api.user.rank.event.AbstractRankExpireEvent;
+import net.kissenpvp.pulvinar.api.user.rank.PlayerRank;
+
+public interface RankExpireEvent extends AbstractRankExpireEvent<PlayerRank> {
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankGrantEvent.java b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankGrantEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..ead7b474dea2c70ea0c4f0dc06172117ffd7cc69
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankGrantEvent.java
@@ -0,0 +1,7 @@
+package net.kissenpvp.pulvinar.api.user.rank.event;
+
+import net.kissenpvp.core.api.user.rank.event.UndefinedAbstractRankEvent;
+import net.kissenpvp.pulvinar.api.user.rank.PlayerRank;
+
+public interface RankGrantEvent extends UndefinedAbstractRankEvent<PlayerRank> {
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankPriorityChangeEvent.java b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankPriorityChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..4cdfe444286e532cb2b4d504c295303a821bf473
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/api/user/rank/event/RankPriorityChangeEvent.java
@@ -0,0 +1,7 @@
+package net.kissenpvp.pulvinar.api.user.rank.event;
+
+import net.kissenpvp.core.api.user.rank.event.AbstractRankPriorityChangeEvent;
+import net.kissenpvp.pulvinar.api.user.rank.Rank;
+
+public interface RankPriorityChangeEvent extends AbstractRankPriorityChangeEvent<Rank> {
+}
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index d0206c9c2f423a9b77237d9a005b9ee139dae70f..bff5cba98080427cae76e0cbe30f538a519397e8 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -19,7 +19,7 @@ import org.jetbrains.annotations.Nullable;
  * player that is stored on the disk and can, thus, be retrieved without the
  * player needing to be online.
  */
-public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable {
+public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable, net.kissenpvp.pulvinar.api.networking.client.entity.PulvinarPlayerClient, net.kissenpvp.pulvinar.api.permission.GroupablePermissionEntry { // Pulvinar
 
     /**
      * Checks if this player is currently online
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index 04e7cd0e4e2d0eb38fb2862ce6688a4470f30d6b..8f5549fddef170ec45152084e4c73dcae7542ea6 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -1,6 +1,7 @@
 package org.bukkit.command;
 
 import java.util.UUID;
+
 import net.kyori.adventure.audience.MessageType;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.Component;
@@ -9,7 +10,7 @@ import org.bukkit.permissions.Permissible;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper
+public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible, net.kissenpvp.core.api.networking.client.entitiy.ServerEntity { // Paper // Pulvinar
 
     /**
      * Sends this sender a message
@@ -200,4 +201,11 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
         this.sendMessage(new net.md_5.bungee.api.chat.TextComponent(components).toLegacyText());
     }
     // Paper end
+
+    // Pulvinar start
+    @Override
+    default @NotNull Component displayName() {
+        return name();
+    }
+    // Pulvinar end
 }
diff --git a/src/main/java/org/bukkit/command/ConsoleCommandSender.java b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
index f309c2ed39bcc700e5b491ff549bf0608a07aab8..d105bce3788d1bef72fc8426b9bb40e5ca79c0e6 100644
--- a/src/main/java/org/bukkit/command/ConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
@@ -2,5 +2,5 @@ package org.bukkit.command;
 
 import org.bukkit.conversations.Conversable;
 
-public interface ConsoleCommandSender extends CommandSender, Conversable {
+public interface ConsoleCommandSender extends CommandSender, Conversable, net.kissenpvp.core.api.networking.client.entitiy.ConsoleClient { // Pulvinar
 }
diff --git a/src/main/java/org/bukkit/command/MessageCommandSender.java b/src/main/java/org/bukkit/command/MessageCommandSender.java
index 9d263ab3afb938c215c0b64d9171345fca6ceb2c..8bff00621e832309de09636571b85222585929be 100644
--- a/src/main/java/org/bukkit/command/MessageCommandSender.java
+++ b/src/main/java/org/bukkit/command/MessageCommandSender.java
@@ -132,4 +132,25 @@ public interface MessageCommandSender extends CommandSender {
         throw new UnsupportedOperationException();
     }
 
+    // Pulvinar start
+    @Override
+    default @NotNull java.util.Locale getCurrentLocale() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default @NotNull net.kyori.adventure.text.Component displayName() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default boolean isConnected() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    default boolean isClient() {
+        throw new UnsupportedOperationException();
+    }
+    // Pulvinar end
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index eb79e62e753524d6782842c662b0a50ab5ac0811..eba109dfafb9076b320c21209278028292b04423 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -57,7 +57,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents a player, connected or not
  */
-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient { // Paper
+public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient, net.kissenpvp.pulvinar.api.networking.client.entity.PulvinarOnlinePlayerClient { // Paper // Pulvinar
 
     // Paper start
     @Override
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 52f205e5b4acc246d12dd590660217b9ea5fc18a..df23b550fd56280d3b5834e4bb3a3be1ca4b2cde 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -371,5 +371,7 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
     void registerExceptionHandler(@NotNull net.kissenpvp.core.api.base.ExceptionHandler<?> exceptionHandler, @NotNull Plugin plugin);
 
     <T> void registerParser(@NotNull Class<T> type, @NotNull net.kissenpvp.pulvinar.api.command.ArgumentParser<T> parser, @NotNull Plugin plugin);
+
+    void registerPlayerSetting(@NotNull net.kissenpvp.core.api.user.playersettting.AbstractPlayerSetting<?, ? extends org.bukkit.OfflinePlayer> playerSetting, @NotNull Plugin plugin);
     // Pulvinar end
 }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 921e3dc788337ee2c1ea5dd15e05d3fc2bb503b4..0bb81833e15c55e3640063b458e21b7b021fe6d3 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -1012,5 +1012,10 @@ public final class SimplePluginManager implements PluginManager {
     public <T> void registerParser(@NotNull Class<T> type, @NotNull net.kissenpvp.pulvinar.api.command.ArgumentParser<T> parser, @NotNull Plugin plugin) {
         org.bukkit.Bukkit.getPulvinar().getImplementation(net.kissenpvp.pulvinar.api.command.CommandImplementation.class).getPluginHandler(plugin).ifPresent(handler -> handler.registerParser(type, parser));
     }
+
+    @Override
+    public void registerPlayerSetting(@NotNull net.kissenpvp.core.api.user.playersettting.AbstractPlayerSetting<?, ? extends org.bukkit.OfflinePlayer> playerSetting, @NotNull Plugin plugin) {
+        org.bukkit.Bukkit.getPulvinar().getImplementation(net.kissenpvp.core.api.user.UserImplementation.class).registerPlayerSetting(plugin, playerSetting);
+    }
     // Pulvinar end
 }
diff --git a/src/main/java/org/bukkit/profile/PlayerProfile.java b/src/main/java/org/bukkit/profile/PlayerProfile.java
index f4ab961647826b8717466be0d8c202b12749e9b4..f9199ed0d38005729769dd652e516b19260bf4cc 100644
--- a/src/main/java/org/bukkit/profile/PlayerProfile.java
+++ b/src/main/java/org/bukkit/profile/PlayerProfile.java
@@ -100,4 +100,8 @@ public interface PlayerProfile extends Cloneable, ConfigurationSerializable {
 
     @NotNull
     PlayerProfile clone();
+
+    // Pulvinar start
+    @NotNull net.kissenpvp.core.api.user.User getUser();
+    // Pulvinar end
 }
