From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Sun, 24 Sep 2023 16:06:01 +0200
Subject: [PATCH] Integrated command system from kissen into paper


diff --git a/src/main/java/net/kissenpvp/paper/api/command/CommandImplementation.java b/src/main/java/net/kissenpvp/paper/api/command/CommandImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..f0fb644a87663eccfa610ffb06a6c40588c4a9e8
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/command/CommandImplementation.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.command;
+
+import net.kissenpvp.core.api.base.Implementation;
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
+import net.kissenpvp.core.api.command.CommandHandler;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+/**
+ * Interface for the specific implementation of command operations for the Paper API.
+ * <p>
+ * This interface extends the {@link Implementation} and provides methods related to the command handling
+ * in the context of the Paper API. It outlines the operations for command retrieval, registration, tab completion, and de-registration.
+ *
+ * @see Implementation
+ */
+public interface CommandImplementation extends Implementation
+{
+
+    @NotNull Optional<CommandHandler<CommandSender, KissenCommand>> getPluginHandler(@NotNull KissenPlugin kissenPlugin);
+
+}
diff --git a/src/main/java/net/kissenpvp/paper/api/command/KissenCommand.java b/src/main/java/net/kissenpvp/paper/api/command/KissenCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..0b37b7c0653395d7aa554846cde0e9254a11c93d
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/api/command/KissenCommand.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.paper.api.command;
+
+import org.bukkit.command.Command;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents an abstract, base command structure for the Kissen framework.
+ * <p>
+ * This base command class holds essential information about a command and serves as
+ * a foundation for all specific commands within the Kissen command hierarchy.
+ * The structure encapsulates the basic behavior and properties of a command,
+ * such as its name.
+ * <p>
+ * Subclasses should extend this class to provide specific implementations for each command.
+ *
+ * @see Command
+ */
+public abstract class KissenCommand extends Command {
+
+    /**
+     * Constructs a new command with the specified name.
+     *
+     * @param name The name of the command. It must not be null.
+     *             This is the primary identifier for the command and is used in command
+     *             processing to map user inputs to the corresponding command.
+     * @throws NullPointerException if the {@code name} parameter is null.
+     * @see Command
+     */
+    protected KissenCommand(@NotNull String name) {
+        super(name);
+    }
+}
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 3e7f95b02d21c1881faa62bc0f9f6291adadd7f6..ba8daf59d250f26fa64553efd079283c4241a148 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -333,5 +333,11 @@ public interface PluginManager extends io.papermc.paper.plugin.PermissionManager
     void registerPlayerSetting(@NotNull net.kissenpvp.core.api.user.playersettting.AbstractPlayerSetting<?, ? extends org.bukkit.OfflinePlayer> playerSetting, @NotNull Plugin plugin);
 
     void registerTranslation(@NotNull String key, @NotNull java.text.MessageFormat defaultMessage, @NotNull Plugin plugin);
+
+    void registerCommand(@NotNull Plugin plugin, @NotNull Object... objects);
+
+    void registerExceptionHandler(@NotNull net.kissenpvp.core.api.base.ExceptionHandler<?> exceptionHandler, @NotNull Plugin plugin);
+
+    <T> void registerParser(@NotNull Class<T> type, @NotNull net.kissenpvp.paper.api.command.ArgumentParser<T> parser, @NotNull Plugin plugin);
     // Pulvinar end
 }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 77f40130e6a69cee41103d01a89a3be0e70e555c..c74a0a994e6ae565599dfec4488c2715c1966cc6 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -1006,5 +1006,20 @@ public final class SimplePluginManager implements PluginManager {
     public void registerTranslation(@NotNull String key, @NotNull java.text.MessageFormat defaultMessage, @NotNull Plugin plugin) {
         org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.core.api.message.localization.LocalizationImplementation.class).register(plugin, key, defaultMessage);
     }
+
+    @Override
+    public void registerCommand(@NotNull Plugin plugin, @NotNull Object... objects) {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.paper.api.command.CommandImplementation.class).getPluginHandler(plugin).ifPresent(handler -> handler.registerCommand(objects));
+    }
+
+    @Override
+    public void registerExceptionHandler(@NotNull net.kissenpvp.core.api.base.ExceptionHandler<?> exceptionHandler, @NotNull Plugin plugin) {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.paper.api.command.CommandImplementation.class).getPluginHandler(plugin).ifPresent(handler -> handler.registerExceptionHandler(exceptionHandler));
+    }
+
+    @Override
+    public <T> void registerParser(@NotNull Class<T> type, @NotNull net.kissenpvp.paper.api.command.ArgumentParser<T> parser, @NotNull Plugin plugin) {
+        org.bukkit.Bukkit.getKissen().getImplementation(net.kissenpvp.paper.api.command.CommandImplementation.class).getPluginHandler(plugin).ifPresent(handler -> handler.registerParser(type, parser));
+    }
     // Pulvinar start
 }
diff --git "a/\302\260" "b/\302\260"
new file mode 100644
index 0000000000000000000000000000000000000000..f9f8100484bc262f80e3e7298856bf8b11e892a5
--- /dev/null
+++ "b/\302\260"
@@ -0,0 +1,39 @@
+pick d21113cd Adjusted gradle script to integrate into kissen
+pick 305af172 Integrated base and plugin system into paper
+pick 65360cdf Integrated event system kissen into paper
+pick 03355a8d Integrated player system from kissen into paper
+pick edcec03f Integrated localization from kissen into paper
+edit 17254bed Integrated command system from kissen into paper
+pick 848b1d67 Integrated ban system from kissen into paper
+pick c7fc46f0 Integrated Advancementsystem into paper
+
+# Rebase 140f239b..c7fc46f0 onto 140f239b (8 commands)
+#
+# Commands:
+# p, pick <commit> = use commit
+# r, reword <commit> = use commit, but edit the commit message
+# e, edit <commit> = use commit, but stop for amending
+# s, squash <commit> = use commit, but meld into previous commit
+# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
+#                    commit's log message, unless -C is used, in which case
+#                    keep only this commit's message; -c is same as -C but
+#                    opens the editor
+# x, exec <command> = run command (the rest of the line) using shell
+# b, break = stop here (continue rebase later with 'git rebase --continue')
+# d, drop <commit> = remove commit
+# l, label <label> = label current HEAD with a name
+# t, reset <label> = reset HEAD to a label
+# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
+#         create a merge commit using the original merge commit's
+#         message (or the oneline, if no original merge commit was
+#         specified); use -c <commit> to reword the commit message
+# u, update-ref <ref> = track a placeholder for the <ref> to be updated
+#                       to this position in the new commits. The <ref> is
+#                       updated at the end of the rebase
+#
+# These lines can be re-ordered; they are executed from top to bottom.
+#
+# If you remove a line here THAT COMMIT WILL BE LOST.
+#
+# However, if you remove everything, the rebase will be aborted.
+#
