From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivo Quiring <falk.quiring@gmail.com>
Date: Wed, 24 Apr 2024 21:28:13 +0200
Subject: [PATCH] Implement kissen into pulvinar


diff --git a/build.gradle.kts b/build.gradle.kts
index 8e5ecf9c481c195a3de1f53d2ca15bbf50e7aeee..efbc751c99fcff116f0517aaba041f6ee075248f 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -47,6 +47,11 @@ dependencies {
     runtimeOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.9.18")
     runtimeOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.9.18")
 
+    // Pulvinar start
+    implementation(project(":kissen-api") )
+    implementation(project(":kissen-source") )
+    // Pulvinar end
+
     // Pufferfish start
     implementation("org.yaml:snakeyaml:1.32")
     implementation ("com.github.carleslc.Simple-YAML:Simple-Yaml:1.8.4") { // Purpur
@@ -179,8 +184,8 @@ fun TaskContainer.registerRunTask(
     })
     jvmArgs("-XX:+AllowEnhancedClassRedefinition", "-XX:+AllowRedefinitionToAddDeleteMethods")
 
-    if (rootProject.childProjects["test-plugin"] != null) {
-        val testPluginJar = rootProject.project(":test-plugin").tasks.jar.flatMap { it.archiveFile }
+    if (rootProject.childProjects["pulvinar:test-plugin"] != null) {
+        val testPluginJar = rootProject.project(":pulvinar:test-plugin").tasks.jar.flatMap { it.archiveFile }
         inputs.file(testPluginJar)
         args("-add-plugin=${testPluginJar.get().asFile.absolutePath}")
     }
@@ -226,23 +231,26 @@ tasks.registerRunTask("runDevServer") {
     jvmArgs("-DPaper.pushPaperAssetsRoot=true")
 }
 
+// Pulvinar start
+val pulvinarProject = rootProject.project(":pulvinar")
 tasks.registerRunTask("runBundler") {
     description = "Spin up a test server from the Mojang mapped bundler jar"
-    classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreateBundlerJar>("createMojmapBundlerJar").flatMap { it.outputZip })
+    classpath(pulvinarProject.tasks.named<io.papermc.paperweight.tasks.CreateBundlerJar>("createMojmapBundlerJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
 }
 tasks.registerRunTask("runReobfBundler") {
     description = "Spin up a test server from the reobf bundler jar"
-    classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreateBundlerJar>("createReobfBundlerJar").flatMap { it.outputZip })
+    classpath(pulvinarProject.tasks.named<io.papermc.paperweight.tasks.CreateBundlerJar>("createReobfBundlerJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
 }
 tasks.registerRunTask("runPaperclip") {
     description = "Spin up a test server from the Mojang mapped Paperclip jar"
-    classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreatePaperclipJar>("createMojmapPaperclipJar").flatMap { it.outputZip })
+    classpath(pulvinarProject.tasks.named<io.papermc.paperweight.tasks.CreatePaperclipJar>("createMojmapPaperclipJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
 }
 tasks.registerRunTask("runReobfPaperclip") {
     description = "Spin up a test server from the reobf Paperclip jar"
-    classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreatePaperclipJar>("createReobfPaperclipJar").flatMap { it.outputZip })
+    classpath(pulvinarProject.tasks.named<io.papermc.paperweight.tasks.CreatePaperclipJar>("createReobfPaperclipJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
 }
+// Pulvinar end
diff --git a/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java b/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java
new file mode 100644
index 0000000000000000000000000000000000000000..1e637e15367271ce44250b8543c49d17015fd7e3
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java
@@ -0,0 +1,94 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.base;
+
+import net.kissenpvp.core.api.base.Implementation;
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
+import net.kissenpvp.core.api.networking.client.entitiy.ConsoleClient;
+import net.kissenpvp.core.base.KissenCore;
+import net.kissenpvp.pulvinar.api.base.Pulvinar;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Map;
+import java.util.Optional;
+import java.util.UUID;
+
+// Pulvinar
+public class PulvinarCore extends KissenCore implements Pulvinar {
+
+    @Override
+    public @NotNull Optional<KissenPlugin> getPlugin(@NotNull String plugin) {
+        return Optional.ofNullable(Bukkit.getPluginManager().getPlugin(plugin));
+    }
+
+    @Override
+    public @NotNull KissenPlugin[] getPlugins() {
+        return Bukkit.getPluginManager().getPlugins();
+    }
+
+    @Override
+    protected void loadImplementations(@NotNull Map<Class<? extends Implementation>, Implementation> loader) {
+        loader.put(net.kissenpvp.core.api.config.ConfigurationImplementation.class, new net.kissenpvp.pulvinar.config.PulvinarConfigurationImplementation());
+        loader.put(net.kissenpvp.core.event.EventImplementation.class, new net.kissenpvp.pulvinar.event.KissenEventImplementation());
+        loader.put(net.kissenpvp.core.api.user.UserImplementation.class, new net.kissenpvp.pulvinar.user.PulvinarUserImplementation());
+        loader.put(net.kissenpvp.pulvinar.api.user.rank.RankImplementation.class, new net.kissenpvp.pulvinar.user.rank.PulvinarRankImplementation());
+        net.kissenpvp.pulvinar.permission.PulvinarPermissionImplementation permissionImplementation = new net.kissenpvp.pulvinar.permission.PulvinarPermissionImplementation();
+        loader.put(net.kissenpvp.pulvinar.api.permission.PermissionImplementation.class, permissionImplementation);
+        loader.put(net.kissenpvp.core.permission.InternalPermissionImplementation.class, permissionImplementation);
+        loader.put(net.kissenpvp.core.api.message.localization.LocalizationImplementation.class, new net.kissenpvp.pulvinar.message.localization.PulvinarLocalizationImplementation());
+        net.kissenpvp.pulvinar.command.PulvinarCommandImplementation commandImplementation = new net.kissenpvp.pulvinar.command.PulvinarCommandImplementation();
+        loader.put(net.kissenpvp.pulvinar.api.command.CommandImplementation.class, commandImplementation);
+        loader.put(net.kissenpvp.core.command.InternalCommandImplementation.class, commandImplementation);
+        loader.put(net.kissenpvp.core.command.confirmation.KissenConfirmationImplementation.class, new net.kissenpvp.pulvinar.command.confirmation.PulvinarConfirmationImplementation());
+        loader.put(net.kissenpvp.pulvinar.api.ban.BanImplementation.class, new net.kissenpvp.pulvinar.ban.PulvinarBanImplementation());
+        super.loadImplementations(loader);
+    }
+
+    @Override
+    protected void setupDatabase(@NotNull net.kissenpvp.core.api.config.ConfigurationImplementation config, @NotNull net.kissenpvp.core.api.database.connection.DatabaseImplementation database) {
+        super.setupDatabase(config, database);
+    }
+
+    @Override
+    public int getPort() {
+        return Bukkit.getPort();
+    }
+
+    @Override
+    public boolean isOnline(@NotNull UUID uuid) {
+        return Bukkit.getPlayer(uuid)!=null;
+    }
+
+    @Override
+    public boolean isOnline(@NotNull String s) {
+        return Bukkit.getPlayer(s)!=null;
+    }
+
+    @Override
+    public @NotNull ConsoleClient getConsole() {
+        return Bukkit.getConsoleSender();
+    }
+
+    @Override
+    public void runTask(@NotNull KissenPlugin kissenPlugin, @NotNull Runnable runnable) {
+        Bukkit.getScheduler().runTask((Plugin) kissenPlugin, runnable);
+    }
+}
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index a056aa167887abef9e6d531a9edd2cda433567d2..e8b009b848509c2e344eaf0bdc23d7ad7094b932 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -15,17 +15,17 @@
         </Queue>
         <TerminalConsole name="TerminalConsole">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%logger] %msg%n%xEx{full}}">
+                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level] [%logger]: %msg%n%xEx{full}}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
                     <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
-                                  pattern="%highlightError{[%d{HH:mm:ss} %level]: %msg%n%xEx{full}}" />
+                                  pattern="%highlightError{[%d{HH:mm:ss} %level] [%thread]: %msg%n%xEx{full}}" />
                 </LoggerNamePatternSelector>
             </PatternLayout>
         </TerminalConsole>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %stripAnsi{%msg}%n%xEx{full}">
+                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level] [%logger]: %stripAnsi{%msg}%n%xEx{full}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
                     <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
