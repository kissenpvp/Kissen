From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivo Quiring <falk.quiring@gmail.com>
Date: Mon, 12 Feb 2024 13:39:34 +0100
Subject: [PATCH] Integrated event system from kissen into paper

Signed-off-by: Ivo Quiring <falk.quiring@gmail.com>

diff --git a/src/main/java/io/papermc/paper/plugin/manager/DummyBukkitPluginLoader.java b/src/main/java/io/papermc/paper/plugin/manager/DummyBukkitPluginLoader.java
index aef19b44075a3b2e8696315baa89117dd8ebb513..1ab386e637fd566eea1bdaba686ef27d25bdc134 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/DummyBukkitPluginLoader.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/DummyBukkitPluginLoader.java
@@ -66,7 +66,7 @@ public class DummyBukkitPluginLoader implements PluginLoader {
     }
 
     @Override
-    public @NotNull Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull Plugin plugin) {
+    public @NotNull Map<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> createRegisteredListeners(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull Plugin plugin) { // Pulvinar - integrate unified event system
         return PaperPluginManagerImpl.getInstance().paperEventManager.createRegisteredListeners(listener, plugin);
     }
 
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
index 7ce9ebba8ce304d1f3f21d4f15ee5f3560d7700b..33e1118dedf68d8c11206a5cd913126fbdfcac43 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
@@ -35,15 +35,27 @@ class PaperEventManager {
     }
 
     // SimplePluginManager
-    public void callEvent(@NotNull Event event) {
-        if (event.isAsynchronous() && this.server.isPrimaryThread()) {
-            throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
-        } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping()) {
-            throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
+    public void callEvent(@NotNull net.kissenpvp.core.api.event.EventClass event) { // Pulvinar - integrate unified event system
+        // Pulvinar start - integrate unified event system
+        if(!event.volatileEvent())
+        {
+            if (event.isAsynchronous() && this.server.isPrimaryThread()) {
+                throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
+            } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping()) {
+                throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
+            }
         }
 
-        HandlerList handlers = event.getHandlers();
-        RegisteredListener[] listeners = handlers.getRegisteredListeners();
+        HandlerList handlerList = net.kissenpvp.pulvinar.event.KissenEventImplementation.getHandlerList();
+        RegisteredListener[] listeners = handlerList.getRegisteredListeners();
+        if(event instanceof Event bukkitEvent)
+        {
+            handlerList = bukkitEvent.getHandlers();
+            RegisteredListener[] bukkitListeners = handlerList.getRegisteredListeners();
+            listeners = java.util.stream.Stream.concat(Arrays.stream(listeners),
+                    Arrays.stream(bukkitListeners)).toArray(RegisteredListener[]::new);
+        }
+        // Pulvinar end - integrate unified event system
 
         for (RegisteredListener registration : listeners) {
             if (!registration.getPlugin().isEnabled()) {
@@ -75,22 +87,22 @@ class PaperEventManager {
         }
     }
 
-    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin) {
+    public void registerEvents(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull Plugin plugin) { // Pulvinar - integrate unified event system
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + listener + " while not enabled");
         }
 
-        for (Map.Entry<Class<? extends Event>, Set<RegisteredListener>> entry : this.createRegisteredListeners(listener, plugin).entrySet()) {
+        for (Map.Entry<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> entry : this.createRegisteredListeners(listener, plugin).entrySet()) { // Pulvinar - integrate unified event system
             this.getEventListeners(this.getRegistrationClass(entry.getKey())).registerAll(entry.getValue());
         }
 
     }
 
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) {
+    public void registerEvent(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) { // Pulvinar - integrate unified event system
         this.registerEvent(event, listener, priority, executor, plugin, false);
     }
 
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) {
+    public void registerEvent(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) { // Pulvinar - integrate unified event system
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + event + " while not enabled");
         }
@@ -100,7 +112,7 @@ class PaperEventManager {
     }
 
     @NotNull
-    private HandlerList getEventListeners(@NotNull Class<? extends Event> type) {
+    private HandlerList getEventListeners(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> type) { // Pulvinar - integrate unified event system
         try {
             Method method = this.getRegistrationClass(type).getDeclaredMethod("getHandlerList");
             method.setAccessible(true);
@@ -111,11 +123,17 @@ class PaperEventManager {
     }
 
     @NotNull
-    private Class<? extends Event> getRegistrationClass(@NotNull Class<? extends Event> clazz) {
+    private Class<? extends net.kissenpvp.core.api.event.EventClass> getRegistrationClass(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> clazz) { // Pulvinar - integrate unified event system
         try {
             clazz.getDeclaredMethod("getHandlerList");
             return clazz;
         } catch (NoSuchMethodException e) {
+            // Pulvinar start - integrate unified event system
+            if(!Listener.class.isAssignableFrom(clazz))
+            {
+                return net.kissenpvp.pulvinar.event.KissenEventImplementation.class;
+            }
+            // Pulvinar end - integrate unified event system
             if (clazz.getSuperclass() != null
                 && !clazz.getSuperclass().equals(Event.class)
                 && Event.class.isAssignableFrom(clazz.getSuperclass())) {
@@ -128,8 +146,8 @@ class PaperEventManager {
 
     // JavaPluginLoader
     @NotNull
-    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull final Plugin plugin) {
-        Map<Class<? extends Event>, Set<RegisteredListener>> ret = new HashMap<>();
+    public Map<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> createRegisteredListeners(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull final Plugin plugin) { // Pulvinar - integrate unified event system
+        Map<Class<? extends net.kissenpvp.core.api.event.EventClass>, Set<RegisteredListener>> ret = new HashMap<>();
 
         Set<Method> methods;
         try {
@@ -143,6 +161,16 @@ class PaperEventManager {
             return ret;
         }
 
+        // Pulvinar start - integrate unified event system
+        if(!(listener instanceof Listener))
+        {
+            EventExecutor executor = this::callUnknownEvent;
+            RegisteredListener registeredListener = new RegisteredListener(listener, executor, EventPriority.NORMAL, plugin, false);
+            Set<RegisteredListener> eventSet = ret.computeIfAbsent(net.kissenpvp.pulvinar.event.KissenEventImplementation.class, k -> new HashSet<>());
+            eventSet.add(registeredListener);
+        }
+        // Pulvinar end - integrate unified event system
+
         for (final Method method : methods) {
             final EventHandler eh = method.getAnnotation(EventHandler.class);
             if (eh == null) continue;
@@ -152,15 +180,15 @@ class PaperEventManager {
                 continue;
             }
             final Class<?> checkClass;
-            if (method.getParameterTypes().length != 1 || !Event.class.isAssignableFrom(checkClass = method.getParameterTypes()[0])) {
+            if (method.getParameterTypes().length != 1 || !net.kissenpvp.core.api.event.EventClass.class.isAssignableFrom(checkClass = method.getParameterTypes()[0])) { // Pulvinar - integrate unified event system
                 plugin.getLogger().severe(plugin.getPluginMeta().getDisplayName() + " attempted to register an invalid EventHandler method signature \"" + method.toGenericString() + "\" in " + listener.getClass());
                 continue;
             }
-            final Class<? extends Event> eventClass = checkClass.asSubclass(Event.class);
+            final Class<? extends net.kissenpvp.core.api.event.EventClass> eventClass = checkClass.asSubclass(net.kissenpvp.core.api.event.EventClass.class); // Pulvinar - integrate unified event system
             method.setAccessible(true);
             Set<RegisteredListener> eventSet = ret.computeIfAbsent(eventClass, k -> new HashSet<>());
 
-            for (Class<?> clazz = eventClass; Event.class.isAssignableFrom(clazz); clazz = clazz.getSuperclass()) {
+            for (Class<?> clazz = eventClass; net.kissenpvp.core.api.event.EventClass.class.isAssignableFrom(clazz); clazz = clazz.getSuperclass()) { // Pulvinar - integrate unified event system
                 // This loop checks for extending deprecated events
                 if (clazz.getAnnotation(Deprecated.class) != null) {
                     Warning warning = clazz.getAnnotation(Warning.class);
@@ -191,4 +219,14 @@ class PaperEventManager {
     public void clearEvents() {
         HandlerList.unregisterAll();
     }
+
+    // Pulvinar start - integrate unified event system
+    private <T extends net.kissenpvp.core.api.event.EventClass> void callUnknownEvent(@NotNull net.kissenpvp.core.api.event.EventListener<T> eventListener, @NotNull net.kissenpvp.core.api.event.EventClass eventClass)
+    {
+        try
+        {
+            eventListener.call((T) eventClass);
+        } catch (ClassCastException ignored) {}
+    }
+    // Pulvinar end - integrate unified event system
 }
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
index 486ebc9c35d6942d7e7e015cbf7fc81f84e5ec23..83717633afdf4d97ea3cf58dcc4dcda675c79b31 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -127,25 +127,24 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
     // Event manipulation
 
     @Override
-    public void callEvent(@NotNull Event event) throws IllegalStateException {
+    public void callEvent(@NotNull net.kissenpvp.core.api.event.EventClass event) throws IllegalStateException {
         this.paperEventManager.callEvent(event);
     }
 
     @Override
-    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin) {
+    public void registerEvents(@NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull Plugin plugin) {
         this.paperEventManager.registerEvents(listener, plugin);
     }
 
     @Override
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) {
+    public void registerEvent(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) {
         this.paperEventManager.registerEvent(event, listener, priority, executor, plugin);
     }
 
     @Override
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) {
+    public void registerEvent(@NotNull Class<? extends net.kissenpvp.core.api.event.EventClass> event, @NotNull net.kissenpvp.core.api.event.EventListener<?> listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) {
         this.paperEventManager.registerEvent(event, listener, priority, executor, plugin, ignoreCancelled);
     }
-
     // Permission manipulation
 
     @Override
diff --git a/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java b/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java
index 82cdf5419e0d3bc295f1e45c4f6d14b31813c36d..dc322ad654a8a879d5b11c0bec6c704927366099 100644
--- a/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java
+++ b/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java
@@ -48,6 +48,7 @@ public class PulvinarCore extends KissenCore implements Pulvinar {
     @Override
     protected void loadImplementations(@NotNull Map<Class<? extends Implementation>, Implementation> loader) {
         loader.put(net.kissenpvp.core.api.config.ConfigurationImplementation.class, new net.kissenpvp.pulvinar.config.PulvinarConfigurationImplementation());
+        loader.put(net.kissenpvp.core.event.EventImplementation.class, new net.kissenpvp.pulvinar.event.KissenEventImplementation());
         super.loadImplementations(loader);
     }
 
diff --git a/src/main/java/net/kissenpvp/pulvinar/event/KissenEventImplementation.java b/src/main/java/net/kissenpvp/pulvinar/event/KissenEventImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..ceadb02954b49836c6195bc30d92b6c31dc4cb5c
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/event/KissenEventImplementation.java
@@ -0,0 +1,29 @@
+package net.kissenpvp.pulvinar.event;
+
+import net.kissenpvp.core.api.event.Cancellable;
+import net.kissenpvp.core.api.event.EventClass;
+import net.kissenpvp.core.event.EventImplementation;
+import org.bukkit.Bukkit;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+public class KissenEventImplementation implements EventImplementation, EventClass {
+
+    private final static HandlerList HANDLER_LIST = new HandlerList();
+    @Override
+    public boolean call(@NotNull EventClass eventClass) {
+        Bukkit.getPluginManager().callEvent(eventClass);
+
+        if (eventClass instanceof Cancellable cancellable) {
+            return !cancellable.isCancelled();
+        } else if (eventClass instanceof org.bukkit.event.Cancellable cancellable) {
+            return !cancellable.isCancelled();
+        }
+
+        return true;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
diff --git a/src/test/java/io/papermc/paper/plugin/SyntheticEventTest.java b/src/test/java/io/papermc/paper/plugin/SyntheticEventTest.java
index 2a7408ed5d9a415333212cadd7fefcd03785afbf..0041f86634155ea5e4934cd00ddd23176f34c3dd 100644
--- a/src/test/java/io/papermc/paper/plugin/SyntheticEventTest.java
+++ b/src/test/java/io/papermc/paper/plugin/SyntheticEventTest.java
@@ -1,7 +1,6 @@
 package io.papermc.paper.plugin;
 
 import io.papermc.paper.plugin.manager.PaperPluginManagerImpl;
-import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
@@ -12,8 +11,13 @@ public class SyntheticEventTest {
 
     @Test
     public void test() {
+        // Pulvinar start
+        org.bukkit.Server server = org.mockito.Mockito.mock(org.bukkit.Server.class);
+        org.mockito.Mockito.when(server.isPrimaryThread()).thenReturn(true);
+        // Pulvinar end
+
         PaperTestPlugin paperTestPlugin = new PaperTestPlugin("synthetictest");
-        PaperPluginManagerImpl paperPluginManager = new PaperPluginManagerImpl(Bukkit.getServer(), null, null);
+        PaperPluginManagerImpl paperPluginManager = new PaperPluginManagerImpl(server, null, null); // Pulvinar
 
         TestEvent event = new TestEvent(false);
         Impl impl = new Impl();
