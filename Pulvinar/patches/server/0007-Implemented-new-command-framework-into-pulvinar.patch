From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Sun, 24 Sep 2023 13:30:00 +0200
Subject: [PATCH] Implemented new command framework into pulvinar


diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
index 4b011884c81b3056ffd509d37021aef584692b3f..40863f32b5227854eb6583482982f33d84a0c0fe 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -259,5 +259,20 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
     public void registerTranslation(@NotNull String key, @NotNull java.text.MessageFormat defaultMessage, @NotNull Plugin plugin) {
         org.bukkit.Bukkit.getPulvinar().getImplementation(net.kissenpvp.core.api.message.localization.LocalizationImplementation.class).register(plugin, key, defaultMessage);
     }
+
+    @Override
+    public void registerCommand(@NotNull Plugin plugin, @NotNull Object... objects) {
+        org.bukkit.Bukkit.getPulvinar().getImplementation(net.kissenpvp.pulvinar.api.command.CommandImplementation.class).getPluginHandler(plugin).ifPresent(handler -> handler.registerCommand(objects));
+    }
+
+    @Override
+    public void registerExceptionHandler(@NotNull net.kissenpvp.core.api.base.ExceptionHandler<?> exceptionHandler, @NotNull Plugin plugin) {
+        org.bukkit.Bukkit.getPulvinar().getImplementation(net.kissenpvp.pulvinar.api.command.CommandImplementation.class).getPluginHandler(plugin).ifPresent(handler -> handler.registerExceptionHandler(exceptionHandler));
+    }
+
+    @Override
+    public <T> void registerParser(@NotNull Class<T> type, @NotNull net.kissenpvp.pulvinar.api.command.ArgumentParser<T> parser, @NotNull Plugin plugin) {
+        org.bukkit.Bukkit.getPulvinar().getImplementation(net.kissenpvp.pulvinar.api.command.CommandImplementation.class).getPluginHandler(plugin).ifPresent(handler -> handler.registerParser(type, parser));
+    }
     // Pulvinar end
 }
diff --git a/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java b/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java
index 04d77fd9c819caaed6efa0c60db0b4acdc010ea3..e737bc37c973b41633194d252f47c355ae3f06e4 100644
--- a/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java
+++ b/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java
@@ -55,6 +55,10 @@ public class PulvinarCore extends KissenCore implements Pulvinar {
         loader.put(net.kissenpvp.pulvinar.api.permission.PermissionImplementation.class, permissionImplementation);
         loader.put(net.kissenpvp.core.permission.InternalPermissionImplementation.class, permissionImplementation);
         loader.put(net.kissenpvp.core.api.message.localization.LocalizationImplementation.class, new net.kissenpvp.pulvinar.message.localization.PulvinarLocalizationImplementation());
+        net.kissenpvp.pulvinar.command.PulvinarCommandImplementation commandImplementation = new net.kissenpvp.pulvinar.command.PulvinarCommandImplementation();
+        loader.put(net.kissenpvp.pulvinar.api.command.CommandImplementation.class, commandImplementation);
+        loader.put(net.kissenpvp.core.command.InternalCommandImplementation.class, commandImplementation);
+        loader.put(net.kissenpvp.core.command.confirmation.KissenConfirmationImplementation.class, new net.kissenpvp.pulvinar.command.confirmation.PulvinarConfirmationImplementation());
         super.loadImplementations(loader);
     }
 
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/PulvinarCommandImplementation.java b/src/main/java/net/kissenpvp/pulvinar/command/PulvinarCommandImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..9c367b682dc0492505c20f93a5a06501c92d00c3
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/PulvinarCommandImplementation.java
@@ -0,0 +1,122 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.command;
+
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
+import net.kissenpvp.core.api.command.CommandHandler;
+import net.kissenpvp.core.command.InternalCommandImplementation;
+import net.kissenpvp.core.command.TargetValidator;
+import net.kissenpvp.core.command.argument.MethodEvaluator;
+import net.kissenpvp.core.command.handler.InternalCommandHandler;
+import net.kissenpvp.core.command.handler.PluginCommandHandler;
+import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
+import net.kissenpvp.pulvinar.api.command.CommandImplementation;
+import net.kissenpvp.pulvinar.api.command.KissenCommand;
+import net.kissenpvp.pulvinar.api.command.parser.OfflinePlayerParser;
+import net.kissenpvp.pulvinar.api.command.parser.PlayerParser;
+import net.kissenpvp.pulvinar.command.handler.CompletionExceptionHandler;
+import net.kissenpvp.pulvinar.command.handler.PlayerExceptionHandler;
+import net.kissenpvp.pulvinar.command.handler.ProfileNotFoundExceptionHandler;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+import java.text.MessageFormat;
+import java.util.Optional;
+
+/**
+ * Represents a Kissen Paper command implementation that extends the functionality of the Kissen command framework
+ * and is compatible with the Paper server platform.
+ * <p>
+ * This class extends {@link InternalCommandImplementation} and implements the {@link CommandImplementation} interface
+ * to provide specialized command handling and execution functionality tailored for the Paper server platform.
+ * It integrates seamlessly with the Kissen command framework and enhances it with Paper-specific features.
+ */
+public class PulvinarCommandImplementation extends InternalCommandImplementation<CommandSender> implements CommandImplementation
+{
+
+
+    /**
+     * Constructs a new instance of {@link PulvinarCommandImplementation}.
+     * <p>
+     * This constructor initializes the {@link MethodEvaluator} and {@link TargetValidator} instances used by this
+     * Kissen Paper command implementation for evaluating command methods and validating command execution targets.
+     */
+    public PulvinarCommandImplementation()
+    {
+        super();
+
+        // Advanced
+        getInternalHandler().registerParser(Player.class, new PlayerParser());
+        getInternalHandler().registerParser(OfflinePlayer.class, new OfflinePlayerParser());
+
+        //Exception handler
+        getInternalHandler().registerExceptionHandler(new PlayerExceptionHandler());
+        getInternalHandler().registerExceptionHandler(new CompletionExceptionHandler());
+        getInternalHandler().registerExceptionHandler(new ProfileNotFoundExceptionHandler());
+    }
+
+    @Override
+    public boolean start()
+    {
+        KissenLocalizationImplementation kissenLocalizationImplementation = Bukkit.getPulvinar().getImplementation(
+                KissenLocalizationImplementation.class);
+        kissenLocalizationImplementation.register("server.command.mojang.profile.invalid",
+                new MessageFormat("Mojangs repository does not contain the specified profile."));
+        kissenLocalizationImplementation.register("server.command.player.offline",
+                new MessageFormat("The player {0} seems to be offline."));
+        kissenLocalizationImplementation.register("server.command.failed",
+                new MessageFormat(MiniMessage.miniMessage().serialize(Component.translatable("commands.help.failed"))));
+
+        kissenLocalizationImplementation.register("server.command.general.header",
+                new MessageFormat("===== [ {0} ] ====="));
+        kissenLocalizationImplementation.register("server.command.general.header.paged",
+                new MessageFormat("===== [ {0} ({1}/{2}) ] ====="));
+        kissenLocalizationImplementation.register("server.command.general.footer",
+                new MessageFormat("===== [ {0} ] ====="));
+        kissenLocalizationImplementation.register("server.command.general.footer.paged",
+                new MessageFormat("===== [ {0} ({1}/{2}) ] ====="));
+
+        kissenLocalizationImplementation.register("server.command.general.key.value", new MessageFormat("{0}: {1}"));
+
+        return super.start();
+    }
+
+    @Override
+    protected InternalCommandHandler<CommandSender, ?> constructInternalHandler()
+    {
+        return new PulvinarInternalCommandHandler();
+    }
+
+    @Override
+    protected @NotNull PluginCommandHandler<CommandSender, ?> constructHandler(@NotNull KissenPlugin kissenPlugin)
+    {
+        return new PulvinarPluginHandler(kissenPlugin);
+    }
+
+    @Override
+    public @NotNull Optional<CommandHandler<CommandSender, KissenCommand>> getPluginHandler(@NotNull KissenPlugin kissenPlugin)
+    {
+        return getHandler().stream().filter(handler -> handler.getPlugin().equals(kissenPlugin)).map(handler -> (CommandHandler<CommandSender, KissenCommand>) handler).findFirst();
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/PulvinarInternalCommandHandler.java b/src/main/java/net/kissenpvp/pulvinar/command/PulvinarInternalCommandHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..f992acc27681505f369c03c411f23ecd15a30c64
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/PulvinarInternalCommandHandler.java
@@ -0,0 +1,53 @@
+package net.kissenpvp.pulvinar.command;
+
+import net.kissenpvp.core.command.handler.InternalCommandHandler;
+import net.kissenpvp.pulvinar.command.command.system.PulvinarCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftServer;
+import org.jetbrains.annotations.NotNull;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class PulvinarInternalCommandHandler extends InternalCommandHandler<CommandSender, PulvinarCommand>
+{
+    private static final Logger log = LoggerFactory.getLogger(PulvinarInternalCommandHandler.class);
+
+    @Override
+    protected void registerCommand(@NotNull PulvinarCommand command)
+    {
+        if(Bukkit.getCommandMap().register("Pulvinar", command))
+        {
+            ((CraftServer) Bukkit.getServer()).syncCommands();
+        }
+    }
+
+    @Override
+    protected void unregisterCommand(@NotNull PulvinarCommand command) {
+        Command loaded = Bukkit.getCommandMap().getCommand(command.getName());
+        if(loaded != null && loaded.unregister(Bukkit.getCommandMap()))
+        {
+            ((CraftServer) Bukkit.getServer()).syncCommands();
+        }
+    }
+
+    @Override
+    protected @NotNull PulvinarCommand buildCommand(@NotNull String name)
+    {
+        String rootName = name.split("\\.")[0];
+        PulvinarCommand command = getCommand(rootName).orElseGet(() ->
+        {
+            PulvinarCommand kissenCommand = new PulvinarCommand(rootName, 0, this);
+            getCommands().add(kissenCommand);
+            return kissenCommand;
+        });
+
+        if (!name.equals(rootName))
+        {
+            command = (PulvinarCommand) command.createRecursive(name);
+            getCommands().add(command);
+        }
+        return command;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/PulvinarPluginHandler.java b/src/main/java/net/kissenpvp/pulvinar/command/PulvinarPluginHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..c5bd35e458ca3a3b19ef74705fc70c2de5254341
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/PulvinarPluginHandler.java
@@ -0,0 +1,58 @@
+package net.kissenpvp.pulvinar.command;
+
+import net.kissenpvp.core.api.base.plugin.KissenPlugin;
+import net.kissenpvp.core.command.handler.PluginCommandHandler;
+import net.kissenpvp.pulvinar.command.command.plugin.PulvinarPluginCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Objects;
+
+public class PulvinarPluginHandler extends PluginCommandHandler<CommandSender, PulvinarPluginCommand>
+{
+    public PulvinarPluginHandler(@NotNull KissenPlugin plugin)
+    {
+        super(plugin);
+    }
+
+    @Override
+    protected void registerCommand(@NotNull PulvinarPluginCommand command)
+    {
+        if(Bukkit.getCommandMap().register(getPlugin().getName(), command))
+        {
+            ((CraftServer) Bukkit.getServer()).syncCommands();
+        }
+    }
+
+    @Override
+    protected void unregisterCommand(@NotNull PulvinarPluginCommand command) {
+        Command loaded = Bukkit.getCommandMap().getCommand(command.getName());
+        if(loaded != null && loaded.unregister(Bukkit.getCommandMap()))
+        {
+            ((CraftServer) Bukkit.getServer()).syncCommands();
+        }
+    }
+
+    @Override
+    protected @NotNull PulvinarPluginCommand buildCommand(@NotNull String name)
+    {
+        String rootName = name.split("\\.")[0];
+        PulvinarPluginCommand command = getCommand(rootName).orElseGet(() ->
+        {
+            PulvinarPluginCommand kissenCommand = new PulvinarPluginCommand((Plugin) getPlugin(), rootName, 0, this);
+            getCommands().add(kissenCommand);
+            return kissenCommand;
+        });
+
+        if (!Objects.equals(name, rootName))
+        {
+            command = (PulvinarPluginCommand) command.createRecursive(name);
+            getCommands().add(command);
+        }
+        return command;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/command/PulvinarAbstractCommand.java b/src/main/java/net/kissenpvp/pulvinar/command/command/PulvinarAbstractCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..478e4c8cb8afe2e54530f8cba06214cefed5c18d
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/command/PulvinarAbstractCommand.java
@@ -0,0 +1,440 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.command.command;
+
+import net.kissenpvp.core.api.command.CommandHandler;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.command.CommandTarget;
+import net.kissenpvp.core.api.command.annotations.CommandData;
+import net.kissenpvp.core.api.command.executor.CommandExecutor;
+import net.kissenpvp.core.api.command.executor.TabCompleterExecutor;
+import net.kissenpvp.core.command.CommandHolder;
+import net.kissenpvp.core.command.CommandInfo;
+import net.kissenpvp.core.command.KissenCommandPayload;
+import net.kissenpvp.core.command.TargetValidator;
+import net.kissenpvp.core.command.argument.Argument;
+import net.kissenpvp.core.command.executor.KissenCommandExecutor;
+import net.kissenpvp.pulvinar.api.command.KissenCommand;
+import net.kissenpvp.pulvinar.command.PulvinarCommandImplementation;
+import net.kissenpvp.pulvinar.command.command.system.PulvinarChildCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandException;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.*;
+import java.util.function.Function;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+/**
+ * Represents a command implementation specific to the Kissen Paper framework.
+ * <p>
+ * This class extends the {@link KissenCommand} class and serves as a command implementation tailored for the Kissen Paper framework.
+ * It provides functionality for creating and managing sub-commands within the Kissen Paper command hierarchy.
+ */
+public abstract class PulvinarAbstractCommand<C extends PulvinarAbstractCommand<C>> extends KissenCommand implements CommandHolder<CommandSender, C> {
+    private final int position;
+    private final List<C> children; //C can be plugin child or system child
+    private final CommandHandler<CommandSender, ?> handler;
+    private CommandInfo commandInfo;
+    private CommandExecutor<CommandSender> commandExecutor;
+    private TabCompleterExecutor<CommandSender> tabExecutor;
+
+    /**
+     * Constructs a new {@link PulvinarAbstractCommand} instance with the provided plugin, name, and position.
+     * <p>
+     * This constructor is used to create a new {@link PulvinarAbstractCommand} instance with the specified plugin, command name, and position in the command hierarchy.
+     *
+     * @param name     The name of the command. Must not be null.
+     * @param position The position of the command in the command hierarchy.
+     * @throws NullPointerException If either the {@code plugin} or {@code name} parameter is null.
+     */
+    public PulvinarAbstractCommand(@NotNull String name, int position, @NotNull CommandHandler<CommandSender, ?> handler) {
+        super(name);
+        this.position = position;
+        this.children = new ArrayList<>();
+        this.handler = handler;
+    }
+
+    public @NotNull CommandHandler<CommandSender, ?> getHandler() {
+        return handler;
+    }
+
+    @Override
+    public int getPosition() {
+        return position;
+    }
+
+    @Override
+    public @NotNull CommandExecutor<CommandSender> getExecutor() {
+        return (CommandExecutor<CommandSender>) Objects.requireNonNullElseGet(commandExecutor, () -> {
+            Optional<CommandHolder<?, ?>> parent = getParent();
+            return parent.map(CommandHolder::getExecutor).orElseThrow();
+        });
+    }
+
+    @Override
+    public @NotNull @Unmodifiable List<C> getChildCommandList() {
+        return Collections.unmodifiableList(children);
+    }
+
+    @Override
+    public @NotNull Optional<C> getChildCommand(@NotNull String name) {
+        Predicate<C> equalsName = (child) -> child.equals(name) || child.getAliases().contains(name);
+        return getChildCommandList().stream().filter(equalsName).findFirst();
+    }
+
+    @Override
+    public @NotNull Optional<CommandInfo> getCommandInfo() {
+        return Optional.ofNullable(commandInfo);
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+        if (!validate(sender)) {
+            return false;
+        }
+
+        if (args.length > 0) {
+            Function<C, Boolean> execute = command -> {
+                String[] newArgs = Arrays.copyOfRange(args, 1, args.length);
+                return command.execute(sender, commandLabel, newArgs);
+            };
+
+            Boolean data = getChildCommand(args[0]).map(execute).orElse(null);
+            if (data!=null) {
+                return data;
+            }
+        }
+
+        CommandPayload<CommandSender> payload = getCommandPayload(sender, commandLabel, args, getTargetValidator().parseSender(sender));
+
+        if (commandExecutor==null) {
+            sender.sendMessage(getFormattedUsage(payload));
+            return false;
+        }
+
+        if (commandInfo.isAsync()) {
+            runAsync(payload);
+            return true;
+        }
+
+        return commandExecutor.execute(payload);
+    }
+
+    @Override
+    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+        List<String> result = new ArrayList<>();
+
+        if (!validate(sender)) {
+            return result;
+        }
+
+        if (Arrays.stream(args).filter(String::isBlank).count() > 1) {
+            return Collections.emptyList();
+        }
+
+        result.addAll(isChildCommand(sender, alias, args).orElseGet(() -> {
+            //TODO add caching
+            CommandTarget target = getTargetValidator().parseSender(sender);
+            CommandPayload<CommandSender> payload = getCommandPayload(sender, alias, args, target);
+            return getTabCompletions(payload);
+        }));
+
+        final String argument = args.length > 0 ? args[args.length - 1]:""; //namespaces
+        return new ArrayList<>(result).stream().filter(currentSuggestion -> {
+            for (String currentArgument : currentSuggestion.split(":")) {
+                if (currentArgument.toLowerCase().startsWith(argument.toLowerCase())) {
+                    return true;
+                }
+            }
+            return false;
+        }).toList();
+    }
+
+
+    @Override
+    public @NotNull String getFullName() {
+        return getCommandInfo().map(CommandInfo::getName).orElse(getName());
+    }
+
+    @Override
+    public @NotNull String getUsage() {
+        return getUsage(null);
+    }
+
+    @Override
+    public @NotNull String getUsage(@Nullable CommandPayload<CommandSender> context) {
+        String usage = super.getUsage();
+        if (!usage.isBlank()) {
+            return usage;
+        }
+
+        if (getExecutor() instanceof KissenCommandExecutor<CommandSender> executor) {
+            return String.join(";", getUsages(context, executor).stream().sorted(CharSequence::compare).toArray(String[]::new));
+        }
+
+        return super.getUsage();
+    }
+
+    /**
+     * Initializes the {@link PulvinarAbstractCommand} with the provided command information and executor.
+     * <p>
+     * This method is used to initialize the properties and behavior of the {@link PulvinarAbstractCommand} based on the given command information and executor.
+     *
+     * @param commandData     The {@link CommandData} containing details about the command. Must not be null.
+     * @param commandExecutor The {@link CommandExecutor} responsible for executing the command logic. Must not be null.
+     * @throws NullPointerException If either the {@code commandInfo} or {@code commandExecutor} parameter is null.
+     */
+    @Override
+    public void initCommand(@NotNull CommandData commandData, @NotNull CommandExecutor<CommandSender> commandExecutor) {
+        if (isRegistered()) {
+            throw new IllegalStateException("This command is already registered.");
+        }
+        this.commandInfo = new CommandInfo(commandData);
+        this.commandExecutor = commandExecutor;
+
+        setAliases(Arrays.asList(commandInfo.getAliases()));
+
+        if (commandInfo.isPermissionRequired() && !commandInfo.getPermission().isBlank()) {
+            setPermission(commandInfo.getPermission());
+        }
+
+        setUsage(commandInfo.getUsage()); // might be blank, will be processed later
+
+        String description = commandInfo.getDescription();
+        if (!description.isBlank()) {
+            setDescription(description);
+        }
+
+        if (commandExecutor instanceof KissenCommandExecutor<CommandSender> executor) {
+            executor.setCommandHolder(this);
+        }
+    }
+
+    /**
+     * Initializes the tab completer for the {@link PulvinarAbstractCommand} instance.
+     * <p>
+     * This method is used to set the tab completer for the current {@link PulvinarAbstractCommand} instance.
+     * It allows the registration of a {@link TabCompleterExecutor} to handle tab completion logic for the command.
+     *
+     * @param tabExecutor The {@link TabCompleterExecutor} responsible for tab completion of the command. Must not be null.
+     * @throws IllegalStateException If the tab completer has already been initialized for this command.
+     */
+    public final void initCompleter(@NotNull TabCompleterExecutor<CommandSender> tabExecutor) {
+        if (this.tabExecutor!=null) {
+            throw new IllegalStateException("Initialization of Completer already executed.");
+        }
+
+        this.tabExecutor = tabExecutor;
+    }
+
+    /**
+     * Creates a recursive {@link PulvinarAbstractCommand} hierarchy based on the given sub-command name.
+     * <p>
+     * This method is used to create a recursive hierarchy of {@link PulvinarAbstractCommand} instances based on a provided sub-command name.
+     * The hierarchy is established by traversing the sub-command name and creating child commands accordingly.
+     * If the sub-command name is already at the current command's position, the method returns the current command itself.
+     *
+     * @param name The sub-command name representing the recursive hierarchy. Must not be null.
+     * @return The final {@link PulvinarAbstractCommand} instance at the bottom of the recursive hierarchy.
+     * @throws NullPointerException If the provided {@code name} parameter is null.
+     */
+    public @NotNull PulvinarAbstractCommand<C> createRecursive(@NotNull String name) {
+
+        int position = getPosition() + (name.split("\\.").length - 1);
+        if (position==getPosition()) {
+            return this;
+        }
+
+        String subName = name.substring(Math.max(name.indexOf('.') + 1, 0));
+
+        int index = subName.indexOf('.');
+        String nextSubCommand;
+        if (index!=-1) {
+            nextSubCommand = subName.substring(0, index);
+        } else {
+            nextSubCommand = subName;
+        }
+
+        if (!isRegistered()) {
+            setUsage("");
+        }
+
+        return getChildCommand(nextSubCommand).orElseGet(() -> {
+            C child = createChildCommand(nextSubCommand, PulvinarAbstractCommand.this);
+            children.add(child);
+            return child;
+        }).createRecursive(subName);
+    }
+
+
+    private @NotNull List<String> getUsages(@NotNull KissenCommandExecutor<CommandSender> executor) {
+        return getUsages(null, executor);
+    }
+
+    private @NotNull List<String> getUsages(@Nullable CommandPayload<CommandSender> context, @NotNull KissenCommandExecutor<CommandSender> executor) {
+        List<String> usages = new ArrayList<>();
+        String prefix = "/" + String.join(" ", getFullName().split("\\.")) + " ";
+
+        String builtUsage = executor.getEvaluator().buildUsage("").strip();
+        boolean hasPermission = (Objects.isNull(context) || validate(context.getSender()));
+        if (!builtUsage.isBlank() && commandExecutor!=null && hasPermission) {
+            usages.add(prefix + builtUsage);
+        }
+
+        for (C child : children) {
+            if (Objects.nonNull(context) && !child.validate(context.getSender())) {
+                continue;
+            }
+            KissenCommandExecutor<CommandSender> childExecutor = ((KissenCommandExecutor<CommandSender>) child.getExecutor());
+            usages.addAll(((PulvinarAbstractCommand<?>) child).getUsages(context, childExecutor));
+        }
+        return usages;
+    }
+
+    private @NotNull Optional<List<String>> isChildCommand(@NotNull CommandSender commandSender, @NotNull String alias, @NotNull String @NotNull [] arguments) {
+        for (var iterator = new Object() {
+            private int index = 0;
+
+            private int getIndex() {
+                return index;
+            }
+        }; iterator.index < arguments.length; iterator.index++) {
+            Optional<C> commandHolder = getChildCommand(arguments[iterator.getIndex()]);
+            if (commandHolder.isPresent()) {
+                return commandHolder.map(child -> child.tabComplete(commandSender, alias, Arrays.copyOfRange(arguments, iterator.getIndex() + 1, arguments.length)));
+            }
+        }
+        return Optional.empty();
+    }
+
+    private @NotNull List<String> getTabCompletions(@NotNull CommandPayload<CommandSender> commandPayload) {
+        List<String> suggestions = new ArrayList<>();
+        if (Objects.isNull(tabExecutor)) {
+            suggestions.addAll(getAutoTabCompletion(commandPayload));
+        } else {
+            suggestions.addAll(tabExecutor.execute(commandPayload));
+        }
+        suggestions.sort(String.CASE_INSENSITIVE_ORDER);
+        return suggestions;
+    }
+
+    private @NotNull Set<String> getAutoTabCompletion(@NotNull CommandPayload<CommandSender> commandPayload) {
+        int index = commandPayload.getArgumentCount();
+        Predicate<C> isCapable = (child) -> {
+            int position = index + getPosition();
+            return child.validate(commandPayload.getSender()) && Objects.equals(child.getPosition(), position);
+        };
+
+        Set<String> data = getChildCommandList().stream().filter(isCapable).flatMap(command -> {
+            Stream<String> alias = command.getAliases().stream();
+            return Stream.concat(alias, Stream.of(command.getName()));
+        }).collect(Collectors.toSet());
+
+        if (hasOwnExecutor() && getExecutor() instanceof KissenCommandExecutor<CommandSender> executor) {
+            if (executor.getEvaluator().arguments().size() > index) {
+                Argument<?, CommandSender> argument = executor.getEvaluator().arguments().get(index);
+                if (argument.argumentParser()!=null) {
+                    data.addAll(argument.argumentParser().tabCompletion(commandPayload));
+                }
+            }
+        }
+        return data;
+    }
+
+    /**
+     * Creates and registers a new {@link PulvinarChildCommand} as a child command of this command.
+     * <p>
+     * This method is used to create a new {@link PulvinarChildCommand} instance with the provided subcommand name and
+     * registers it as a child command of the current command. The newly created child command is added to the list of children
+     * for this command.
+     *
+     * @param nextSubCommand The name of the subcommand to create. Must not be null.
+     * @return The newly created and registered {@link PulvinarChildCommand} instance.
+     * @throws NullPointerException If the {@code nextSubCommand} parameter is null.
+     */
+    protected abstract @NotNull C createChildCommand(@NotNull String nextSubCommand, @NotNull PulvinarAbstractCommand<C> parent);
+
+    /**
+     * Validates whether a command can be executed by the given {@link CommandSender}.
+     * <p>
+     * This method is used to validate whether a command can be executed by the provided {@link CommandSender}.
+     * Validation checks may include verifying the plugin's enabled status, the type of command sender, and other conditions.
+     *
+     * @param commandSender The {@link CommandSender} attempting to execute the command. Must not be null.
+     * @return {@code true} if the command can be executed by the given command sender, {@code false} otherwise.
+     * @throws CommandException     If the plugin associated with the command is not enabled.
+     * @throws NullPointerException If the provided {@code commandSender} parameter is null.
+     */
+    public boolean validate(@NotNull CommandSender commandSender) {
+        if (Objects.isNull(commandExecutor) && children.stream().noneMatch(child -> child.validate(commandSender))) {
+            return false;
+        } else if (Objects.nonNull(getPermission()) && !commandSender.hasPermission(getPermission())) {
+            return false;
+        }
+        CommandTarget target = getCommandInfo().map(CommandInfo::getTarget).orElse(CommandTarget.ALL);
+        return getTargetValidator().validate(target, commandSender);
+    }
+
+    /**
+     * Retrieves the {@link TargetValidator} associated with the command implementation.
+     * <p>
+     * This method is used to obtain the {@link TargetValidator} that is responsible for validating target entities
+     * related to the execution of a command. The validator is specific to the Kissen Paper command implementation.
+     *
+     * @return The {@link TargetValidator} associated with the command implementation.
+     */
+    public @NotNull TargetValidator getTargetValidator() {
+        return Bukkit.getPulvinar().getImplementation(PulvinarCommandImplementation.class).getTargetValidator();
+    }
+
+    /**
+     * Asynchronously executes the function defined in the command payload.
+     *
+     * <p>This abstract method facilitates asynchronous execution of code paths within commands,
+     * which can be useful when performing potentially lengthy operations such as file access or network communication.
+     * This prevents blocking operations from freezing the thread that the command is currently executing on,
+     * helping avoid potential server lag or non-responsiveness.</p>
+     *
+     * <p>All subclasses must provide an implementation for this method, ensuring that the command payload function is task asynchronously.
+     * The implementation may use the server's scheduler, a thread pool, or any other method of asynchronous execution.</p>
+     *
+     * @param payload A CommandPayload object that encapsulates the command, sender, command related data and a function to execute.
+     *                The exact function varies among different commands and is defined when the payload is constructed.
+     */
+    public abstract void runAsync(@NotNull CommandPayload<CommandSender> payload);
+
+    private boolean hasOwnExecutor() {
+        return commandExecutor!=null;
+    }
+
+    private @NotNull CommandPayload<CommandSender> getCommandPayload(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args, CommandTarget target) {
+        return new KissenCommandPayload<>(alias, sender, target, args, PulvinarAbstractCommand.this) {
+            @Override
+            protected @NotNull CommandHandler<CommandSender, ?> getHandler() {
+                return PulvinarAbstractCommand.this.getHandler();
+            }
+        };
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/command/plugin/PulvinarPluginChildCommand.java b/src/main/java/net/kissenpvp/pulvinar/command/command/plugin/PulvinarPluginChildCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..8c97261922f332b82cf7800ee2c99c6d2f5f6052
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/command/plugin/PulvinarPluginChildCommand.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.command.command.plugin;
+
+import net.kissenpvp.core.command.CommandHolder;
+import net.kissenpvp.pulvinar.command.command.PulvinarAbstractCommand;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+/**
+ * Represents a child command within the Kissen Paper command framework, specifically designed for plugin-related commands.
+ * <p>
+ * This class extends {@link PulvinarPluginCommand} and provides functionality for creating and managing child commands
+ * related to a specific plugin. Child commands of this type belong to a parent plugin command and are organized in a hierarchical structure.
+ */
+public class PulvinarPluginChildCommand extends PulvinarPluginCommand {
+    private final PulvinarAbstractCommand<PulvinarPluginChildCommand> parent;
+
+    /**
+     * Constructs a new {@link PulvinarPluginChildCommand} with the specified plugin, name, and parent command.
+     *
+     * @param plugin The plugin to which this child command belongs. Must not be null.
+     * @param name   The name of the child command. Must not be null.
+     * @param parent The parent command to which this child command belongs. Must not be null.
+     * @throws NullPointerException If any of the parameters is null.
+     */
+    public PulvinarPluginChildCommand(@NotNull Plugin plugin, @NotNull String name, @NotNull PulvinarAbstractCommand<PulvinarPluginChildCommand> parent) {
+        super(plugin, name, parent.getPosition() + 1, parent.getHandler());
+        this.parent = parent;
+    }
+
+    @Override
+    public @NotNull String getFullName() {
+        return parent.getFullName() + "." + getName();
+    }
+
+
+    @Override
+    public @NotNull Optional<CommandHolder<?, ?>> getParent()
+    {
+        return Optional.of(parent);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/command/plugin/PulvinarPluginCommand.java b/src/main/java/net/kissenpvp/pulvinar/command/command/plugin/PulvinarPluginCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..7689da7004aa5fa83b67fb1e6b237fbf35cdb12b
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/command/plugin/PulvinarPluginCommand.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.command.command.plugin;
+
+import net.kissenpvp.core.api.command.CommandHandler;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.pulvinar.command.command.PulvinarAbstractCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandException;
+import org.bukkit.command.CommandSender;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+/**
+ * Represents a top-level Kissen Paper command specifically designed for plugin-related commands.
+ * <p>
+ * This class extends {@link PulvinarAbstractCommand} and provides functionality for creating and managing plugin-related commands.
+ * It is used as a container for subcommands related to a specific plugin and supports the creation of child commands using the specified parent command.
+ */
+public class PulvinarPluginCommand extends PulvinarAbstractCommand<PulvinarPluginChildCommand> {
+
+    private final Plugin plugin;
+
+    /**
+     * Constructs a new {@link PulvinarAbstractCommand} instance with the provided plugin, name, and position.
+     * <p>
+     * This constructor is used to create a new {@link PulvinarAbstractCommand} instance with the specified plugin, command name, and position in the command hierarchy.
+     *
+     * @param plugin   The {@link Plugin} that owns this command. Must not be null.
+     * @param name     The name of the command. Must not be null.
+     * @param position The position of the command in the command hierarchy.
+     * @throws NullPointerException If either the {@code plugin} or {@code name} parameter is null.
+     */
+    public PulvinarPluginCommand(@NotNull Plugin plugin, @NotNull String name, int position, CommandHandler<CommandSender, ?> handler) {
+        super(name, position, handler);
+        this.plugin = plugin;
+    }
+
+    @Override
+    public @NotNull Optional<PulvinarPluginChildCommand> getChildCommand(@NotNull String name) {
+        return super.getChildCommand(name);
+    }
+
+    @Override
+    public void runAsync(@NotNull CommandPayload<CommandSender> payload) {
+        Bukkit.getAsyncScheduler().runNow(getPlugin(), scheduledTask -> getExecutor().execute(payload));
+    }
+
+    @Override
+    protected @NotNull PulvinarPluginChildCommand createChildCommand(@NotNull String nextSubCommand, @NotNull PulvinarAbstractCommand<PulvinarPluginChildCommand> parent) {
+        return new PulvinarPluginChildCommand(plugin, nextSubCommand, parent);
+    }
+
+    @Override
+    public boolean validate(@NotNull CommandSender commandSender) {
+        if (!this.plugin.isEnabled()) {
+            throw new CommandException(String.format("Plugin '%s' is not enabled.", plugin.getName()), new IllegalStateException());
+        }
+
+        return super.validate(commandSender);
+    }
+
+    /**
+     * Retrieves the Plugin associated with this command execution.
+     *
+     * @return The Plugin instance representing the plugin responsible for handling the command.
+     */
+    public @NotNull Plugin getPlugin() {
+        return plugin;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/command/system/PulvinarChildCommand.java b/src/main/java/net/kissenpvp/pulvinar/command/command/system/PulvinarChildCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..848da333c2f6770a6a486739a55915334a810df7
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/command/system/PulvinarChildCommand.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.command.command.system;
+
+import net.kissenpvp.core.command.CommandHolder;
+import net.kissenpvp.pulvinar.command.command.PulvinarAbstractCommand;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+/**
+ * Represents a child command within the Kissen Paper command framework.
+ * <p>
+ * This class extends {@link PulvinarCommand} and provides functionality for creating and managing child commands.
+ * Child commands are subcommands that belong to a parent command and are organized in a hierarchical structure.
+ */
+public class PulvinarChildCommand extends PulvinarCommand {
+
+    private final PulvinarAbstractCommand<PulvinarChildCommand> parent;
+
+    /**
+     * Constructs a new {@link PulvinarChildCommand} with the specified name and parent command.
+     *
+     * @param name   The name of the child command. Must not be null.
+     * @param parent The parent command to which this child command belongs. Must not be null.
+     * @throws IllegalArgumentException If the {@code name} is null.
+     * @throws NullPointerException     If the {@code parent} is null.
+     */
+    public PulvinarChildCommand(@NotNull String name, @NotNull PulvinarAbstractCommand<PulvinarChildCommand> parent) {
+        super(name, parent.getPosition() + 1, parent.getHandler());
+        this.parent = parent;
+    }
+
+    @Override
+    public @NotNull String getFullName() {
+        return parent.getFullName() + "." + getName();
+    }
+
+    @Override
+    public @NotNull Optional<CommandHolder<?, ?>> getParent()
+    {
+        return Optional.of(parent);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/command/system/PulvinarCommand.java b/src/main/java/net/kissenpvp/pulvinar/command/command/system/PulvinarCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..b3fd327054c33f71849815cafbc0f9090d8193e2
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/command/system/PulvinarCommand.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.command.command.system;
+
+import net.kissenpvp.core.api.command.CommandHandler;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.pulvinar.command.command.PulvinarAbstractCommand;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+/**
+ * Represents a top-level Kissen Paper command within the command hierarchy.
+ * <p>
+ * This class extends {@link PulvinarAbstractCommand} and provides functionality for creating and managing top-level Kissen Paper commands.
+ * It is used as a container for subcommands and supports the creation of child commands using the specified parent command.
+ */
+public class PulvinarCommand extends PulvinarAbstractCommand<PulvinarChildCommand>
+{
+    private static final ExecutorService executorService;
+
+    static
+    {
+        executorService = Executors.newSingleThreadExecutor();
+    }
+
+    /**
+     * Constructs a new {@link PulvinarCommand} with the specified name and position.
+     *
+     * @param name     The name of the command. Must not be null.
+     * @param position The position of the command. Must be non-negative.
+     * @throws IllegalArgumentException If the {@code name} is null or if the {@code position} is negative.
+     */
+    public PulvinarCommand(@NotNull String name, int position, @NotNull CommandHandler<CommandSender, ?> handler) {
+        super(name, position, handler);
+    }
+
+    @Override
+    public void runAsync(@NotNull CommandPayload<CommandSender> payload) {
+        executorService.execute(() -> getExecutor().execute(payload));
+    }
+
+    @Override
+    protected @NotNull PulvinarChildCommand createChildCommand(@NotNull String nextSubCommand, @NotNull PulvinarAbstractCommand<PulvinarChildCommand> parent) {
+        return new PulvinarChildCommand(nextSubCommand, parent);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/confirmation/ConfirmCommand.java b/src/main/java/net/kissenpvp/pulvinar/command/confirmation/ConfirmCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..1741effd646acdc769b51631e88499e2a1ee854b
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/confirmation/ConfirmCommand.java
@@ -0,0 +1,67 @@
+package net.kissenpvp.pulvinar.command.confirmation;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.command.annotations.CommandData;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * The {@code ConfirmCommand} class provides command handlers for confirming and canceling actions with a confirmation request.
+ * It is part of the KissenPvP command framework and is designed to work in conjunction with the confirmation system provided by the Pulvinar plugin.
+ * The class includes methods for confirming and canceling actions, using a confirmation implementation obtained from the KissenPvP plugin.
+ *
+ * <p>The confirmation commands are defined using the {@link CommandData} annotation, specifying the command labels "confirm" and "cancel" respectively.
+ * When executed, these commands interact with the associated confirmation implementation to confirm or cancel actions based on the sender's request.</p>
+ *
+ * <p>The class uses the {@link CommandPayload} interface to handle command execution payloads, providing access to the command sender and related information.</p>
+ *
+ * @see CommandData
+ * @see CommandPayload
+ * @see PulvinarConfirmationImplementation
+ * @see Component
+ */
+public class ConfirmCommand
+{
+
+    /**
+     * Handles the execution of the "confirm" command, confirming a pending action.
+     * Uses the PulvinarConfirmationImplementation to perform the confirmation action.
+     *
+     * @param commandPayload The CommandPayload containing information about the command execution.
+     */
+    @CommandData("confirm")
+    public void confirm(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        if(!getImplementation().execute(commandPayload.getSender(), false))
+        {
+            commandPayload.getSender().sendMessage(Component.translatable("server.command.confirm.no.request"));
+        }
+    }
+
+    /**
+     * Handles the execution of the "cancel" command, canceling a pending action.
+     * Uses the PulvinarConfirmationImplementation to perform the cancellation action.
+     *
+     * @param commandPayload The CommandPayload containing information about the command execution.
+     */
+    @CommandData("cancel")
+    public void cancel(@NotNull CommandPayload<CommandSender> commandPayload)
+    {
+        if(!getImplementation().execute(commandPayload.getSender(), true))
+        {
+            commandPayload.getSender().sendMessage(Component.translatable("server.command.confirm.no.request"));
+        }
+    }
+
+    /**
+     * Retrieves the PulvinarConfirmationImplementation responsible for handling confirmation requests.
+     *
+     * @return The PulvinarConfirmationImplementation instance associated with the KissenPvP plugin.
+     */
+    private @NotNull PulvinarConfirmationImplementation getImplementation()
+    {
+        return Bukkit.getPulvinar().getImplementation(PulvinarConfirmationImplementation.class);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/confirmation/PulvinarConfirmationImplementation.java b/src/main/java/net/kissenpvp/pulvinar/command/confirmation/PulvinarConfirmationImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..5e65591b66ff95a2f607a1b9c583216b7f5e6660
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/confirmation/PulvinarConfirmationImplementation.java
@@ -0,0 +1,36 @@
+package net.kissenpvp.pulvinar.command.confirmation;
+
+
+import net.kissenpvp.core.api.command.CommandHandler;
+import net.kissenpvp.core.command.confirmation.KissenConfirmationImplementation;
+import net.kissenpvp.pulvinar.command.PulvinarCommandImplementation;
+import org.bukkit.Bukkit;
+
+/**
+ * The {@code PulvinarConfirmationImplementation} class extends {@code KissenConfirmationImplementation} and
+ * provides platform-specific functionality for handling confirmation requests in the KissenPvP plugin on the Paper platform.
+ * It overrides methods from its superclass to customize setup and check whether the server is running.
+ *
+ * <p>During the setup, it registers the confirmation-related command handlers, such as the "confirm" and "cancel" commands,
+ * using the {@link ConfirmCommand} class.</p>
+ *
+ * <p>This class is intended to be used in conjunction with the confirmation system in the KissenPvP, extending and
+ * adapting the functionality for the Paper platform.</p>
+ *
+ * @see KissenConfirmationImplementation
+ * @see PulvinarCommandImplementation
+ * @see ConfirmCommand
+ */
+public class PulvinarConfirmationImplementation extends KissenConfirmationImplementation {
+
+    @Override
+    public void setupComplete() {
+        CommandHandler<?, ?> handler = Bukkit.getPulvinar().getImplementation(PulvinarCommandImplementation.class).getInternalHandler();
+        handler.registerCommand(new ConfirmCommand());
+    }
+
+    @Override
+    protected boolean isServerRunning() {
+        return !Bukkit.getServer().isStopping();
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/handler/CompletionExceptionHandler.java b/src/main/java/net/kissenpvp/pulvinar/command/handler/CompletionExceptionHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..23fbb791771528850391a5cf8fe366b5a9cb9efd
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/handler/CompletionExceptionHandler.java
@@ -0,0 +1,16 @@
+package net.kissenpvp.pulvinar.command.handler;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.pulvinar.api.command.CommandExceptionHandler;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.concurrent.CompletionException;
+
+public class CompletionExceptionHandler implements CommandExceptionHandler<CompletionException> {
+    @Override
+    public boolean handle(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull CompletionException throwable) {
+        return true;
+        // TODO return Optional.ofNullable(throwable.getCause()).map(cause -> KissenCore.getInstance().getImplementation(KissenCommandImplementation.class).handle(commandPayload, cause)).orElse(false);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/handler/PlayerExceptionHandler.java b/src/main/java/net/kissenpvp/pulvinar/command/handler/PlayerExceptionHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..80cd2fd1422dbf3d22746e5a7674ecfbbb325d6c
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/handler/PlayerExceptionHandler.java
@@ -0,0 +1,17 @@
+package net.kissenpvp.pulvinar.command.handler;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.networking.client.entitiy.PlayerOfflineException;
+import net.kissenpvp.pulvinar.api.command.CommandExceptionHandler;
+import net.kyori.adventure.text.Component;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+public class PlayerExceptionHandler implements CommandExceptionHandler<PlayerOfflineException> {
+    @Override
+    public boolean handle(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull PlayerOfflineException throwable) {
+
+        commandPayload.getSender().sendMessage(Component.translatable("server.command.player.offline", Component.text(throwable.getName())));
+        return true;
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/command/handler/ProfileNotFoundExceptionHandler.java b/src/main/java/net/kissenpvp/pulvinar/command/handler/ProfileNotFoundExceptionHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..225153f69fc8785f4ba4ebc99b272ba3a07f8926
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/command/handler/ProfileNotFoundExceptionHandler.java
@@ -0,0 +1,17 @@
+package net.kissenpvp.pulvinar.command.handler;
+
+import com.mojang.authlib.yggdrasil.ProfileNotFoundException;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.pulvinar.api.command.CommandExceptionHandler;
+import net.kyori.adventure.text.Component;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+public class ProfileNotFoundExceptionHandler implements CommandExceptionHandler<ProfileNotFoundException> {
+    @Override
+    public boolean handle(@NotNull CommandPayload<CommandSender> commandPayload, @NotNull ProfileNotFoundException throwable) {
+
+        commandPayload.getSender().sendMessage(Component.translatable("server.command.mojang.profile.invalid"));
+        return true;
+    }
+}
