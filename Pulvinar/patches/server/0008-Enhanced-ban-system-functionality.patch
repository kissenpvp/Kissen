From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Groldi <chniucg@gmail.com>
Date: Sun, 24 Sep 2023 13:30:52 +0200
Subject: [PATCH] Enhanced ban system functionality


diff --git a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
index e83f9517b31c5171b8dc75ab63a5bfe654221c84..f8d56e786b81d3763accd5bf84f7ae7c58e46c65 100644
--- a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
+++ b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
@@ -145,9 +145,14 @@ public final class ChatProcessor {
     }
 
     private void processModern(final ChatRenderer renderer, final Set<Audience> viewers, final Component message, final Player player, final boolean cancelled) {
+        // Pulvinar start - integrate mute
+        net.kissenpvp.pulvinar.api.ban.BanImplementation paperBanImplementation = org.bukkit.Bukkit.getPulvinar().getImplementation(net.kissenpvp.pulvinar.api.ban.BanImplementation.class);
+        java.util.Optional<net.kissenpvp.pulvinar.api.ban.Punishment> mute = paperBanImplementation.getLatestPunishment(player.getTotalID(), net.kissenpvp.core.api.ban.BanType.MUTE);
+        // Pulvinar end
+
         final PlayerChatMessage.AdventureView signedMessage = this.message.adventureView();
         final AsyncChatEvent ae = new AsyncChatEvent(this.async, player, viewers, renderer, message, this.paper$originalMessage, signedMessage);
-        ae.setCancelled(cancelled); // propagate cancelled state
+        ae.setCancelled(cancelled || mute.isPresent()); // propagate cancelled state // Pulvinar - set true if muted
         this.post(ae);
         final boolean listenersOnSyncEvent = canYouHearMe(ChatEvent.getHandlerList());
         if (listenersOnSyncEvent) {
@@ -158,13 +163,22 @@ public final class ChatProcessor {
                     se.setCancelled(ae.isCancelled()); // propagate cancelled state
                     ChatProcessor.this.post(se);
                     ChatProcessor.this.readModernModifications(se, renderer);
-                    ChatProcessor.this.complete(se);
+                    // Pulvinar start - integrate mute
+                    if(allowedToSend(player, mute.orElse(null), se.isCancelled()))
+                    {
+                        ChatProcessor.this.complete(se);
+                    }
                     return null;
                 }
             });
         } else {
             this.readModernModifications(ae, renderer);
-            this.complete(ae);
+            // Pulvinar start - integrate mute
+            if(allowedToSend(player, mute.orElse(null), ae.isCancelled()))
+            {
+                this.complete(ae);
+            }
+            // Pulvinar end
         }
     }
 
@@ -381,4 +395,33 @@ public final class ChatProcessor {
     static boolean canYouHearMe(final HandlerList handlers) {
         return handlers.getRegisteredListeners().length > 0;
     }
+
+    // Pulvinar start
+    /**
+     * Determines whether a player is allowed to send a message based on specified conditions.
+     * <p>
+     * This method evaluates the provided parameters and decides whether the player is allowed to send a message.
+     * The decision depends on the values of the 'muted' and 'cancelled' parameters. If both parameters are true,
+     * indicating that the player is both muted and the action is cancelled, a message is sent to the player
+     * notifying them about being muted, and the method returns false to indicate that the player is not allowed
+     * to send the message. Otherwise, the method returns true, allowing the player to send the message.
+     *
+     * @param player The player who intends to send a message. Must not be null.
+     * @param mute  A boolean flag indicating whether the player is muted. If true, the player is considered muted.
+     * @param cancelled A boolean flag indicating whether the action is cancelled. If true, the action is considered cancelled.
+     * @return true if the player is allowed to send the message, false otherwise.
+     *
+     * @throws NullPointerException If the 'player' parameter is null.
+     */
+    private boolean allowedToSend(@org.jetbrains.annotations.NotNull Player player, @org.jetbrains.annotations.Nullable net.kissenpvp.pulvinar.api.ban.Punishment mute, boolean cancelled)
+    {
+        if(mute != null && cancelled)
+        {
+            //mute is not null
+            player.sendMessage(mute.getPunishmentText(player.getCurrentLocale()));
+            return false;
+        }
+        return true;
+    }
+    // Pulvinar end
 }
diff --git a/src/main/java/net/kissenpvp/pulvinar/ban/MinecraftBanTemplate.java b/src/main/java/net/kissenpvp/pulvinar/ban/MinecraftBanTemplate.java
new file mode 100644
index 0000000000000000000000000000000000000000..533aa48a0e3134278dd9b4330c44b62fd3b0bb82
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/ban/MinecraftBanTemplate.java
@@ -0,0 +1,61 @@
+package net.kissenpvp.pulvinar.ban;
+
+import net.kissenpvp.core.api.ban.BanType;
+import net.kissenpvp.core.api.event.EventCancelledException;
+import net.kissenpvp.core.api.time.AccurateDuration;
+import net.kissenpvp.pulvinar.api.ban.BanTemplate;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Optional;
+
+public class MinecraftBanTemplate implements BanTemplate {
+
+    private final BanType banType;
+    private final AccurateDuration duration;
+
+    public MinecraftBanTemplate(BanType banType, AccurateDuration duration) {
+        this.banType = banType;
+        this.duration = duration;
+    }
+
+    @Override
+    public int getID() {
+        return -1;
+    }
+
+    @Override
+    public @NotNull String getName() {
+        return "Minecraft";
+    }
+
+    @Override
+    public void setName(@NotNull String name) throws EventCancelledException {
+        throw new EventCancelledException(new UnsupportedOperationException());
+    }
+
+    @Override
+    public @NotNull BanType getBanType() {
+        return banType;
+    }
+
+    @Override
+    public void setBanType(@NotNull BanType banType) throws EventCancelledException {
+        throw new EventCancelledException(new UnsupportedOperationException());
+    }
+
+    @Override
+    public @NotNull Optional<AccurateDuration> getDuration() {
+        return Optional.ofNullable(duration);
+    }
+
+    @Override
+    public void setDuration(@Nullable AccurateDuration duration) throws EventCancelledException {
+        throw new EventCancelledException(new UnsupportedOperationException());
+    }
+
+    @Override
+    public int delete()  {
+        throw new EventCancelledException(new UnsupportedOperationException());
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarBanImplementation.java b/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarBanImplementation.java
new file mode 100644
index 0000000000000000000000000000000000000000..7c6d714ac14c06f83b7110b6e347cb074b71ae3c
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarBanImplementation.java
@@ -0,0 +1,466 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.ban;
+
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.mojang.authlib.GameProfile;
+import net.kissenpvp.core.api.ban.BanType;
+import net.kissenpvp.core.api.database.connection.DatabaseConnection;
+import net.kissenpvp.core.api.database.connection.DatabaseImplementation;
+import net.kissenpvp.core.api.database.meta.BackendException;
+import net.kissenpvp.core.api.database.meta.Meta;
+import net.kissenpvp.core.api.database.savable.Savable;
+import net.kissenpvp.core.api.message.localization.LocalizationImplementation;
+import net.kissenpvp.core.api.networking.client.entitiy.ServerEntity;
+import net.kissenpvp.core.api.time.AccurateDuration;
+import net.kissenpvp.core.api.time.TimeImplementation;
+import net.kissenpvp.core.api.user.User;
+import net.kissenpvp.core.ban.KissenBanImplementation;
+import net.kissenpvp.core.ban.KissenPunishmentNode;
+import net.kissenpvp.core.base.KissenCore;
+import net.kissenpvp.core.base.KissenImplementation;
+import net.kissenpvp.core.command.InternalCommandImplementation;
+import net.kissenpvp.core.database.KissenTable;
+import net.kissenpvp.core.message.localization.KissenLocalizationImplementation;
+import net.kissenpvp.pulvinar.api.ban.*;
+import net.kissenpvp.pulvinar.api.base.Context;
+import net.kissenpvp.pulvinar.ban.command.BanCommand;
+import net.kissenpvp.pulvinar.ban.warn.command.WarnCommand;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.BanEntry;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerKickEvent;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.text.MessageFormat;
+import java.time.Duration;
+import java.time.Instant;
+import java.time.temporal.ChronoUnit;
+import java.util.*;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class PulvinarBanImplementation extends KissenBanImplementation<BanTemplate, Punishment> implements BanImplementation, KissenImplementation {
+
+    private KissenTable privateTable;
+
+    @Override
+    public boolean preStart() {
+        DatabaseImplementation database = Bukkit.getPulvinar().getImplementation(DatabaseImplementation.class);
+        DatabaseConnection connection = database.getConnection("private").orElseGet(database::getPrimaryConnection);
+        privateTable = (KissenTable) connection.createTable("kissen_private_ban_meta");
+        return super.preStart();
+    }
+
+    @Override
+    public boolean start() {
+        KissenLocalizationImplementation kissenLocalizationImplementation = KissenCore.getInstance().getImplementation(KissenLocalizationImplementation.class);
+        kissenLocalizationImplementation.register("server.ban.created.permanent", new MessageFormat("The ban has been created with the ID {0}, designated with the name {1}, classified under the type {2}, and assigned a permanent duration."));
+        kissenLocalizationImplementation.register("server.ban.create.override", new MessageFormat("There is already a ban having the id {0}. If you want to override this ban type /confirm. If you don't want to override the ban use /cancel"));
+        kissenLocalizationImplementation.register("server.ban.created", new MessageFormat("The ban has been created with the ID {0}, designated with the name {1}, classified under the type {2}, and assigned a duration of {3}."));
+        kissenLocalizationImplementation.register("server.ban.deleted", new MessageFormat("The ban with ID {0} was successfully deleted."));
+        kissenLocalizationImplementation.register("server.ban.invalid", new MessageFormat("The ban with ID {0} was not found."));
+        kissenLocalizationImplementation.register("server.ban.punishment.invalid", new MessageFormat("The punishment with ID {0} was not found."));
+        kissenLocalizationImplementation.register("server.ban.punishment.pardoned", new MessageFormat("The ban, bearing the ID {0}, has been revoked."));
+
+        kissenLocalizationImplementation.register("server.ban.punishment.compact", new MessageFormat("[{7}] [{3}] {1} #{0}"));
+        kissenLocalizationImplementation.register("server.ban.compact", new MessageFormat("[{0}] [{2}] {1}"));
+
+        kissenLocalizationImplementation.register("server.ban.punishment.operator", new MessageFormat("Operator"));
+        kissenLocalizationImplementation.register("server.ban.punishment.cause", new MessageFormat("Cause"));
+        kissenLocalizationImplementation.register("server.ban.punishment.start", new MessageFormat("Start"));
+        kissenLocalizationImplementation.register("server.ban.punishment.actual.end", new MessageFormat("Actual End"));
+        kissenLocalizationImplementation.register("server.ban.punishment.predicted.end", new MessageFormat("Expected End"));
+
+        kissenLocalizationImplementation.register("server.ban.punishment.end.never", new MessageFormat("never"));
+        kissenLocalizationImplementation.register("server.ban.history.empty", new MessageFormat("The punishment history of {0} is empty."));
+        kissenLocalizationImplementation.register("server.ban.warn.ban", new MessageFormat("The player {0} already has {1} warn(s). Do you want to punish the player instead?\n{2} {3}"));
+        kissenLocalizationImplementation.register("server.ban.warn.clear", new MessageFormat("The warn(s) of the player {0} have been reset."));
+        kissenLocalizationImplementation.register("server.ban.no.warns", new MessageFormat("Player {0} has no warns yet."));
+        kissenLocalizationImplementation.register("server.ban.player.warned", new MessageFormat("Player {0} has been warned {1} time(s)."));
+        kissenLocalizationImplementation.register("server.ban.player.warned.cause", new MessageFormat("Player {0} has been warned {1} times(s) with the cause: {2}."));
+        kissenLocalizationImplementation.register("server.ban.player.warned.target", new MessageFormat("Warned for {0}!"));
+
+        InternalCommandImplementation<CommandSender> command = Bukkit.getPulvinar().getImplementation(InternalCommandImplementation.class);
+        command.getInternalHandler().registerParser(BanTemplate.class, new BanParser());
+        command.getInternalHandler().registerParser(Punishment.class, new PunishmentParser());
+        command.getInternalHandler().registerExceptionHandler(new BanParser());
+        command.getInternalHandler().registerExceptionHandler(new PunishmentParser());
+        return super.start();
+    }
+
+    @Override
+    public void setupComplete() {
+        InternalCommandImplementation<CommandSender> command = Bukkit.getPulvinar().getImplementation(InternalCommandImplementation.class);
+        command.getInternalHandler().registerCommand(new BanCommand());
+        command.getInternalHandler().registerCommand(new WarnCommand());
+    }
+
+    @Override
+    public void applyBan(@NotNull Punishment ban) {
+        ban.getOnlineAffectedPlayers().forEach(player -> applyBan(ban, player));
+    }
+
+    @Override
+    protected @NotNull @Unmodifiable Set<BanTemplate> fetchBanSet() {
+        Set<BanTemplate> privateBans = translate(getMeta(Context.LOCAL).getData((Savable<?>) createObject()).join());
+        return Stream.concat(super.fetchBanSet().stream(), privateBans.stream()).collect(Collectors.toUnmodifiableSet());
+    }
+
+    @Override
+    protected @NotNull BanTemplate createObject() {
+        return new PulvinarBanTemplate();
+    }
+
+    @Override
+    protected @NotNull PulvinarPunishment translatePunishment(@NotNull UUID totalID, @NotNull KissenPunishmentNode kissenPunishmentNode, @NotNull Meta meta) {
+        return new PulvinarPunishment(totalID, kissenPunishmentNode, record -> set(totalID, record, meta));
+    }
+
+    @Override
+    public @NotNull @Unmodifiable Set<Punishment> getPunishmentSet(@NotNull Context context) throws BackendException {
+        return getPunishmentSet(getMeta(context));
+    }
+
+    @Override
+    public @NotNull @Unmodifiable Set<Punishment> getPunishmentSet(@NotNull UUID totalID, @NotNull Context context) throws BackendException {
+        return getPunishmentSet(totalID, getMeta(context));
+    }
+
+    @Override
+    public @NotNull Optional<Punishment> getLatestPunishment(@NotNull UUID totalID, @NotNull Context context) throws BackendException {
+        return getLatestPunishment(totalID, getMeta(context));
+    }
+
+    @Override
+    public @NotNull Optional<Punishment> getLatestPunishment(@NotNull UUID totalID, @NotNull BanType banType, @NotNull Context context) throws BackendException {
+        return getLatestPunishment(totalID, banType, getMeta(context));
+    }
+
+    @Override
+    public @NotNull Punishment punish(@NotNull UUID totalID, @NotNull BanTemplate ban, @NotNull ServerEntity banOperator, @Nullable Component cause, @NotNull Context context) throws BackendException {
+        return punish(totalID, ban, banOperator, true, cause);
+    }
+
+    @Override
+    public @NotNull Punishment punish(@NotNull UUID totalID, @NotNull BanTemplate ban, @NotNull ServerEntity banOperator, @NotNull Context context) throws BackendException {
+        return punish(totalID, ban, banOperator, true, context);
+    }
+
+    @Override
+    public @NotNull Punishment punish(@NotNull UUID totalID, @NotNull BanTemplate ban, @NotNull ServerEntity banOperator, boolean apply, @NotNull Context context) throws BackendException {
+        return punish(totalID, ban, banOperator, apply, null, context);
+    }
+
+    @Override
+    public @NotNull Punishment punish(@NotNull UUID totalID, @NotNull BanTemplate ban, @NotNull ServerEntity banOperator, boolean apply, @Nullable Component cause, @NotNull Context context) throws BackendException {
+        return punish(totalID, ban, banOperator, apply, cause, getMeta(context));
+    }
+
+    protected @NotNull KissenTable getTable(@NotNull Context context) {
+        return switch (context) {
+            case GLOBAL -> super.getTable();
+            case LOCAL -> privateTable;
+        };
+    }
+
+    private void applyBan(@NotNull Punishment ban, @NotNull Player player) {
+        switch (ban.getBanType()) {
+            case BAN -> {
+                Component banned = Component.translatable("multiplayer.disconnect.banned");
+                player.kick(banned, PlayerKickEvent.Cause.BANNED);
+            }
+            case KICK -> {
+                Component kicked = Component.translatable("multiplayer.disconnect.kicked");
+                player.kick(kicked, PlayerKickEvent.Cause.KICK_COMMAND);
+            }
+            case MUTE -> {
+                Component mute = Component.translatable("chat.filtered_full");
+                player.sendMessage(mute);
+            }
+        }
+    }
+
+    /**
+     * Retrieves the metadata associated with the specified context.
+     *
+     * <p>The {@code getMeta(Context)} method returns the metadata associated with the specified {@link Context}. It allows access to either the global
+     * metadata or the local metadata, depending on the provided context. The global metadata is obtained by invoking the {@link #getTable()} method,
+     * while the local metadata is accessed through the private {@code privateMeta} field.</p>
+     *
+     * @param context The context to determine which meta information to retrieve.
+     * @return The meta information based on the provided context.
+     */
+    protected @NotNull @Unmodifiable Meta getMeta(@NotNull Context context) {
+        return getTable(context).setupMeta(null);
+    }
+    // Bukkit
+
+    @Override
+    public @NotNull <E extends BanEntry<? super PlayerProfile>> Set<E> getEntries() {
+        return getPunishmentSet().stream().map(punishment -> (E) punishment).collect(Collectors.toSet());
+    }
+
+    @Override
+    public <E extends BanEntry<? super PlayerProfile>> @Nullable E getBanEntry(@NotNull String target) {
+        return (E) getBanEntry(Objects.requireNonNull(resolvePlayerProfile(target)));
+    }
+
+    @Override
+    public @Nullable BanEntry<PlayerProfile> getBanEntry(@NotNull PlayerProfile target) {
+        return getLatestPunishment(Objects.requireNonNull(target.getId())).orElse(null);
+    }
+
+    @SuppressWarnings("rawtypes") // overridden (minecraft)
+    @Override
+    public @NotNull Set<BanEntry> getBanEntries() {
+        return getPunishmentSet().stream().map(punishment -> (BanEntry<?>) punishment).collect(Collectors.toSet());
+    }
+
+    @SuppressWarnings("deprecation")
+    @Override
+    public <E extends BanEntry<? super PlayerProfile>> @Nullable E getBanEntry(org.bukkit.profile.@NotNull PlayerProfile target) {
+        return (E) getLatestPunishment(Objects.requireNonNull(target.getUniqueId())).orElse(null);
+    }
+
+    @Override
+    public boolean isBanned(@NotNull String target) {
+        return isBanned(Objects.requireNonNull(resolvePlayerProfile(target)));
+    }
+
+    @Override
+    public boolean isBanned(@NotNull PlayerProfile target) {
+        return getLatestPunishment(Objects.requireNonNull(target.getId())).isPresent();
+    }
+
+    @SuppressWarnings("deprecation")
+    @Override
+    public boolean isBanned(@NotNull org.bukkit.profile.PlayerProfile target) {
+        return getLatestPunishment(Objects.requireNonNull(target.getUniqueId())).isPresent();
+    }
+
+    @Override
+    public void pardon(@NotNull String target) {
+        //TODO
+    }
+
+    @Override
+    public void pardon(@NotNull PlayerProfile target) {
+        //TODO
+    }
+
+    @SuppressWarnings("deprecation")
+    @Override
+    public void pardon(@NotNull org.bukkit.profile.PlayerProfile target) {
+        //TODO
+    }
+
+    @Override
+    public <E extends BanEntry<? super PlayerProfile>> @Nullable E addBan(@NotNull String target, @Nullable String reason, @Nullable Date expires, @Nullable String source) {
+        return (E) addBan(Objects.requireNonNull(resolvePlayerProfile(target)), reason, expires, source);
+    }
+
+    @SuppressWarnings("deprecation")
+    @Override
+    public <E extends BanEntry<? super PlayerProfile>> @Nullable E addBan(org.bukkit.profile.@NotNull PlayerProfile target, @Nullable String reason, @Nullable Instant expires, @Nullable String source) {
+        return (E) addBan(target.getUser(), reason, getDateTransformer(expires), source);
+    }
+
+    @SuppressWarnings("deprecation")
+    @Override
+    public <E extends BanEntry<? super PlayerProfile>> @Nullable E addBan(org.bukkit.profile.@NotNull PlayerProfile target, @Nullable String reason, @Nullable Duration duration, @Nullable String source) {
+        return (E) addBan(target.getUser(), reason, getDateTransformer(duration), source);
+    }
+
+    @SuppressWarnings("deprecation")
+    @Override
+    public <E extends BanEntry<? super PlayerProfile>> @Nullable E addBan(org.bukkit.profile.@NotNull PlayerProfile target, @Nullable String reason, @Nullable Date expires, @Nullable String source) {
+        return (E) addBan(target.getUser(), reason, getDateTransformer(expires), source);
+    }
+
+    @Override
+    public @Nullable BanEntry<PlayerProfile> addBan(@NotNull PlayerProfile target, @Nullable String reason, @Nullable Instant expires, @Nullable String source) {
+        return addBan(target.getUser(), reason, getDateTransformer(expires), source);
+    }
+
+    @Override
+    public @Nullable BanEntry<PlayerProfile> addBan(@NotNull PlayerProfile target, @Nullable String reason, @Nullable Duration duration, @Nullable String source) {
+        return addBan(target.getUser(), reason, getDateTransformer(duration), source);
+    }
+
+    @Override
+    public @Nullable BanEntry<PlayerProfile> addBan(@NotNull PlayerProfile target, @Nullable String reason, @Nullable Date expires, @Nullable String source) {
+        return addBan(target.getUser(), reason, getDateTransformer(expires), source);
+    }
+
+    private @Nullable PlayerProfile resolvePlayerProfile(@NotNull String target) {
+        GameProfile gameProfile = resolveGameProfile(target);
+        return gameProfile==null ? null:new CraftPlayerProfile(gameProfile.getId(), gameProfile.getName());
+    }
+
+    private @Nullable GameProfile resolveGameProfile(@NotNull String target) {
+        if (target.matches("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$")) {
+            UUID targetUUID = UUID.fromString(target);
+            return Objects.requireNonNull(MinecraftServer.getServer().getProfileCache()).get(targetUUID).orElse(null);
+        }
+        return Objects.requireNonNull(MinecraftServer.getServer().getProfileCache()).get(target).orElse(null);
+    }
+
+    /**
+     * This method is responsible for adding an entry to the ban list for a specific player. This method requires several parameters as described below.
+     * <p>
+     * The action of banning involves communicating with a backend system.
+     * If the system is not reachable, a {@link BackendException} will be thrown.
+     * To handle such situations, this method has a catch block to wrap the {@link BackendException}
+     *
+     * @param target              represents the {@link User} object to be banned.
+     *                            This parameter is annotated with {@link NotNull}
+     *                            which means it must never be null.
+     * @param reason              is a string containing the reason for the ban.
+     *                            This parameter is allowed to be null, represent by {@link Nullable}.
+     *                            If null, the default reason specified by the system will be used.
+     * @param durationTransformer is an instance of {@link DurationTransformer}.
+     *                            This parameter is used to determine the duration of the ban.
+     *                            This cannot be null.
+     * @param source              is a string representing the entity which imposes the ban action.
+     *                            Though this parameter is nullable, a {@link IllegalArgumentException}
+     *                            will be thrown if source is null after an internal checking.
+     * @return An instance of {@link BanEntry}<{@link PlayerProfile}> is created and returned.
+     * The return value encapsulates details such as ban type, ban duration,
+     * operator and reason for the ban.
+     * @throws IllegalArgumentException If the {@code source} parameter is null.
+     * @throws RuntimeException         If the backend system cannot be reached.
+     */
+    private @NotNull BanEntry<PlayerProfile> addBan(@NotNull User target, @Nullable String reason, @NotNull DurationTransformer durationTransformer, @Nullable String source) {
+
+        if (source==null) {
+            throw new IllegalArgumentException("Source must not be null");
+        }
+        // Detect source
+        return punish(target.getPlayerClient().getTotalID(), new MinecraftBanTemplate(BanType.BAN, durationTransformer.create()), new ServerEntity() {
+            @Override
+            public @NotNull String getName() {
+                return source;
+            }
+
+            @Override
+            public @NotNull Component displayName() {
+                return Component.text(source);
+            }
+
+            @Override
+            public @NotNull Locale getCurrentLocale() {
+                return Bukkit.getPulvinar().getImplementation(LocalizationImplementation.class).getDefaultLocale();
+            }
+
+            @Override
+            public boolean isConnected() {
+                return false;
+            }
+
+            @Override
+            public boolean isClient() {
+                return true;
+            }
+        }, reason==null ? null:LegacyComponentSerializer.legacySection().deserialize(reason));
+    }
+
+    /**
+     * The `getDateTransformer` method is overloaded to accept three different types of arguments: {@link Date}, {@link Duration}, and {@link Instant}.
+     * These methods have been contractually defined to produce a new value whenever they're called and are considered to be pure (no side effects).
+     * <p>
+     * Each of these methods is responsible for converting a given {@link Date}, {@link Duration}, or {@link Instant} into an instance of {@link DurationTransformer}, an interface that only contains one method: `create()`, which returns an {@link AccurateDuration} object.
+     * <p>
+     * Note: If the `Date`, `Duration`, or `Instant` provided to these methods is null, the `create()` method of the resultant {@link DurationTransformer} will return null when called.
+     *
+     * @param expires - {@link Date} object representing point of expire instance or null.
+     * @return a new {@link DurationTransformer} that encapsulates the conversion logic from {@link Date} to {@link AccurateDuration}.
+     */
+    @Contract(value = "_ -> new", pure = true)
+    private @NotNull DurationTransformer getDateTransformer(@Nullable Date expires) {
+        return getDateTransformer(expires==null ? null:expires.toInstant());
+    }
+
+    /**
+     * Converts a given {@link Duration} object to a new instance of {@link DurationTransformer}. This method is a part of a suite of transformation methods that handle different types of expire representation.
+     *
+     * @param duration is a {@link Duration} that represents the amount of expire or can potentially be null.
+     *                 If null, the method will delegate to another `getDateTransformer` method with a null {@link Instant} as an argument.
+     *                 If not null, the method will transform it into an {@link Instant} that is the current moment in expire incremented by the
+     *                 number of milliseconds represented by the duration. Then it delegates to another `getDateTransformer` method.
+     * @return a new {@link DurationTransformer}, which is a functional interface for converting different types of expire representation into
+     * an {@link AccurateDuration}. This returned transformer's `create` method will, when called, produce an {@link AccurateDuration}
+     * representing the same expire span as the given duration argument.
+     */
+    @Contract(value = "_ -> new", pure = true)
+    private @NotNull DurationTransformer getDateTransformer(@Nullable Duration duration) {
+        return getDateTransformer(duration==null ? null:Instant.now().plusMillis(duration.toMillis()));
+    }
+
+    /**
+     * Converts a given {@link Instant} object to a new instance of {@link DurationTransformer}. This method is a part of a suite of transformation methods that handle different types of expire representation.
+     *
+     * @param instant is an {@link Instant} that represents a specific moment on a expire-line or can potentially be null.
+     *                If null, the returned {@link DurationTransformer}'s `create` method will produce null when called.
+     *                If not null, the returned {@link DurationTransformer}'s `create` method will produce an {@link AccurateDuration} which represents
+     *                amount of expire between now and the instant when called.
+     * @return a new {@link DurationTransformer}, which is a functional interface for converting different types of expire representation into an
+     * {@link AccurateDuration}. Depending on the arguments it has been passed, the `create` method of returned object will produce different output.
+     */
+    @Contract(value = "_ -> new", pure = true)
+    private @NotNull DurationTransformer getDateTransformer(@Nullable Instant instant) {
+        return new DurationTransformer() {
+            @Override
+            public @Nullable AccurateDuration create() {
+                return instant==null ? null:Bukkit.getPulvinar().getImplementation(TimeImplementation.class).millis(Instant.now().until(instant, ChronoUnit.MILLIS));
+            }
+        };
+    }
+
+    /**
+     * DurationTransformer is a functional interface which provides a contract for transforming various expire representations into an {@link AccurateDuration}.
+     * It's intended to be utilized by classes that need expire conversion functionalities.
+     * Annotated with {@code @FunctionalInterface}, it ensures that this interface should only have one abstract method, conforming to the Java language specification.
+     */
+    @FunctionalInterface
+    private interface DurationTransformer {
+
+        /**
+         * This abstract method named 'create' is the single method in this functional interface. The duty of exact transformation varies depending on its implementation.
+         * <ul>
+         * <li> In some implementations, the 'create' method will convert a specific point in expire into a duration from that point until the current expire.</li>
+         * <li> In others, it might translate a specific elapsed expire period into a duration.</li>
+         * </ul>
+         *
+         * @return an {@link AccurateDuration} instance representing the result of the transformation, or null if the transformation could not be successfully completed
+         * or resulted in a null value.
+         */
+        @Nullable
+        AccurateDuration create();
+
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarBanTemplate.java b/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarBanTemplate.java
new file mode 100644
index 0000000000000000000000000000000000000000..d82276ecaf2a74e5fc488526509e4b802050954c
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarBanTemplate.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.ban;
+
+import net.kissenpvp.core.api.networking.socket.DataPackage;
+import net.kissenpvp.core.ban.KissenBanTemplate;
+import net.kissenpvp.pulvinar.api.ban.BanTemplate;
+import org.jetbrains.annotations.NotNull;
+
+public class PulvinarBanTemplate extends KissenBanTemplate implements BanTemplate {
+    @Override
+    public void sendData(@NotNull DataPackage dataPackage) {
+        //TODO
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarPunishment.java b/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarPunishment.java
new file mode 100644
index 0000000000000000000000000000000000000000..b0fb7aa99b4446588249b4f8d9a98d2ff1f91087
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarPunishment.java
@@ -0,0 +1,131 @@
+/*
+ * Copyright (C) 2023 KissenPvP
+ *
+ * This program is licensed under the Apache License, Version 2.0.
+ *
+ * This software may be redistributed and/or modified under the terms
+ * of the Apache License as published by the Apache Software Foundation,
+ * either version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, either express or implied. See the Apache
+ * License, Version 2.0 for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * You should have received a copy of the Apache License, Version 2.0
+ * along with this program. If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
+ */
+
+package net.kissenpvp.pulvinar.ban;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import net.kissenpvp.core.api.database.DataWriter;
+import net.kissenpvp.core.ban.KissenPunishment;
+import net.kissenpvp.core.ban.KissenPunishmentNode;
+import net.kissenpvp.pulvinar.api.ban.Punishment;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.Date;
+import java.util.Set;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+/**
+ * The {@code PulvinarPunishment} class is a specific implementation of {@code KissenPunishment}, representing
+ * punishment data in a Paper server context. This class additionally implements the {@code PaperPunishment}
+ * interface, hence making it a Paper-specific extension of the {@code KissenPunishment}.
+ * <p>
+ * This class is designed to work with in-game Players and their associated punishment data, including
+ * PunishmentNode, DataWriter and much more. It provides operations to manipulate the punishment data such as
+ * {@code getOnlineAffectedPlayers()}, {@code getBanTarget()}, {@code getCreated()} etc.
+ * <p>
+ * The instances of this class are mutable but do not allow direct mutation of the created and source fields.
+ * Mutating operations for these fields will throw an {@code UnsupportedOperationException}.
+ *
+ * @see KissenPunishment
+ * @see Punishment
+ * @author User
+ */
+public class PulvinarPunishment extends KissenPunishment<Player> implements Punishment {
+
+    /**
+     * Instantiates a {@code PulvinarPunishment}.
+     *
+     * @param totalID The UUID of the dataset for which the punishment data is to be created.
+     * @param kissenPunishmentNode The data container for this punishment.
+     * @param dataWriter (Nullable) The DataWriter that will be used for updating the punishment data.
+     */
+    public PulvinarPunishment(@NotNull UUID totalID, @NotNull KissenPunishmentNode kissenPunishmentNode, @Nullable DataWriter<KissenPunishmentNode> dataWriter) {
+        super(totalID, kissenPunishmentNode, dataWriter);
+    }
+
+    @Override
+    public @Unmodifiable Set<Player> getOnlineAffectedPlayers() {
+        return Bukkit.getOnlinePlayers().stream().filter(player -> player.getTotalID().equals(getTotalID())).collect(Collectors.toSet());
+    }
+
+    @Override
+    public @NotNull String getTarget() {
+        return null; //TODO
+    }
+
+    @Override
+    public @NotNull PlayerProfile getBanTarget() {
+        return null; //TODO
+    }
+
+    @Override
+    public @NotNull Date getCreated() {
+        return Date.from(getStart());
+    }
+
+    @Override
+    public void setCreated(@NotNull Date created) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public @NotNull String getSource() {
+        return getBanOperator();
+    }
+
+    @Override
+    public void setSource(@NotNull String source) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public @Nullable Date getExpiration() {
+        return getEnd().map(Date::from).orElse(null);
+    }
+
+    @Override
+    public void setExpiration(@Nullable Date expiration) {
+        setEnd(expiration == null ? null : expiration.toInstant());
+    }
+
+    @Override
+    public @Nullable String getReason() {
+        return getCause().map(cause -> LegacyComponentSerializer.legacyAmpersand().serialize(cause)).orElse(null);
+    }
+
+    @Override
+    public void setReason(@Nullable String reason) {
+        setCause(reason == null ? null : LegacyComponentSerializer.legacySection().deserialize(reason));
+    }
+
+    @Override
+    public void save() {
+        // not used
+    }
+
+    @Override
+    public void remove() {
+        // not used
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarPunishmentList.java b/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarPunishmentList.java
new file mode 100644
index 0000000000000000000000000000000000000000..4e2688d22f1edaa0799a44273f68c33d0219901f
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/ban/PulvinarPunishmentList.java
@@ -0,0 +1,167 @@
+package net.kissenpvp.pulvinar.ban;
+
+import com.google.gson.JsonObject;
+import com.mojang.authlib.GameProfile;
+import net.kissenpvp.core.api.database.meta.BackendException;
+import net.kissenpvp.core.api.user.UserImplementation;
+import net.kissenpvp.core.api.user.UserInfo;
+import net.kissenpvp.pulvinar.api.ban.BanImplementation;
+import net.kissenpvp.pulvinar.api.ban.Punishment;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.MutableComponent;
+import net.minecraft.server.players.StoredUserEntry;
+import net.minecraft.server.players.UserBanList;
+import net.minecraft.server.players.UserBanListEntry;
+import org.bukkit.Bukkit;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Collectors;
+
+public class PulvinarPunishmentList extends UserBanList {
+
+    public PulvinarPunishmentList() {
+        super(null);
+    }
+
+
+    
+    @Override
+    protected @NotNull StoredUserEntry<GameProfile> createEntry(JsonObject json) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public boolean isBanned(GameProfile profile) {
+        return getBanImplementation().isBanned(String.valueOf(profile.getId()));
+    }
+
+    @Override
+    public String @NotNull [] getUserList() {
+        return new String[0]; // too performance consuming and not even necessary.
+    }
+
+    @Override
+    public @NotNull File getFile() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void add(UserBanListEntry entry) {
+        getBanImplementation().addBan(String.valueOf(Objects.requireNonNull(entry.getUser()).getId()), entry.getReason(), entry.getExpires(), entry.getSource());
+    }
+
+    @Nullable
+    @Override
+    public UserBanListEntry get(@NotNull GameProfile key) {
+        try {
+            return getBanImplementation().getLatestPunishment(key.getId()).map(this::translate).orElse(null); //TODO use totalID instead.
+        }catch (BackendException backendException)
+        {
+            return null;
+        }
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return getBanImplementation().getEntries().isEmpty();
+    }
+
+    @Override
+    protected boolean contains(@NotNull GameProfile k0) {
+        return getEntries().stream().anyMatch(entry -> Objects.equals(entry.getUser(), k0));
+    }
+
+    @Override
+    public @NotNull Collection<UserBanListEntry> getEntries() {
+        return getBanImplementation().getEntries().stream().map(ban -> translate((Punishment) ban)).collect(Collectors.toSet());
+    }
+
+    @Override
+    public void save() throws IOException {
+        // ignored
+    }
+
+    @Override
+    public void load()  {
+        // ignored
+    }
+
+    @Override
+    public void remove(@NotNull GameProfile key) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void remove(@NotNull StoredUserEntry<GameProfile> entry) {
+        throw new UnsupportedOperationException();
+    }
+
+    /**
+     * Retrieves the PaperBanImplementation instance.
+     *
+     * @return The PaperBanImplementation instance. This method returns the implementation of the PaperBan plugin
+     *         registered with Bukkit's implementation provider.
+     * @throws IllegalStateException if the PaperBanImplementation has not been registered with the implementation provider.
+     */
+    private @NotNull BanImplementation getBanImplementation()
+    {
+        return Bukkit.getPulvinar().getImplementation(BanImplementation.class);
+    }
+
+    /**
+     * Translates a PaperPunishment object into a UserBanListEntry object.
+     *
+     * @param paperPunishment The PaperPunishment object to be translated.
+     * @return The translated UserBanListEntry object.
+     */
+    @Contract("_ -> new")
+    private @NotNull UserBanListEntry translate(@NotNull Punishment paperPunishment)
+    {
+        return new PulvinarPunishmentListEntry(paperPunishment);
+    }
+
+    private final static class PulvinarPunishmentListEntry extends UserBanListEntry
+    {
+        private final Punishment paperPunishment;
+
+        public PulvinarPunishmentListEntry(@NotNull Punishment paperPunishment)
+        {
+            super(null, paperPunishment.getCreated(), paperPunishment.getSource(), paperPunishment.getExpiration(),
+                    paperPunishment.getName());
+            this.paperPunishment = paperPunishment;
+        }
+
+        @Override
+        public @NotNull Component getDisplayName()
+        {
+
+            UserImplementation userImplementation = Bukkit.getPulvinar().getImplementation(UserImplementation.class);
+            List<MutableComponent> componentStream = paperPunishment.getAffectedPlayers().stream().map(
+                    uuid -> userImplementation.getCachedUserProfile(uuid).map(UserInfo::getName).map(
+                            Component::literal).orElse(Component.translatable("commands.banlist.entry.unknown"))).toList();
+
+            MutableComponent names = Component.empty();
+            for (int i = 0; i < componentStream.size(); i++)
+            {
+                names.append(componentStream.get(i));
+                if(i < componentStream.size() - 2)
+                {
+                    names.append(", ");
+                }
+                else if(i < componentStream.size() - 1)
+                {
+                    names.append(" and ");
+                }
+            }
+
+            return names;
+        }
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/ban/command/BanCommand.java b/src/main/java/net/kissenpvp/pulvinar/ban/command/BanCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..3708d6da3db09ae680c0b502d14ed05a16055a58
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/ban/command/BanCommand.java
@@ -0,0 +1,145 @@
+package net.kissenpvp.pulvinar.ban.command;
+
+import net.kissenpvp.core.api.ban.AbstractPunishment;
+import net.kissenpvp.core.api.ban.BanType;
+import net.kissenpvp.core.api.ban.exception.NonexistentPunishmentException;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.command.annotations.ArgumentName;
+import net.kissenpvp.core.api.command.annotations.CommandData;
+import net.kissenpvp.core.api.command.annotations.Optional;
+import net.kissenpvp.core.api.command.annotations.TabCompleter;
+import net.kissenpvp.core.api.database.meta.BackendException;
+import net.kissenpvp.core.api.time.AccurateDuration;
+import net.kissenpvp.core.api.time.TemporalObject;
+import net.kissenpvp.pulvinar.api.ban.BanImplementation;
+import net.kissenpvp.pulvinar.api.ban.BanTemplate;
+import net.kissenpvp.pulvinar.api.ban.Punishment;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+
+import java.time.Instant;
+import java.util.Set;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class BanCommand {
+
+    /**
+     * Executes the ban command to punish a specific user by removing their access rights from the server.
+     *
+     * @param payload     the command payload containing the sender information
+     * @param player      the offline player to be banned
+     * @param paperBan    the PaperBan representing the type of ban
+     * @param reasonArray the optional reason for the ban
+     * @throws BackendException if there is an error in the backend
+     */
+    @CommandData(value = "ban", aliases = {"punish", "mute", "kick"}, description = "This command is used to ban or punish a specific user by removing their access rights from the server.")
+    public void ban(@NotNull CommandPayload<CommandSender> payload, @NotNull OfflinePlayer player, @NotNull BanTemplate paperBan, @NotNull @Optional @ArgumentName("reason") String[] reasonArray) throws BackendException {
+        if (payload.getSender() instanceof OfflinePlayer && player.getRank().getSource().getPriority() < player.getRank().getSource().getPriority()) {
+            payload.getSender().sendMessage(Component.translatable("server.ban.player.not.allowed", player.displayName()));
+            return;
+        }
+        java.util.Optional<Component> reason = getReason(reasonArray);
+        Punishment punishment = player.punish(paperBan, payload.getSender(), reason.orElse(null));
+
+        Component displayName = player.displayName();
+        Component message = messages().punishComponent(displayName, punishment.getBanType(), reason.orElse(null));
+        payload.getSender().sendMessage(message);
+    }
+
+    /**
+     * This method is responsible for executing the command to create predefined ban types
+     * with a specified duration which can serve as templates for different banning situations.
+     * CommandData annotation is used to provide command metadata.
+     *
+     * @param payload          The information about the command including sender and command details.
+     * @param name             The name of the ban template.
+     * @param id               The identifier for the ban template.
+     * @param banType          The type of ban that this template represents.
+     * @param accurateDuration The duration which the ban (derived from this template) will last.
+     * @throws BackendException If any error occurs during the creation of the ban template at the backend.
+     */
+    @CommandData(value = "ban.template.create", description = "Command to create predefined ban types with a specified duration. These can be used as templates for various ban situations.")
+    public void create(@NotNull CommandPayload<CommandSender> payload, @ArgumentName("id") int id, @NotNull @ArgumentName("name") String name, @NotNull @ArgumentName("type") BanType banType, @NotNull java.util.Optional<AccurateDuration> accurateDuration) throws BackendException {
+        BanImplementation banImplementation = Bukkit.getPulvinar().getImplementation(BanImplementation.class);
+
+        Runnable runnable = () -> {
+            BanTemplate paperBan = banImplementation.createBanTemplate(id, name, banType, accurateDuration.orElse(null));
+
+            Component idComponent = Component.text(paperBan.getID()), nameComponent = Component.text(paperBan.getName()), banTypeComponent = Component.text(paperBan.getBanType().toString());
+            if (accurateDuration.isPresent()) {
+                Component[] args = {idComponent, nameComponent, banTypeComponent, accurateDuration.get().toComponent(payload.getSender().getCurrentLocale())};
+                payload.getSender().sendMessage(Component.translatable("server.ban.created", args));
+                return;
+            }
+            Component[] args = {idComponent, nameComponent, banTypeComponent};
+            payload.getSender().sendMessage(Component.translatable("server.ban.created.permanent", args));
+        };
+
+        //Ask for confirmation if ban exists.
+        if (banImplementation.getBanTemplate(id).isPresent()) {
+            payload.getSender().sendMessage(Component.translatable("server.ban.create.override", Component.text(id)));
+            payload.confirmRequest(runnable).suppressMessage(true).send();
+            return;
+        }
+        runnable.run();
+    }
+
+    @CommandData(value = "ban.template.delete")
+    public void delete(@NotNull CommandPayload<CommandSender> payload, @NotNull BanTemplate paperBan) throws BackendException {
+        paperBan.delete();
+        payload.getSender().sendMessage(Component.translatable("server.ban.deleted", Component.text(paperBan.getID())));
+    }
+
+    @CommandData(value = "unban", description = "This command is used to disable a specific ban, identifying it by its unique ID.")
+    public void unban(@NotNull CommandPayload<CommandSender> payload, @NotNull Punishment punishment) {
+        if (!punishment.isValid()) {
+            throw new NonexistentPunishmentException(punishment.getID());
+        }
+        punishment.setEnd(Instant.now());
+
+        Component idComponent = Component.text(punishment.getID());
+        payload.getSender().sendMessage(Component.translatable("server.ban.punishment.pardoned", idComponent));
+    }
+
+    @TabCompleter("unban")
+    public @NotNull Set<String> tabUnban() {
+        BanImplementation banImplementation = Bukkit.getPulvinar().getImplementation(BanImplementation.class);
+        Stream<Punishment> punishments = banImplementation.getPunishmentSet().stream().filter(TemporalObject::isValid);
+        return punishments.map(AbstractPunishment::getID).collect(Collectors.toSet());
+    }
+
+    @CommandData(value = "ban.history")
+    public void history(@NotNull CommandPayload<CommandSender> payload, @NotNull OfflinePlayer offlinePlayer, @NotNull @ArgumentName("page") java.util.Optional<Integer> page) {
+        payload.getSender().sendMessage(messages().getHistory(payload, offlinePlayer, page.orElse(1)));
+    }
+
+    @CommandData(value = "ban.info")
+    public void banInfo(@NotNull CommandPayload<CommandSender> payload, @NotNull Punishment paperPunishment) {
+        payload.getSender().sendMessage(messages().punishmentInfo(payload, paperPunishment));
+    }
+
+
+    @Contract(pure = true, value = "-> new")
+    private @NotNull BanCommandMessages messages() {
+        return new BanCommandMessages();
+    }
+
+    /**
+     * Retrieves the reason as a {@link Component} object.
+     *
+     * @param reason the array of strings representing the reason
+     * @return the reason as a Component object, or null if the reason is empty
+     */
+    private @NotNull java.util.Optional<Component> getReason(@NotNull String @NotNull [] reason) {
+        if (reason.length!=0) {
+            return java.util.Optional.of(LegacyComponentSerializer.legacyAmpersand().deserialize(String.join(" ", reason).strip()));
+        }
+        return java.util.Optional.empty();
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/ban/command/BanCommandMessages.java b/src/main/java/net/kissenpvp/pulvinar/ban/command/BanCommandMessages.java
new file mode 100644
index 0000000000000000000000000000000000000000..71a75f50f3c901fe403f49cac706e514b49e80df
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/ban/command/BanCommandMessages.java
@@ -0,0 +1,256 @@
+package net.kissenpvp.pulvinar.ban.command;
+
+import net.kissenpvp.core.api.ban.AbstractBanTemplate;
+import net.kissenpvp.core.api.ban.BanType;
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.util.PageBuilder;
+import net.kissenpvp.core.api.util.PageImplementation;
+import net.kissenpvp.core.util.KissenPageBuilder;
+import net.kissenpvp.pulvinar.api.ban.BanImplementation;
+import net.kissenpvp.pulvinar.api.ban.BanTemplate;
+import net.kissenpvp.pulvinar.api.ban.Punishment;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.TranslatableComponent;
+import net.kyori.adventure.text.event.ClickEvent;
+import net.kyori.adventure.text.event.HoverEvent;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.time.ZoneId;
+import java.time.format.DateTimeFormatter;
+import java.time.format.FormatStyle;
+import java.util.Comparator;
+import java.util.List;
+
+/**
+ * Utility class for providing messages related to the ban command.
+ */
+public class BanCommandMessages
+{
+    /**
+     * Retrieves a paginated list of ban IDs along with associated information for the specified page.
+     *
+     * @param payload The command payload containing information about the sender and context.
+     * @param page The page number to retrieve ban IDs for.
+     * @return A formatted Component containing the paginated ban IDs and associated information.
+     *         If no ban IDs are found, a message indicating their absence is returned.
+     * @throws IllegalArgumentException if the payload or any of its required components are null.
+     * @throws UnsupportedOperationException if the ban system implementation is not available.
+     */
+    public @NotNull Component getBanIDList(@NotNull CommandPayload<CommandSender> payload, final int page)
+    {
+        PageImplementation pageImplementation = Bukkit.getPulvinar().getImplementation(PageImplementation.class);
+        BanImplementation banSystem = Bukkit.getPulvinar().getImplementation(BanImplementation.class);
+
+        List<BanTemplate> sorted = banSystem.getBanTemplates().stream().sorted(Comparator.comparingInt(AbstractBanTemplate::getID)).toList();
+        if (sorted.isEmpty())
+        {
+            return Component.text("Gibt keine ban ids");
+        }
+        PageBuilder<BanTemplate> banIDPageBuilder = pageImplementation.createPageBuilder(sorted);
+
+        Component header = banIDPageBuilder.getHeader(Component.text("BanIDs"), page);
+        Component footer = banIDPageBuilder.getFooter(Component.text("BanIDs"), page);
+
+        TextComponent.Builder builder = Component.text().append(header);
+        for (BanTemplate currentBan : banIDPageBuilder.getEntries(page))
+        {
+            Component[] args = {
+                    Component.text(currentBan.getID()), Component.text(currentBan.getName()), Component.text(currentBan.getBanType().toString())
+            };
+            Component time = currentBan.getDuration().map(duration -> duration.toComponent(payload.getSender())).orElse(Component.translatable("mco.configure.world.subscription.unknown"));
+            builder.appendNewline().append(Component.translatable("server.ban.banid.compact", args).hoverEvent(HoverEvent.showText(time)));
+        }
+
+        builder.appendNewline().append(footer);
+        return builder.asComponent();
+    }
+
+    /**
+     * Retrieves a paginated history of punishments for the specified player.
+     *
+     * @param payload The command payload containing information about the sender and context.
+     * @param player The player for whom to retrieve the punishment history.
+     * @param page The page number to retrieve the punishment history for.
+     * @return A formatted Component containing the paginated punishment history for the player.
+     *         If the player has no history, a message indicating the absence of history is returned.
+     * @throws IllegalArgumentException if the payload, player, or any of their required components are null.
+     */
+    public @NotNull Component getHistory(@NotNull CommandPayload<CommandSender> payload, @NotNull OfflinePlayer player, int page)
+    {
+        List<Punishment> playerHistory = player.getPunishmentHistory();
+        if (playerHistory.isEmpty())
+        {
+            return Component.translatable("server.ban.history.empty", player.displayName());
+        }
+        PageBuilder<Punishment> pageBuilder = new KissenPageBuilder<>(playerHistory);
+
+        Component header = pageBuilder.getHeader(player.displayName(), page);
+        Component footer = pageBuilder.getFooter(player.displayName(), page);
+
+        TextComponent.Builder builder = Component.text().append(header);
+        builder.append(compactHistory(payload, pageBuilder.getEntries(page)));
+
+        return builder.appendNewline().append(footer).asComponent();
+    }
+
+    /**
+     * This method is responsible for building the information of a punishment given on a server.
+     * The necessary parameters are a payload and a specific instance of a PaperPunishment.
+     * <p>
+     * The method first checks if the punishment is still valid. Depending on the validity, it sets the text color of the punishment name to either
+     * enabled or disabled using the ThemeProvider class.
+     * It then creates a header and footer for the punishment information with the punishment name in the appropriate color.
+     * Next, it creates Component instances for the punishment details including: ID, operator, start date, predicted end date, and actual end date.
+     * It then sets up a builder object to start constructing the punishment information block.
+     * The constructed information block consists of key-value pairs of punishment detail labels and their corresponding values.
+     * For each detail, it appends a new line with translated key-value pairs to the message.
+     * In the case of a cause for the punishment being present, it includes this in the message as well.
+     * This method also formats the start, predicted end, and the actual end dates according to a specific date format style.
+     * If the punishment doesn't have an end (is permanent), it reflects this in the result as well.
+     * Finally, this method appends the footer to the information block and returns the constructed Component.
+     *
+     * @param payload         the CommandPayload that contains the context for this command execution.
+     *                        It contains information about the command sender and any possible arguments used in the command.
+     * @param paperPunishment the instance of the PaperPunishment class which contains the information of the punishment.
+     *                        It includes details such as the ID, the operator who imposed the punishment, the start and end of the punishment, and the reason for the punishment if applicable.
+     * @return a Component that contains the punishment information block to be displayed to the command sender.
+     * @throws NullPointerException if either payload or paperPunishment is null.
+     */
+    public @NotNull Component punishmentInfo(@NotNull CommandPayload<CommandSender> payload, @NotNull Punishment paperPunishment)
+    {
+        Component header = Component.translatable("server.command.general.header", Component.text(paperPunishment.getName()));
+        Component footer = Component.translatable("server.command.general.footer", Component.text(paperPunishment.getName()));
+
+        Component id = Component.translatable("server.general.id");
+        Component by = Component.translatable("server.ban.punishment.operator");
+        Component start = Component.translatable("server.ban.punishment.start");
+        Component predictedEnd = Component.translatable("server.ban.punishment.predicted.end");
+        Component end = Component.translatable("server.ban.punishment.actual.end");
+
+        TranslatableComponent banInfo = Component.translatable("server.command.general.key.value");
+
+        TextComponent.Builder builder = Component.text().append(header);
+        builder.appendNewline().append(banInfo.arguments(id, constructCopyable(paperPunishment.getID())));
+        builder.appendNewline().append(banInfo.arguments(by, Component.text(paperPunishment.getBanOperator())));
+        paperPunishment.getCause().ifPresent(cause -> builder.appendNewline().append(
+                banInfo.arguments(Component.translatable("server.ban.punishment.cause"),
+                        cause)));
+
+        DateTimeFormatter formatter = payload.getSender().getFormatter(FormatStyle.SHORT);
+        builder.appendNewline().append(
+                banInfo.arguments(start, Component.text(formatter.format(paperPunishment.getStart()))));
+        builder.appendNewline().append(banInfo.arguments(predictedEnd, paperPunishment.endComponent(formatter)));
+        if (!paperPunishment.getEnd().equals(paperPunishment.getPredictedEnd()))
+        {
+            Component date = paperPunishment.endComponent(payload.getSender().getFormatter(FormatStyle.SHORT));
+            builder.appendNewline().append(banInfo.arguments(end, date));
+        }
+
+        builder.appendNewline().append(footer);
+        return builder.asComponent();
+    }
+
+    /**
+     * This method builds a compact history of punishments based on a provided list of PaperPunishment instances.
+     * This version of punishment history is intended to provide a brief snapshot of several punishments with their essential information in a compact format.
+     * <p>
+     * The method first sets up a DateTimeFormatter that formats dates in a localized short style,
+     * using the locale of the command sender and the system default timezone.
+     * It then creates an empty Component builder that will be used to build the result history block.
+     * It then traverses the list of punishments, and for each punishment:
+     * It figures out the status color based on whether the punishment is still valid.
+     * It builds an array of arguments containing essential information of the punishment formatted as Components.
+     * These arguments include: ID, name, operating user, ban type, total ID, start date, end date (or "permanent" if not applicable)
+     * and a validity status ('✔' if valid, '❌' if not).
+     * These arguments are then appended to the builder with a new line and a translatable history entry string.
+     * After traversing all punishments, this method calls asComponent() on the builder to build the compact punishment history,
+     * which is then returned as a Component.
+     *
+     * @param payload           the CommandPayload that contains the context for this command execution.
+     *                          It contains information about the command sender and any possible arguments used in the command.
+     * @param punishmentHistory a List of PaperPunishment instances that represent the punishment history for a user/server.
+     * @return a Component that represents a compact history of paper punishments in the form of key-value pairs.
+     * @throws NullPointerException if either payload or punishmentHistory is null.
+     */
+    private @NotNull Component compactHistory(@NotNull CommandPayload<CommandSender> payload, @NotNull List<Punishment> punishmentHistory)
+    {
+        DateTimeFormatter formatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT).withZone(
+                ZoneId.systemDefault()).withLocale(payload.getSender().getCurrentLocale());
+        TextComponent.Builder component = Component.text();
+        for (Punishment paperPunishment : punishmentHistory)
+        {
+            Component[] arguments = {
+                    Component.text(paperPunishment.getID()).hoverEvent(
+                            HoverEvent.showText(Component.translatable("server.general.show.more"))).clickEvent(
+                            ClickEvent.clickEvent(ClickEvent.Action.RUN_COMMAND,
+                                    "/baninfo " + paperPunishment.getID())),
+                    Component.text(paperPunishment.getName()),
+                    Component.text(paperPunishment.getBanOperator()),
+                    Component.text(paperPunishment.getBanType().toString()),
+                    Component.text(paperPunishment.getTotalID().toString()),
+                    Component.text(formatter.format(paperPunishment.getStart())),
+                    paperPunishment.endComponent(payload.getSender().getFormatter(FormatStyle.SHORT)),
+                    Component.text(paperPunishment.isValid() ? "✔" : "❌")
+            };
+            component.appendNewline().append(Component.translatable("server.ban.punishment.compact", arguments));
+        }
+
+        return component.asComponent();
+    }
+
+    /**
+     * Obtain the punished message for a given display name, ban type, and reason component.
+     *
+     * @param displayName     The display name of the punished player.
+     * @param banType         The type of punishment (BAN, MUTE, KICK).
+     * @param reasonComponent The reason for the punishment (optional).
+     * @return The punished message as a Component object.
+     * @throws NullPointerException if display name or ban type is null.
+     */
+    public @NotNull Component punishComponent(@NotNull Component displayName, @NotNull BanType banType, @Nullable Component reasonComponent)
+    {
+        StringBuilder translationKey = new StringBuilder("server.ban.player.");
+        switch (banType)
+        {
+            case BAN -> translationKey.append("banned");
+            case MUTE -> translationKey.append("muted");
+            case KICK -> translationKey.append("kicked");
+        }
+
+        if (reasonComponent != null)
+        {
+            return Component.translatable(translationKey.append(".cause").toString(), displayName, reasonComponent);
+        }
+        return Component.translatable(translationKey.toString(), displayName);
+    }
+
+    /**
+     * This method is responsible for constructing a clickable text component that,
+     * when clicked, copies the provided text to the clipboard.
+     * On hovering over this component, a tooltip saying "copy to clipboard" is shown.
+     * <p>
+     * The method first calls Component.text() to convert the raw string into a Component.
+     * It then sets up a clickEvent for this Component using ClickEvent.copyToClipboard().
+     * This click event will copy the provided raw string to the user's clipboard when the Component is clicked.
+     * Further, it sets up a hover event for this Component using HoverEvent.showText() to show a tooltip when the user hovers over this Component.
+     * The text of the tooltip is set to "copy to clipboard".
+     * This method could be used to construct clickable and copyable command outputs, URLs, token strings, etc
+     * for an interactive and user-friendly experience.
+     *
+     * @param text the raw string that will be converted into a Component,
+     *             and also the string that will be copied to the clipboard when the user clicks the resulting Component.
+     * @return a Component that, when clicked, copies the provided string to the clipboard and shows a tooltip on hover.
+     * @throws NullPointerException if text is null.
+     */
+    private @NotNull Component constructCopyable(@NotNull String text)
+    {
+        return Component.text(text).clickEvent(ClickEvent.copyToClipboard(text)).hoverEvent(
+                HoverEvent.showText(Component.text("copy to clipboard")));
+    }
+
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/ban/warn/KissenWarn.java b/src/main/java/net/kissenpvp/pulvinar/ban/warn/KissenWarn.java
new file mode 100644
index 0000000000000000000000000000000000000000..07cdb5317025176973fc095a65d79386e1141ce4
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/ban/warn/KissenWarn.java
@@ -0,0 +1,15 @@
+package net.kissenpvp.pulvinar.ban.warn;
+
+import net.kissenpvp.core.ban.warn.KissenAbstractWarn;
+import net.kissenpvp.core.ban.warn.WarnNode;
+import net.kissenpvp.pulvinar.api.ban.BanTemplate;
+import net.kissenpvp.pulvinar.api.ban.warn.Warn;
+import org.jetbrains.annotations.NotNull;
+
+public class KissenWarn extends KissenAbstractWarn<BanTemplate> implements Warn
+{
+    public KissenWarn(@NotNull WarnNode warnNode)
+    {
+        super(warnNode);
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/ban/warn/command/WarnCommand.java b/src/main/java/net/kissenpvp/pulvinar/ban/warn/command/WarnCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..bf60ebc384e35bdab9e7286c03204dbf57b4ffdb
--- /dev/null
+++ b/src/main/java/net/kissenpvp/pulvinar/ban/warn/command/WarnCommand.java
@@ -0,0 +1,149 @@
+package net.kissenpvp.pulvinar.ban.warn.command;
+
+import net.kissenpvp.core.api.command.CommandPayload;
+import net.kissenpvp.core.api.command.annotations.ArgumentName;
+import net.kissenpvp.core.api.command.annotations.CommandData;
+import net.kissenpvp.core.api.command.annotations.Optional;
+import net.kissenpvp.core.api.time.TemporalObject;
+import net.kissenpvp.core.api.util.PageBuilder;
+import net.kissenpvp.core.api.util.PageImplementation;
+import net.kissenpvp.pulvinar.api.ban.BanTemplate;
+import net.kissenpvp.pulvinar.api.ban.warn.Warn;
+import net.kissenpvp.pulvinar.ban.command.BanCommand;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.event.ClickEvent;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.time.format.FormatStyle;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+public class WarnCommand
+{
+
+    /**
+     * Executes the "warn" command to warn a specific user to refrain from inappropriate behavior.
+     *
+     * @param payload     The command payload containing the command sender.
+     * @param player      The player to be warned.
+     * @param paperBan    The PaperBan instance for warning the player.
+     * @param reasonArray (Optional) The reason for the warning.
+     */
+    @CommandData(value = "warn", description = "This command is used to warn a specific user to refrain from inappropriate behavior.")
+    public void warn(@NotNull CommandPayload<CommandSender> payload, @NotNull OfflinePlayer player, @NotNull BanTemplate paperBan, @NotNull @Optional @ArgumentName("reason") String[] reasonArray)
+    {
+        java.util.Optional<Component> transformedReason = getReason(reasonArray);
+        List<Warn> currentWarns = player.getWarnHistory().stream().filter(TemporalObject::isValid).toList();
+
+        Runnable runnable = () ->
+        {
+            player.warn(paperBan, payload.getSender(), transformedReason.orElse(null));
+            payload.getSender().sendMessage(warnMessage(player.displayName(), Component.text(currentWarns.size() + 1),
+                    transformedReason.orElse(null)));
+        };
+
+        if (currentWarns.size() > 1)
+        {
+            Component[] args = {
+                    player.displayName(),
+                    Component.text(currentWarns.size()),
+                    getClickable("gui.yes", "/confirm"),
+                    getClickable("gui.no", "/cancel")
+            };
+            payload.getSender().sendMessage(Component.translatable("server.ban.warn.ban", args));
+
+            Runnable ban = () -> new BanCommand().ban(payload, player, paperBan, reasonArray);
+            payload.confirmRequest(ban).onCancel(runnable).onTime(runnable).suppressMessage(true).send();
+            return;
+        }
+        runnable.run();
+    }
+
+    @CommandData(value = "warn.history", description = "This command shows the history of the warns the specified player has received. It also include warns that have expired already.")
+    public void warnHistory(@NotNull CommandPayload<CommandSender> payload, @NotNull OfflinePlayer player, @NotNull java.util.Optional<Integer> page)
+    {
+        List<Warn> paperWarns = new ArrayList<>(player.getWarnHistory());
+        if (paperWarns.isEmpty())
+        {
+            payload.getSender().sendMessage(Component.translatable("server.ban.no.warns", player.getName()));
+            return;
+        }
+        Collections.reverse(paperWarns);
+        PageImplementation pageImplementation = Bukkit.getPulvinar().getImplementation(PageImplementation.class);
+        PageBuilder<Warn> warnPages = pageImplementation.createPageBuilder(paperWarns);
+
+        int titlePage = page.orElse(1);
+        TextComponent.Builder builder = Component.text().append(warnPages.getHeader(player.displayName(), titlePage));
+
+        for (Warn warn : warnPages.getEntries(page.orElse(1)))
+        {
+            Component unknown = Component.text("commands.banlist.entry.unknown");
+            Component banid = warn.getBan().map(ban -> (Component) Component.text(ban.getName())).orElse(unknown);
+            String time = payload.getSender().getFormatter(FormatStyle.MEDIUM).format(warn.getStart());
+
+            Component[] arguments = {Component.text(warn.isValid() ? "✔":"❌"), banid, Component.text(time)};
+
+            builder.appendNewline().append(Component.translatable("server.ban.compact", arguments));
+        }
+        builder.appendNewline().append(warnPages.getFooter(player.displayName(), titlePage));
+        payload.getSender().sendMessage(builder.asComponent());
+    }
+
+    @CommandData(value = "warn.reset", description = "This command resets the end time of all active warnings to the current time.")
+    public void warnClear(@NotNull CommandPayload<CommandSender> payload, @NotNull OfflinePlayer player)
+    {
+        payload.confirmRequest(() ->
+        {
+            player.clearActiveWarns();
+            payload.getSender().sendMessage(Component.translatable("server.ban.warn.clear", player.displayName()));
+        }).send();
+    }
+
+    /**
+     * Obtains the warned message with the given components.
+     *
+     * @param displayName     The display name component.
+     * @param warningCount    The warning count component.
+     * @param reasonComponent The optional reason component.
+     * @return The warned message component.
+     */
+    private @NotNull Component warnMessage(@NotNull Component displayName, @NotNull Component warningCount, @Nullable Component reasonComponent)
+    {
+        if (reasonComponent == null)
+        {
+            return Component.translatable("server.ban.player.warned", displayName, warningCount);
+        }
+        return Component.translatable("server.ban.player.warned.cause", displayName, warningCount, reasonComponent);
+    }
+
+    /**
+     * Retrieves the reason as a {@link Component} object.
+     *
+     * @param reason the array of strings representing the reason
+     * @return the reason as a Component object, or null if the reason is empty
+     */
+    private @NotNull java.util.Optional<Component> getReason(@NotNull String @NotNull [] reason)
+    {
+        if (reason.length != 0)
+        {
+            return java.util.Optional.of(
+                    LegacyComponentSerializer.legacyAmpersand().deserialize(String.join(" ", reason).strip()));
+        }
+        return java.util.Optional.empty();
+    }
+
+    @Contract(pure = true, value = "_, _ -> new")
+    private @NotNull Component getClickable(@NotNull String translationKey, @NotNull String command)
+    {
+        Component confirm = Component.translatable(translationKey).clickEvent(ClickEvent.runCommand(command));
+        return Component.text("[").append(confirm).append(Component.text("]"));
+    }
+}
diff --git a/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java b/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java
index e737bc37c973b41633194d252f47c355ae3f06e4..9200c70bb77729b2f026b0bbbb923c616493a91e 100644
--- a/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java
+++ b/src/main/java/net/kissenpvp/pulvinar/base/PulvinarCore.java
@@ -59,6 +59,7 @@ public class PulvinarCore extends KissenCore implements Pulvinar {
         loader.put(net.kissenpvp.pulvinar.api.command.CommandImplementation.class, commandImplementation);
         loader.put(net.kissenpvp.core.command.InternalCommandImplementation.class, commandImplementation);
         loader.put(net.kissenpvp.core.command.confirmation.KissenConfirmationImplementation.class, new net.kissenpvp.pulvinar.command.confirmation.PulvinarConfirmationImplementation());
+        loader.put(net.kissenpvp.pulvinar.api.ban.BanImplementation.class, new net.kissenpvp.pulvinar.ban.PulvinarBanImplementation());
         super.loadImplementations(loader);
     }
 
diff --git a/src/main/java/net/kissenpvp/pulvinar/networking/client/entity/InternalPulvinarOnlinePlayerClient.java b/src/main/java/net/kissenpvp/pulvinar/networking/client/entity/InternalPulvinarOnlinePlayerClient.java
index 6bf95a6ba833df5733076befc3d3d030548fa289..cb430ffdd83e390963257ab6d6e802311600c267 100644
--- a/src/main/java/net/kissenpvp/pulvinar/networking/client/entity/InternalPulvinarOnlinePlayerClient.java
+++ b/src/main/java/net/kissenpvp/pulvinar/networking/client/entity/InternalPulvinarOnlinePlayerClient.java
@@ -18,7 +18,6 @@
 
 package net.kissenpvp.pulvinar.networking.client.entity;
 
-import net.kissenpvp.core.api.ban.AbstractBanTemplate;
 import net.kissenpvp.pulvinar.api.ban.BanTemplate;
 import net.kissenpvp.pulvinar.api.ban.warn.Warn;
 import io.netty.channel.Channel;
diff --git a/src/main/java/net/kissenpvp/pulvinar/networking/client/entity/InternalPulvinarPlayerClient.java b/src/main/java/net/kissenpvp/pulvinar/networking/client/entity/InternalPulvinarPlayerClient.java
index e02174fdf3f480949dda9a536699e54260de4d79..380a470e98063ddf58cd2a604bc67f38bd55b737 100644
--- a/src/main/java/net/kissenpvp/pulvinar/networking/client/entity/InternalPulvinarPlayerClient.java
+++ b/src/main/java/net/kissenpvp/pulvinar/networking/client/entity/InternalPulvinarPlayerClient.java
@@ -19,12 +19,16 @@
 package net.kissenpvp.pulvinar.networking.client.entity;
 
 import net.kissenpvp.core.api.database.DataWriter;
+import net.kissenpvp.core.api.database.meta.list.MetaList;
+import net.kissenpvp.core.api.networking.client.entitiy.ServerEntity;
 import net.kissenpvp.core.api.time.AccurateDuration;
+import net.kissenpvp.core.api.time.TemporalData;
 import net.kissenpvp.core.api.user.User;
 import net.kissenpvp.core.api.user.UserImplementation;
 import net.kissenpvp.core.ban.warn.WarnNode;
 import net.kissenpvp.core.networking.client.entity.KissenPlayerClient;
 import net.kissenpvp.core.user.rank.PlayerRankNode;
+import net.kissenpvp.pulvinar.api.ban.BanTemplate;
 import net.kissenpvp.pulvinar.api.ban.Punishment;
 import net.kissenpvp.pulvinar.api.ban.warn.Warn;
 import net.kissenpvp.pulvinar.api.base.Context;
@@ -39,6 +43,7 @@ import net.kissenpvp.pulvinar.user.PulvinarPublicUser;
 import net.kissenpvp.pulvinar.user.playersetting.PulvinarBoundPlayerSetting;
 import net.kissenpvp.pulvinar.user.rank.PulvinarPlayerRank;
 import net.kissenpvp.pulvinar.user.rank.PulvinarPlayerFallBackRank;
+import net.kyori.adventure.text.Component;
 import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
 import org.jetbrains.annotations.Contract;
@@ -46,6 +51,8 @@ import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.jetbrains.annotations.Unmodifiable;
 
+import java.time.Period;
+import java.util.List;
 import java.util.Set;
 import java.util.function.Function;
 import java.util.stream.Collectors;
@@ -82,14 +89,6 @@ public abstract class InternalPulvinarPlayerClient extends KissenPlayerClient<Pl
         return getOnlineTime(getUser(context));
     }
 
-    @Override
-    public void clearActiveWarns() {
-        //TODO
-        /*List<WarnNode> nodes = new ArrayList<>(getUser().getListNotNull("warn_list", WarnNode.class));
-        nodes.forEach(warn -> warn.temporalMeasure().end().setValue(System.currentTimeMillis()));
-        getUser().setList("warn_list", nodes);*/
-    }
-
     @Override
     public @NotNull User getUser(@NotNull Context context) {
         PulvinarPublicUser pulvinarUser = (PulvinarPublicUser) getUser();
@@ -110,12 +109,39 @@ public abstract class InternalPulvinarPlayerClient extends KissenPlayerClient<Pl
         return new PulvinarBoundPlayerSetting<>(getPlayerSetting(settingClass), offlinePlayer);
     }
 
+    @Override
+    public @NotNull @Unmodifiable List<Warn> getWarnHistory() {
+        return ((PulvinarPublicUser) getUser()).getWarns().stream().map(transformWarn()).toList();
+    }
+
+    @Override
+    public void clearActiveWarns() {
+        ((PulvinarPublicUser) getUser()).clearWarns();
+    }
+
+    @Override
+    public @NotNull Warn warn(@NotNull BanTemplate ban, @NotNull ServerEntity warnOperator) {
+        return warn(ban, warnOperator, null);
+    }
+
+    @Override
+    public @NotNull Warn warn(@NotNull BanTemplate ban, @NotNull ServerEntity warnOperator, @Nullable Component reason) {
+        MetaList<WarnNode> nodes = ((PulvinarPublicUser) getUser()).getWarns();
+
+        AccurateDuration duration = new AccurateDuration(Period.ofWeeks(1));
+        TemporalData temporalData = new TemporalData(duration);
+
+        WarnNode node = new WarnNode(ban.getID(), warnOperator.getName(), reason, temporalData);
+        nodes.add(node);
+        return transformWarn().apply(node);
+    }
+
     public @NotNull PulvinarPermissible getPermissionContext() throws PermissibleOverriddenException {
         return (PulvinarPermissible) getPermissible();
     }
 
     @Contract(pure = true, value = "-> new")
     protected @NotNull Function<WarnNode, Warn> transformWarn() {
-        return (w) -> null; //TODO
+        return net.kissenpvp.pulvinar.ban.warn.KissenWarn::new;
     }
 }
diff --git a/src/main/java/net/kissenpvp/pulvinar/user/PulvinarPublicUser.java b/src/main/java/net/kissenpvp/pulvinar/user/PulvinarPublicUser.java
index 32a7f1d8b301263e56abe2a94a368b492a22b1b5..45a08179e510a89586c9bc16a03014eff4f3ce71 100644
--- a/src/main/java/net/kissenpvp/pulvinar/user/PulvinarPublicUser.java
+++ b/src/main/java/net/kissenpvp/pulvinar/user/PulvinarPublicUser.java
@@ -42,7 +42,9 @@ import org.bukkit.Bukkit;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.time.Instant;
 import java.util.*;
+import java.util.function.Predicate;
 
 /**
  * The {@code PulvinarPublicUser} class extends the {@link KissenPublicUser} class with {@link Permission}
@@ -70,6 +72,24 @@ public class PulvinarPublicUser extends KissenPublicUser<Permission> {
         super(uuid, name);
     }
 
+    public @NotNull MetaList<WarnNode> getWarns() {
+        return getRepository().getListNotNull("warn_list", WarnNode.class);
+    }
+
+    public void clearWarns() {
+        List<WarnNode> nodes = new ArrayList<>(getWarns());
+        final long end = System.currentTimeMillis();
+
+        Predicate<WarnNode> isValid = warn ->
+        {
+            Instant now = Instant.now();
+            Optional<Long> optionalEnd = warn.temporalMeasure().end().toOptional();
+            return optionalEnd.stream().anyMatch(lo -> Instant.ofEpochMilli(lo).isAfter(now));
+        };
+        nodes.stream().filter(isValid).forEach(warn -> warn.temporalMeasure().end().setValue(end));
+        getRepository().setList("warn_list", nodes);
+    }
+
     @Override
     public @NotNull PlayerClient<?, ?> getPlayerClient() {
         return getPrivateUserEntry().getPlayerClient();
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 4ff21b6c6003f4ed8a124288af16e5c0a3a470ac..0381a1cfb51731e067821f8bb7d754fe07aec3a6 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -446,6 +446,14 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                 return false;
             }
 
+            net.kissenpvp.pulvinar.api.ban.BanImplementation banImplementation = org.bukkit.Bukkit.getPulvinar().getImplementation(net.kissenpvp.pulvinar.api.ban.BanImplementation.class);
+            java.util.UUID totalId = user.getTotalId();
+            net.kissenpvp.pulvinar.api.ban.Punishment paperPunishment = banImplementation.getLatestPunishment(totalId, net.kissenpvp.core.api.ban.BanType.BAN).orElse(null);
+            if (paperPunishment != null) {
+                disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(paperPunishment.getPunishmentText(user.getLocale())));
+                return false;
+            }
+
         } catch (BackendException backendException) {
             disconnect(Component.translatable("multiplayer.disconnect.unverified_username")); // maybe better message
             return false;
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index dce653fd71d1f2fb833b4e7dd17940aee118bdbb..26508fd5dc9393f3072957f79b6a37cfc1835e96 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -111,7 +111,6 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.entity.Player;
 import org.bukkit.event.entity.EntityRemoveEvent;
@@ -121,7 +120,6 @@ import org.bukkit.event.player.PlayerLoginEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerRespawnEvent;
 import org.bukkit.event.player.PlayerRespawnEvent.RespawnReason;
-import org.bukkit.event.player.PlayerSpawnChangeEvent;
 // CraftBukkit end
 
 public abstract class PlayerList {
@@ -166,7 +164,7 @@ public abstract class PlayerList {
         server.console = new com.destroystokyo.paper.console.TerminalConsoleCommandSender(); // Paper
         // CraftBukkit end
 
-        this.bans = new UserBanList(PlayerList.USERBANLIST_FILE);
+        this.bans = /*new UserBanList(PlayerList.USERBANLIST_FILE);*/ new net.kissenpvp.pulvinar.ban.PulvinarPunishmentList(); // Pulvinar - rework ban system
         this.ipBans = new IpBanList(PlayerList.IPBANLIST_FILE);
         this.ops = /*new ServerOpList(PlayerList.OPLIST_FILE);*/ new net.kissenpvp.pulvinar.user.PulvinarOperatorList(); // Pulvinar
         this.whitelist = /*new UserWhiteList(PlayerList.WHITELIST_FILE);*/ new net.kissenpvp.pulvinar.user.PulvinarUserWhiteList(); // Pulvinar
@@ -739,6 +737,8 @@ public abstract class PlayerList {
         Player player = entity.getBukkitEntity();
         PlayerLoginEvent event = new PlayerLoginEvent(player, loginlistener.connection.hostname, ((java.net.InetSocketAddress) socketaddress).getAddress(), ((java.net.InetSocketAddress) loginlistener.connection.channel.remoteAddress()).getAddress());
 
+        // Pulvinar start - Integrate ban system from kissen into paper
+        /*
         // Paper start - Fix MC-158900
         UserBanListEntry gameprofilebanentry;
         if (this.bans.isBanned(gameprofile) && (gameprofilebanentry = this.bans.get(gameprofile)) != null) {
@@ -770,6 +770,8 @@ public abstract class PlayerList {
                 event.disallow(PlayerLoginEvent.Result.KICK_FULL, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(org.spigotmc.SpigotConfig.serverFullMessage)); // Spigot // Paper - Adventure
             }
         }
+        */
+        // Pulvinar end - Integrate ban system from kissen into paper
 
         this.cserver.getPluginManager().callEvent(event);
         if (event.getResult() != PlayerLoginEvent.Result.ALLOWED) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index f6b6d0d753e81d58cd21ba41d1e2f3e63267b743..a9a431b57997a1a107c57e56dad795d41c9d6a18 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2266,6 +2266,11 @@ public final class CraftServer implements Server {
 
     @Override
     public <T extends BanList<?>> T getBanList(BanList.Type type) {
+        if(true)
+        {
+            // Pulvinar start - rework ban system
+            return (T) Bukkit.getPulvinar().getImplementation(net.kissenpvp.pulvinar.api.ban.BanImplementation.class).getPunishmentSet();
+        }
         Preconditions.checkArgument(type != null, "BanList.Type cannot be null");
 
         return switch (type) {
@@ -2278,6 +2283,11 @@ public final class CraftServer implements Server {
     @SuppressWarnings("unchecked")
     @Override
     public <B extends BanList<E>, E> B getBanList(final io.papermc.paper.ban.BanListType<B> type) {
+        if(true)
+        {
+            // Pulvinar start - rework ban system
+            return (B) Bukkit.getPulvinar().getImplementation(net.kissenpvp.pulvinar.api.ban.BanImplementation.class);
+        }
         Preconditions.checkArgument(type != null, "BanList.BanType cannot be null");
        if (type == io.papermc.paper.ban.BanListType.IP) {
            return (B) new CraftIpBanList(this.playerList.getIpBans());
