From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivo Quiring <falk.quiring@gmail.com>
Date: Sun, 3 Mar 2024 09:34:37 +0100
Subject: [PATCH] Integrated advancement system into paper

Signed-off-by: Ivo Quiring <falk.quiring@gmail.com>

diff --git a/src/main/java/net/kissenpvp/paper/advancement/PulvinarPlayerAdvancement.java b/src/main/java/net/kissenpvp/paper/advancement/PulvinarPlayerAdvancement.java
new file mode 100644
index 0000000000000000000000000000000000000000..307c975a59ddddb8bf7ba12208c764f4029c9111
--- /dev/null
+++ b/src/main/java/net/kissenpvp/paper/advancement/PulvinarPlayerAdvancement.java
@@ -0,0 +1,45 @@
+package net.kissenpvp.paper.advancement;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParseException;
+import com.mojang.datafixers.DataFixer;
+import com.mojang.serialization.JsonOps;
+import net.kissenpvp.paper.api.base.Context;
+import net.kissenpvp.paper.user.PulvinarPublicUser;
+import net.minecraft.server.PlayerAdvancements;
+import net.minecraft.server.ServerAdvancementManager;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.players.PlayerList;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+
+public class PulvinarPlayerAdvancement extends PlayerAdvancements {
+
+    public PulvinarPlayerAdvancement(DataFixer dataFixer, PlayerList playerManager, ServerAdvancementManager advancementLoader, Path filePath, ServerPlayer owner) {
+        super(dataFixer, playerManager, advancementLoader, filePath, owner);
+    }
+
+    @Override
+    protected void load(@NotNull ServerAdvancementManager advancementLoader) {
+        JsonElement progress = getPrivateUser().getAdvancementsProgress();
+        PlayerAdvancements.Data data = this.getCodec().parse(JsonOps.INSTANCE, progress).getOrThrow(JsonParseException::new);
+        this.applyFrom(advancementLoader, data);
+
+        this.checkForAutomaticTriggers(advancementLoader);
+        this.registerListeners(advancementLoader);
+    }
+
+    @Override
+    public void save() {
+        if (org.spigotmc.SpigotConfig.disableAdvancementSaving) { return; } // Spigot
+
+        JsonElement progress = this.getCodec().encodeStart(JsonOps.INSTANCE, this.asData()).getOrThrow();
+        getPrivateUser().setAdvancementsProgress(progress);
+    }
+
+    private @NotNull PulvinarPublicUser.PulvinarPrivateUser getPrivateUser()
+    {
+        return (PulvinarPublicUser.PulvinarPrivateUser) getPlayer().getBukkitEntity().getUser(Context.LOCAL);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index c7e1f2bac3eca9bb72bf1f8c26cccb2905e1ddfc..42abbf41bc59b82b753a7e32857fc6dd459f7748 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -103,7 +103,7 @@ public class PlayerAdvancements {
         this.load(advancementLoader);
     }
 
-    private void registerListeners(ServerAdvancementManager advancementLoader) {
+    protected void registerListeners(ServerAdvancementManager advancementLoader) { // Pulvinar - make protected
         Iterator iterator = advancementLoader.getAllAdvancements().iterator();
 
         while (iterator.hasNext()) {
@@ -114,7 +114,7 @@ public class PlayerAdvancements {
 
     }
 
-    private void checkForAutomaticTriggers(ServerAdvancementManager advancementLoader) {
+    protected void checkForAutomaticTriggers(ServerAdvancementManager advancementLoader) { // Pulvinar - make protected
         Iterator iterator = advancementLoader.getAllAdvancements().iterator();
 
         while (iterator.hasNext()) {
@@ -129,7 +129,7 @@ public class PlayerAdvancements {
 
     }
 
-    private void load(ServerAdvancementManager advancementLoader) {
+    protected void load(ServerAdvancementManager advancementLoader) { // Pulvinar - make protected
         if (Files.isRegularFile(this.playerSavePath, new LinkOption[0])) {
             try {
                 JsonReader jsonreader = new JsonReader(Files.newBufferedReader(this.playerSavePath, StandardCharsets.UTF_8));
@@ -193,7 +193,7 @@ public class PlayerAdvancements {
 
     }
 
-    private void applyFrom(ServerAdvancementManager loader, PlayerAdvancements.Data progressMap) {
+    protected void applyFrom(ServerAdvancementManager loader, PlayerAdvancements.Data progressMap) { // Pulvinar - made protected
         progressMap.forEach((minecraftkey, advancementprogress) -> {
             AdvancementHolder advancementholder = loader.get(minecraftkey);
 
@@ -208,7 +208,7 @@ public class PlayerAdvancements {
         });
     }
 
-    private PlayerAdvancements.Data asData() {
+    protected PlayerAdvancements.Data asData() { // Pulvinar - made protected
         Map<ResourceLocation, AdvancementProgress> map = new LinkedHashMap();
 
         this.progress.forEach((advancementholder, advancementprogress) -> {
@@ -416,14 +416,30 @@ public class PlayerAdvancements {
         });
     }
 
-    private static record Data(Map<ResourceLocation, AdvancementProgress> map) {
+    protected record Data(Map<ResourceLocation, AdvancementProgress> map) { // Pulvinar - made protected and remove static
 
         public static final Codec<PlayerAdvancements.Data> CODEC = Codec.unboundedMap(ResourceLocation.CODEC, AdvancementProgress.CODEC).xmap(PlayerAdvancements.Data::new, PlayerAdvancements.Data::map);
 
+        // Pulvinar start - add constructor because java defaults it to private
+        protected Data(Map<ResourceLocation, AdvancementProgress> map) {
+            this.map = map;
+        }
+        // Pulvinar end - add constructor because java defaults it to private
+
         public void forEach(BiConsumer<ResourceLocation, AdvancementProgress> consumer) {
             this.map.entrySet().stream().sorted(Entry.comparingByValue()).forEach((entry) -> {
                 consumer.accept((ResourceLocation) entry.getKey(), (AdvancementProgress) entry.getValue());
             });
         }
     }
+
+    // Pulvinar start - make player accessible from class children
+    protected @org.jetbrains.annotations.NotNull ServerPlayer getPlayer() {
+        return player;
+    }
+
+    public @org.jetbrains.annotations.NotNull Codec<Data> getCodec() {
+        return codec;
+    }
+    // Pulvinar end - make player accessible from class children
 }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 098e126960bc4589f1f598213f7ed102c0dc8ace..48f74504e12a54f20f0a3bd347983bc78a937d69 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -26,6 +26,7 @@ import java.util.function.Function;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 
+import net.kissenpvp.paper.advancement.PulvinarPlayerAdvancement;
 import net.kissenpvp.paper.ban.PulvinarPunishmentList;
 import net.minecraft.ChatFormatting;
 import net.minecraft.FileUtil;
@@ -1516,7 +1517,11 @@ public abstract class PlayerList {
         if (advancementdataplayer == null) {
             Path path = this.server.getWorldPath(LevelResource.PLAYER_ADVANCEMENTS_DIR).resolve(String.valueOf(uuid) + ".json");
 
-            advancementdataplayer = new PlayerAdvancements(this.server.getFixerUpper(), this, this.server.getAdvancements(), path, player);
+            // Pulvinar start - make advancements being saved in the database
+            //advancementdataplayer = new PlayerAdvancements(this.server.getFixerUpper(), this, this.server.getAdvancements(), path, player);
+            advancementdataplayer = new PulvinarPlayerAdvancement(this.server.getFixerUpper(), this, this.server.getAdvancements(), path, player);
+            // Pulvinar end - make advancements being saved in the database
+
             // this.advancements.put(uuid, advancementdataplayer); // CraftBukkit
         }
 
